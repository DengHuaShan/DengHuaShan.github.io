<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamMaker-HS</title>
  
  <subtitle>勤思善问，可敌良师益友。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dhsmp.com/"/>
  <updated>2018-10-28T00:40:25.278Z</updated>
  <id>http://dhsmp.com/</id>
  
  <author>
    <name>HuaShan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年度总结</title>
    <link href="http://dhsmp.com/2018/10/15/annual-summary-2018/"/>
    <id>http://dhsmp.com/2018/10/15/annual-summary-2018/</id>
    <published>2018-10-15T07:04:17.000Z</published>
    <updated>2018-10-28T00:40:25.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018年目标"><a href="#2018年目标" class="headerlink" title="2018年目标"></a>2018年目标</h2><h3 id="1月目标"><a href="#1月目标" class="headerlink" title="1月目标"></a>1月目标</h3><ul><li>完成自考4月报考</li><li>阅读《大学之路》第一册</li><li>阅读《文明之光》第二册</li><li>阅读教材《数据结构》</li></ul><h3 id="1月进展"><a href="#1月进展" class="headerlink" title="1月进展"></a>1月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>完成自考4月报考</del></li><li><del>阅读《大学之路》第一册</del></li><li><del>阅读《文明之光》第二册</del></li><li><del>阅读教材《数据结构》</del></li></ul><h3 id="2月目标"><a href="#2月目标" class="headerlink" title="2月目标"></a>2月目标</h3><ul><li>刷题《数据结构》，提炼重点知识</li><li>阅读教材《网络工程》</li><li>阅读教材《计算机网络安全》</li><li>记忆理解《计算机网络原理》重点知识</li><li>阅读《大学之路》第二册</li><li>阅读《文明之光》第三册</li></ul><h3 id="2月进展"><a href="#2月进展" class="headerlink" title="2月进展"></a>2月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《数据结构》，提炼重点知识</del></li><li><del>阅读教材《网络工程》</del></li><li><del>阅读教材《计算机网络安全》</del></li><li><del>记忆理解《计算机网络原理》重点知识</del></li><li><del>阅读《大学之路》第二册</del></li><li><del>阅读《文明之光》第三册</del></li></ul><h3 id="3月目标"><a href="#3月目标" class="headerlink" title="3月目标"></a>3月目标</h3><ul><li>刷题《计算机网络安全》，提炼重点知识</li><li>刷题《网络工程》，提炼重点知识</li><li>记忆理解《计算机网络原理》重点知识</li><li>记忆理解《数据结构》重点知识</li><li>阅读《数学之美》</li><li>阅读《文明之光》第四册</li><li>阅读《见识》</li><li>阅读《智能时代》</li><li>泛读《大话数据结构》</li></ul><h3 id="3月进展"><a href="#3月进展" class="headerlink" title="3月进展"></a>3月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络安全》，提炼重点知识</del></li><li><del>刷题《网络工程》，提炼重点知识</del></li><li><del>记忆理解《计算机网络原理》重点知识</del></li><li><del>记忆理解《数据结构》重点知识</del></li><li><del>阅读《数学之美》</del></li><li><del>阅读《文明之光》第四册</del></li><li><del>阅读《见识》</del></li><li><del>阅读《智能时代》</del></li><li><del>泛读《大话数据结构》</del></li></ul><h3 id="4月目标"><a href="#4月目标" class="headerlink" title="4月目标"></a>4月目标</h3><ul><li>刷题《计算机网络安全》，提炼重点知识</li><li>记忆理解《计算机网络安全》重点知识</li><li>参加4月自学考试</li><li>再次阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</li></ul><h3 id="4月进展"><a href="#4月进展" class="headerlink" title="4月进展"></a>4月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络安全》，提炼重点知识</del></li><li><del>记忆理解《计算机网络安全》重点知识</del></li><li><del>参加4月自学考试</del></li><li><del>再次阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</del></li></ul><h3 id="5月目标"><a href="#5月目标" class="headerlink" title="5月目标"></a>5月目标</h3><ul><li>阅读《计算机组成原理》</li><li>阅读《智识分子：做个复杂的现代人》</li><li>阅读《高手：精英的见识和我们的时代》</li><li>阅读《如何有效阅读一本书》</li><li>阅读《学会学习：从认知自我到高效学习》</li><li>阅读《抗压力：逆境重生法则》</li></ul><h3 id="5月进展"><a href="#5月进展" class="headerlink" title="5月进展"></a>5月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读《计算机组成原理》</del></li><li><del>阅读《智识分子：做个复杂的现代人》</del></li><li><del>阅读《高手：精英的见识和我们的时代》</del></li><li><del>阅读《如何有效阅读一本书》</del></li><li><del>阅读《学会学习：从认知自我到高效学习》</del></li><li><del>阅读《抗压力：逆境重生法则》<br><img src="https://dhsmp.nos-eastchina1.126.net/80165275.jpg" alt=""></del></li></ul><h3 id="6月目标"><a href="#6月目标" class="headerlink" title="6月目标"></a>6月目标</h3><ul><li>阅读教材《数据库系统原理》</li><li>阅读教材《互联网及其应用》</li></ul><h3 id="6月进展"><a href="#6月进展" class="headerlink" title="6月进展"></a>6月进展</h3><ul><li><del>阅读教材《数据库系统原理》</del></li><li><del>阅读教材《互联网及其应用》</del></li><li><del>完成一篇博客文章的输出</del></li><li><del>《新概念英语一》进展的很缓慢，到目前为止推进到第55课。</del></li></ul><h3 id="7月目标"><a href="#7月目标" class="headerlink" title="7月目标"></a>7月目标</h3><ul><li>阅读教材《网络操作系统》</li><li>提炼《数据库系统原理》重点知识</li><li>阅读《踏踏实实学英语》</li><li>阅读《记忆的窍门》</li><li>阅读《学习贵在开窍》</li><li>报考10月考试《网络操作系统》《数据库系统原理》《计算机网络管理》《互联网及其应用》</li></ul><h3 id="7月进展"><a href="#7月进展" class="headerlink" title="7月进展"></a>7月进展</h3><ul><li><del>阅读教材《网络操作系统》</del></li><li><del>提炼《数据库系统原理》重点知识</del></li><li><del>阅读《踏踏实实学英语》</del></li><li><del>阅读《记忆的窍门》</del></li><li><del>阅读《学习贵在开窍》</del></li></ul><h3 id="8月目标"><a href="#8月目标" class="headerlink" title="8月目标"></a>8月目标</h3><ul><li>提炼《网络操作系统》重点知识</li><li>刷题《数据库系统原理》</li><li>阅读教材《计算机网络管理》</li><li>阅读《硅谷钢铁侠》</li><li>阅读《天涯若比邻》</li><li>阅读《整理的艺术》</li><li>阅读《零秒思考》</li></ul><h3 id="8月进展"><a href="#8月进展" class="headerlink" title="8月进展"></a>8月进展</h3><ul><li><del>提炼《网络操作系统》重点知识</del></li><li><del>刷题《数据库系统原理》</del></li><li><del>阅读《硅谷钢铁侠》</del></li><li><del>阅读《天涯若比邻》</del></li><li><del>阅读《整理的艺术》</del></li><li><del>阅读《零秒思考》</del></li></ul><h3 id="9月目标"><a href="#9月目标" class="headerlink" title="9月目标"></a>9月目标</h3><ul><li>刷题《网络操作系统》，记忆理解重点知识点</li><li>刷题《数据库系统原理》，记忆理解重点知识点</li><li>阅读《雷军:世界需要我的突围》</li><li>阅读《麦肯锡教我的思考武器》</li><li>阅读《麦肯锡入职培训第一课》</li></ul><h3 id="9月进展"><a href="#9月进展" class="headerlink" title="9月进展"></a>9月进展</h3><ul><li><del>刷题《网络操作系统》，记忆理解重点知识点</del></li><li><del>刷题《数据库系统原理》，记忆理解重点知识点</del></li><li><del>阅读《雷军:世界需要我的突围》</del></li><li><del>阅读《麦肯锡教我的思考武器》</del></li><li><del>阅读《麦肯锡入职培训第一课》</del></li></ul><h3 id="10月目标"><a href="#10月目标" class="headerlink" title="10月目标"></a>10月目标</h3><ul><li>记忆理解《网络操作系统》重点知识点</li><li>记忆理解《数据库系统原理》重点知识点</li><li>记忆理解《互联网及其应用》重点知识点</li><li>阅读《人类简史》</li><li>参加10月自学考试</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018年目标&quot;&gt;&lt;a href=&quot;#2018年目标&quot; class=&quot;headerlink&quot; title=&quot;2018年目标&quot;&gt;&lt;/a&gt;2018年目标&lt;/h2&gt;&lt;h3 id=&quot;1月目标&quot;&gt;&lt;a href=&quot;#1月目标&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="随想" scheme="http://dhsmp.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络原理学习部分的总结</title>
    <link href="http://dhsmp.com/2018/07/30/network/"/>
    <id>http://dhsmp.com/2018/07/30/network/</id>
    <published>2018-07-30T08:48:57.000Z</published>
    <updated>2018-10-28T00:40:25.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><p>从去年9月开始，看教材《计算机网络原理》到4月考试通过，前前后后花了大半年时间。必须得承认，我不是神童，也不是学霸，不是那种一学就会的体质。《计算机网络原理》绝对是我啃得最慢，也是我认为最枯燥的一本教科书。但是我还是靠自学把它啃下来了，磨炼了心性。对于计算机网络世界的理解，真的上升了不少，不仅仅只是编程。<br>曾国藩对于学习，提出过四点要求，个人觉得非常有意思。<br><strong>一曰看生书宜求速，不多读则太陋。<br>一曰温旧书宜求熟，不背诵则易忘。<br>一曰习字宜有恒，不善写则如身之无衣，山之无木。<br>一曰作文宜苦思，不善作则如人之哑不能言，马之肢不能行。</strong></p><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><p>在教科书中，有一段话是需要背的。什么是计算机网络？只有当你能够很顺的背下来，你才会去回味、去理解概述的含义。这里再借鉴一下教科书上的内容。<br><strong>计算机网络，是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</strong><br>在整个计算机网络发展史中，早期60年代的计算机网络是美国军方研制的ARPNET网，主要是科研机构为实现资源共享。到了80年代诞生出统一的标准-OSI参考模型。也就是常说的七层模型。教科书都是以七层模型来讲，但是事实上的标准是TCP/IP四层模型。七层模型从高往低依次是：<strong>应、表、会、传、网、数、物</strong>（记第一个字，刚好是一句七言绝句诗，方便记忆）。四层模型从高往低依次：<strong>应、传、互、主</strong>。<br><img src="https://dhsmp.nos-eastchina1.126.net/40277440.jpg" alt=""><br>每一层中所包含的协议：（两张图都是网上找的，跟教科书上也是一样的，隔个三五天翻看一下，一回生二回熟，慢慢就记住了）<br><img src="https://dhsmp.nos-eastchina1.126.net/83019517.jpg" alt=""><br>发送端在将数据进行发送时，需要经过一系列的封装。<br><img src="https://dhsmp.nos-eastchina1.126.net/28381599.jpg" alt=""><br>接收端在接收数据的时候，再进行相应的解封。<br><img src="https://dhsmp.nos-eastchina1.126.net/37102701.jpg" alt=""><br><img src="https://dhsmp.nos-eastchina1.126.net/65343908.jpg" alt=""></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>总结的方式也按教科书章节的划分，从底层往上层温习。<strong>物理层主要是实现比特流的透明传输，为数据链路层提供数据传输服务，直接面向实际承担数据传输的物理介质。其实就是最原始的二进制位数据的传输。</strong><br>传输介质主要是有线、无线两大类。有线传输介质中有双绞线、同轴电缆、光钎。双绞线跟同轴电缆不可避免的就需要把二进制数据，转换成电频进行传输。专业术语叫调制解调器，俗称猫（MODEL）。在接收方中，再把电信号还原成二进制数据。而光纤传输的是光信号，需要发送端将其转成光信号，接收端再还原成电信号。<br>数据在传输过程中无可避免的就会出现传输速率，信道容量，误码率，通信方式的问题。就类似现实社会中，公司有一堆的货物要运到某个地方，货物就是数据，运输的路径其实就是传输过程，是走汽车运输还是火车运输，货物所运达的时间，传输的速率是不同的。在传输过程中可能会出现少了某一个物品。货物很多，是一次一次的运输，还是一次找10个承运人来运输…等等这些问题。这里不得不提一位伟人-香农。香农提出了信息熵的概念，为信息论和数字通信奠定了基础。<br>物理层的主要任务确定传输媒体接口的一些特性。主要是机械特性、电气特性、功能特性、规程特性。</p><ul><li>机械特性：例如网卡接口的数目、形状、大小等。</li><li>电气特性：电压的范围-5V到+5V。</li><li>功能特性：用电压的取值范围来表示比特数据。-5V到0V表示0，+5V到0V表示1.</li><li>规程特性：规定建立连接时各个相关部件的工作步骤。<br><img src="https://dhsmp.nos-eastchina1.126.net/25960527.jpg" alt=""><br><img src="https://dhsmp.nos-eastchina1.126.net/68226925.jpg" alt=""><br>信号的编码方式<br><img src="https://dhsmp.nos-eastchina1.126.net/14023142.jpg" alt=""><br><strong>曼彻斯特编码：bit中间有信号跳变，从低到高的跳变表示0，从高到低的跳变表示1。</strong><br><img src="https://dhsmp.nos-eastchina1.126.net/80606994.jpg" alt=""><br><strong>差分曼彻斯特编码：bit中间有信号跳变，bit与bit之间也有信号跳变表示下一bit为0。bit与bit之间无信号跳变，表示下一bit为1。</strong><br><img src="https://dhsmp.nos-eastchina1.126.net/88120148.jpg" alt=""><br><img src="https://dhsmp.nos-eastchina1.126.net/42908405.jpg" alt=""><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2>数据链路层主要是对物理层传输原始bit流功能的加强，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。数据链路层的传送单位称为帧。<br><img src="https://dhsmp.nos-eastchina1.126.net/743647.jpg" alt=""><br>数据链路层主要是要解决三个问题：</li><li>封装成帧：就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限。首部和尾部的一个重要作用就是进行帧定界。<br><img src="https://dhsmp.nos-eastchina1.126.net/48033311.jpg" alt=""></li><li>透明传输：是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息。<br><img src="https://dhsmp.nos-eastchina1.126.net/96367096.jpg" alt=""></li><li>差错控制：传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。在数据链路层传送的帧中，广泛使用了循环冗余检验CRC的检错技术。<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括路由选择、拥塞控制、网际互连等。<br><img src="https://dhsmp.nos-eastchina1.126.net/21516818.jpg" alt=""><br><img src="https://dhsmp.nos-eastchina1.126.net/78452877.jpg" alt=""></li><li>RIP协议：路由信息协议，简单的距离向量路由协议。每个RIP路由器都保存了一张路由表，每一项对应着一个目的地。其中每项包括了目的地的IP地址、到目的地的路径距离的度量1、到目的地的路径的下一个路由表的IP地址、路由改变标志以及和这条路由有关的一些计时器。其采用的距离度量是一种非常简单的到目的地距离的测量方式：站点计数度量，也就是该路由要经过的路由器个数。</li><li>OSPF协议：链路状态路由协议，每个路由器通过维护它自己的本地链路状态信息，即路由器到子网的链路状态和可以到达的邻居路由器，通过扩散的方法把更新了的本地链路状态信息广播给自治系统中的每个路由器。这样每个路由器都知道自治系统内部的拓扑结构和链路状态信息。路由器根据这个链路状态库计算出到每个目的地的最短路径。所有路由器都采用相同的算法来计算最短路由，而且这个计算是在路由器本地进行的。动态的路由算法，能够自动而快速地适应拓扑结构的变化。</li><li>IP协议：互连网协议，将多个网络连成一个互连网，把高层的数据以多个数据报的形式通过互连网分发出去。<br><img src="https://dhsmp.nos-eastchina1.126.net/7500754.jpg" alt=""></li><li>ARP协议：地址转换协议。在TCP/IP网络环境下，每个主机都分配了一个32位的IP地址，这种互联网地址是在网际范围标识主机的一种逻辑地址。为了让报文在物理网上传送，必须知道彼此的物理地址。以以太网环境为例，为了正确地向目的站传送报文，必须把目的站32位IP地址转换成48位以太网目的地址，此时所需要的协议就是ARP协议。<br><img src="https://dhsmp.nos-eastchina1.126.net/89098859.jpg" alt=""></li><li>RARP协议：反向地址转换协议，使用与一种特殊的情况，如果站点初始化以后，只有自己的物理网络地址而没有IP地址，则可以通过RARP协议发出广播请求，征求自己的IP地址。而RARP服务器负责回答。无IP地址的站点可以通过RARP协议取得自己的IP地址。</li><li>ICMP协议：互联网控制报文协议。</li><li>IGMP协议：因特网组管理协议。<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><img src="https://dhsmp.nos-eastchina1.126.net/95311087.jpg" alt=""></li><li>TCP协议：需要将传输的数据进行分段传输，建立会话，可靠传输，流量控制。<br><img src="https://dhsmp.nos-eastchina1.126.net/71000992.jpg" alt=""><br>传输层协议和应用层协议之间的关系：端口号加使用的传输层协议，用以标识应用程序。<br><img src="https://dhsmp.nos-eastchina1.126.net/50225753.jpg" alt=""><br>可靠传输原理：ARQ自动请求重传，采用确认和重传机制。<br><img src="https://dhsmp.nos-eastchina1.126.net/61114084.jpg" alt=""><br><img src="https://dhsmp.nos-eastchina1.126.net/9071104.jpg" alt=""><br>TCP报文格式：<br><img src="https://dhsmp.nos-eastchina1.126.net/57953401.jpg" alt=""><br>TCP建立连接三次握手的过程：<br><img src="https://dhsmp.nos-eastchina1.126.net/77880357.jpg" alt=""><br>TCP释放连接四次挥手的过程：<br><img src="https://dhsmp.nos-eastchina1.126.net/45858470.jpg" alt=""></li><li>UDP协议：一个数据包就能够完成数据通信，不分段，不需要建立会话，不需要流量控制，不可靠传输。<br><img src="https://dhsmp.nos-eastchina1.126.net/97210689.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前沿&quot;&gt;&lt;a href=&quot;#前沿&quot; class=&quot;headerlink&quot; title=&quot;前沿&quot;&gt;&lt;/a&gt;前沿&lt;/h2&gt;&lt;p&gt;从去年9月开始，看教材《计算机网络原理》到4月考试通过，前前后后花了大半年时间。必须得承认，我不是神童，也不是学霸，不是那种一学就会的体质。
      
    
    </summary>
    
      <category term="计算机理论" scheme="http://dhsmp.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂、策略、观察者设计模式</title>
    <link href="http://dhsmp.com/2018/07/29/factory-design/"/>
    <id>http://dhsmp.com/2018/07/29/factory-design/</id>
    <published>2018-07-29T14:16:08.000Z</published>
    <updated>2018-10-28T00:48:15.205Z</updated>
    
    <content type="html"><![CDATA[<p>这里贴一下以前对工厂、策略、观察者设计模式的代码实现。</p><h2 id="简单工厂设计模式"><a href="#简单工厂设计模式" class="headerlink" title="简单工厂设计模式"></a>简单工厂设计模式</h2><p>简单工厂设计模式，并不属于标准的23种设计模式之一。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//此工厂返回service的代理</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFactory</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ServiceFactory instance = <span class="keyword">new</span> ServiceFactory();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">ServiceFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServiceFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//返回具体服务的代理对象</span></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">createService</span><span class="params">(String className, Class&lt;T&gt; clazz, <span class="keyword">final</span> User user)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == className || <span class="string">""</span>.equals(className.trim()) || <span class="keyword">null</span> == clazz) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">final</span> T t = (T) Class.forName(className).newInstance();</div><div class="line"><span class="keyword">return</span> (T) Proxy.newProxyInstance(ServiceFactory.class</div><div class="line">.getClassLoader(), t.getClass().getInterfaces(),</div><div class="line"><span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,</span></span></div><div class="line">Object[] args) <span class="keyword">throws</span> Throwable &#123;</div><div class="line"><span class="comment">// 1.判断用户调用的是什么方法</span></div><div class="line">String methodName = method.getName();</div><div class="line"><span class="comment">// 2.反射出真实对象上相对应的方法</span></div><div class="line">Method m = t.getClass().getMethod(methodName,</div><div class="line">method.getParameterTypes());</div><div class="line"><span class="comment">// 3.看真实对象上相对应的方法是否有权限注解</span></div><div class="line">Permission p = m.getAnnotation(Permission.class);</div><div class="line"><span class="comment">// 4.如果没有,代表访问该方法不需要权限,直接放行</span></div><div class="line"><span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">return</span> method.invoke(t, args);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 5.如果有,得到该方法需要什么权限,</span></div><div class="line">String value = p.value();</div><div class="line">Privilege privilege = <span class="keyword">new</span> Privilege();</div><div class="line">privilege.setName(value);</div><div class="line"><span class="comment">// 6.得到用户的权限</span></div><div class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> PrivilegeException(<span class="string">"对不起,请先登录!"</span>);</div><div class="line">&#125;</div><div class="line">BusinessService service = (BusinessService) t;</div><div class="line">List&lt;Privilege&gt; list = service</div><div class="line">.getUserPrivilege(user.getId());</div><div class="line"><span class="comment">// 7.检查用户是否有权限,如果有权限,放行</span></div><div class="line"><span class="keyword">if</span> (list.contains(privilege)) &#123;</div><div class="line"><span class="keyword">return</span> method.invoke(t, args);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 8.如果没有权限,则抛编译时异常,提示web层给用户一个友好提示</span></div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> PrivilegeException(</div><div class="line"><span class="string">"对不起,您没有相对应的访问权限,请联系管理员!"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ServiceFactory提供一个创建服务方法。<strong>createService()，主要是运用反射产生具体的服务代理对象。代理对象在这里执行方法时，加了一段业务逻辑处理。其实这段代码采用了面向切面的思想（AOP思想），其主要目的实现解耦。获取执行方法上的注解。</strong><br><strong>spring中加在类上的@Service、@Controller、@Component、以及可以加在类上和方法上的@Transactional注解，原理都是类似的。</strong></p><h3 id="采用饿汉式的简单工厂模式"><a href="#采用饿汉式的简单工厂模式" class="headerlink" title="采用饿汉式的简单工厂模式"></a>采用饿汉式的简单工厂模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package cn.utils;</div><div class="line"></div><div class="line">//泛型工厂</div><div class="line">public class DaoFactory &#123;</div><div class="line"></div><div class="line">private DaoFactory()&#123;&#125;</div><div class="line">private static final DaoFactory instance = new DaoFactory();</div><div class="line"></div><div class="line">public static DaoFactory getInstance()&#123;</div><div class="line">return instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public &lt;T&gt; T createDao(String className,Class&lt;T&gt; clazz)&#123;</div><div class="line">try &#123;</div><div class="line">return (T) Class.forName(className).newInstance();</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">throw new RuntimeException(e);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://dhsmp.nos-eastchina1.126.net/49119105.jpg" alt=""></p><h2 id="观察者设计模式"><a href="#观察者设计模式" class="headerlink" title="观察者设计模式"></a>观察者设计模式</h2><p>在说观察者设计模式之前，需要提一个东西。<br>事件监听：Event事件对象封装了事件源及动作。</p><h3 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h3><ul><li>事件监听涉及三个组件：事件源，事件对象，事件监听。</li><li>当事件源上发生某一个动作时，它会调用事件监听器的一个方法，并在调用该方法时，把事件对象传递进去。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//观察者设计模式</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverDemo</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Person p = <span class="keyword">new</span> Person();</div><div class="line">System.out.println(<span class="string">"Person对象："</span> + p);</div><div class="line"></div><div class="line"><span class="comment">//注册一个监听器</span></div><div class="line">p.registerListen(<span class="keyword">new</span> PersonListen() &#123;</div><div class="line"></div><div class="line"><span class="comment">//执行具体事件处理动作</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doeat</span><span class="params">(Event e)</span> </span>&#123;</div><div class="line">Person person = e.getSource();</div><div class="line">System.out.println(<span class="string">"监听到事件源："</span> + person + <span class="string">"，调用eat()方法"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dorun</span><span class="params">(Event e)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"监听到事件源：调用eat()方法"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">p.eat();</div><div class="line">p.run();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"><span class="comment">//事件监听器</span></div><div class="line"><span class="keyword">private</span> PersonListen personListen;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"Person eat()"</span>);</div><div class="line"><span class="keyword">if</span> (personListen != <span class="keyword">null</span>) &#123;</div><div class="line">System.out.println(<span class="string">"触发：personListen doeat()"</span>);</div><div class="line">personListen.doeat(<span class="keyword">new</span> Event(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"Person run()"</span>);</div><div class="line"><span class="keyword">if</span> (personListen != <span class="keyword">null</span>) &#123;</div><div class="line">System.out.println(<span class="string">"触发：personListen dorun()"</span>);</div><div class="line">personListen.dorun(<span class="keyword">new</span> Event(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListen</span><span class="params">(PersonListen personListen)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.personListen = personListen;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//事件监听接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonListen</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doeat</span><span class="params">(Event e)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dorun</span><span class="params">(Event e)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//事件对象</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Person source;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(Person source)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.source = source;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">getSource</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> source;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(Person source)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.source = source;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://dhsmp.nos-eastchina1.126.net/87002138.jpg" alt=""><br>Java中常用的各种监听都是观察者设计模式。</p><h2 id="策略设计模式"><a href="#策略设计模式" class="headerlink" title="策略设计模式"></a>策略设计模式</h2><p>功能并不清楚对结果的处理方式，对结果的处理由调用者进行传入。而只是把对结果的处理方式做成接口，通过接口来约定双方的行为。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过接口约定双方的行为</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultSetHandler</span> </span>&#123;</div><div class="line"><span class="function">Object <span class="title">handler</span><span class="params">(ResultSet rs)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//处理对单一对象的封装</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanHandler</span> <span class="keyword">implements</span> <span class="title">ResultSetHandler</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Class clazz;</div><div class="line"><span class="comment">//用户把Bean传进来</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BeanHandler</span><span class="params">(Class clazz)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.clazz = clazz;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">handler</span><span class="params">(ResultSet rs)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line"><span class="keyword">if</span>(!rs.next())&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">Object bean = clazz.newInstance();</div><div class="line"><span class="comment">//获取结果集的元信息</span></div><div class="line">ResultSetMetaData metadata = rs.getMetaData();</div><div class="line"><span class="comment">//得到结果集中有几列数据</span></div><div class="line"><span class="keyword">int</span> ColumnCount = metadata.getColumnCount();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ColumnCount;i++)&#123;</div><div class="line"><span class="comment">//得到每列的列名</span></div><div class="line">String ColumnName = metadata.getColumnName(i+<span class="number">1</span>);</div><div class="line"><span class="comment">//通过列名获取每一列的数据</span></div><div class="line">Object ColumnData = rs.getObject(i+<span class="number">1</span>);</div><div class="line"><span class="comment">//反射出类中与列名对应的属性</span></div><div class="line">Field f = clazz.getDeclaredField(ColumnName);</div><div class="line">f.setAccessible(<span class="keyword">true</span>);</div><div class="line">f.set(bean, ColumnData);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> bean;</div><div class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//处理对List的封装</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanListHandler</span> <span class="keyword">implements</span> <span class="title">ResultSetHandler</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Class clazz;</div><div class="line"><span class="comment">//用户把Bean传进来</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BeanListHandler</span><span class="params">(Class clazz)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.clazz = clazz;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">handler</span><span class="params">(ResultSet rs)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">List list = <span class="keyword">new</span> ArrayList();</div><div class="line"><span class="keyword">while</span>(rs.next())&#123;</div><div class="line">Object bean = clazz.newInstance();</div><div class="line">ResultSetMetaData metadata = rs.getMetaData();</div><div class="line"><span class="keyword">int</span> count = metadata.getColumnCount();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</div><div class="line">String name = metadata.getColumnName(i+<span class="number">1</span>);</div><div class="line">Object value = rs.getObject(name);</div><div class="line">Field f = bean.getClass().getDeclaredField(name);</div><div class="line">f.setAccessible(<span class="keyword">true</span>);</div><div class="line">f.set(bean, value);</div><div class="line">&#125;</div><div class="line">list.add(bean);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> list.size() &gt; <span class="number">0</span> ? list:<span class="keyword">null</span>;</div><div class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>封装对方法的具体细节<br><img src="https://dhsmp.nos-eastchina1.126.net/38632718.jpg" alt=""><br>处理对查询单一的对象，把具体的处理方式BeanHandler传入。<br><img src="https://dhsmp.nos-eastchina1.126.net/56480395.jpg" alt=""><br>处理对查询一群的对象，把具体的处理方式BeanListHandler传入。<br><img src="https://dhsmp.nos-eastchina1.126.net/39199368.jpg" alt=""><br><strong>上面这段代码是采用JDBC，运用元数据，实现一个简单的OR-Mapping映射类型的DB框架。</strong></p><h3 id="Java中的运用"><a href="#Java中的运用" class="headerlink" title="Java中的运用"></a>Java中的运用</h3><ul><li>之前有说过TreeSet集合，可以对元素进行排序。但是它本身并不知道，元素该怎么排，而是由调用者，通过实现Comparator接口，把对元素进行排序方式进行传入，TreeSet按照给定的方式进行处理。<br><img src="https://dhsmp.nos-eastchina1.126.net/37338187.jpg" alt=""></li><li>mybatis中对于查询的处理，在一级缓存与二级缓存中也是使用策略模式，通过实现ResultHandler接口对查询结果进行处理。<br><img src="https://dhsmp.nos-eastchina1.126.net/16442258.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里贴一下以前对工厂、策略、观察者设计模式的代码实现。&lt;/p&gt;
&lt;h2 id=&quot;简单工厂设计模式&quot;&gt;&lt;a href=&quot;#简单工厂设计模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂设计模式&quot;&gt;&lt;/a&gt;简单工厂设计模式&lt;/h2&gt;&lt;p&gt;简单工厂设计模式，并不
      
    
    </summary>
    
      <category term="设计模式" scheme="http://dhsmp.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL的性能优化</title>
    <link href="http://dhsmp.com/2018/07/28/mysql-optimize/"/>
    <id>http://dhsmp.com/2018/07/28/mysql-optimize/</id>
    <published>2018-07-28T14:16:08.000Z</published>
    <updated>2018-10-28T00:50:29.859Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL的性能优化包括查询速度优化，更新速度优化，MySQL服务器优化等。<strong>如果是SQL查询很慢，可以开启MySQL的慢查询日志。通过慢查询日志，可以找出执行时间较长、执行效率较低的语句，然后进行优化。</strong></p><h2 id="EXPLAIN分析"><a href="#EXPLAIN分析" class="headerlink" title="EXPLAIN分析"></a>EXPLAIN分析</h2><p>通过EXPLAIN语句对查询语句进行分析，找出查询语句的执行瓶颈。上一章稍微介绍过EXPLAIN语句，这里再详细阐述一下。<br>基本语法：EXPLAIN SELECT select_options<br><img src="https://dhsmp.nos-eastchina1.126.net/20635237.jpg" alt=""></p><ul><li>id：SELECT识别符。SELECT的查询序列号。</li><li>select_type：SELECT语句的类型。取值说明如下：<pre><code>SIMPLE表示简单查询，不包括连接查询和子查询。PRIMARY表示主查询，或者是最外层的查询语句。UNION表示连接查询的第二个或后面的查询语句。DEPENDENT UNION表示连接查询中的第二个或后面的SELECT语句，取决于外面的查询。UNION RESULT表示连接查询的结果。SUBQUERY表示子查询中的第一个SELECT语句。DERIVED表示导出表的SELECT中的子查询。</code></pre></li><li>table：表示查询的表</li><li>type：表示表的连接类型。取值说明如下：（从最佳类型到最差类型排序）<pre><code>system，该表示仅有一行的系统表。const：数据表最多只有一个匹配行，它将在查询开始时被读取。查询速度很快，因为只读取一次。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">示例SQL：</div><div class="line">SELECT * FROM tb_name WHERE primary_key=?;</div><div class="line">SELECT * FROM tb_name WHERE primary_key_part1=? AND primary_key_part2=?;</div></pre></td></tr></table></figure></li></ul><p>eq_ref：对于每个来自前面的表的行组合，从该表中读取一行。可以用于使用”=”操作符比较带索引的列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">示例SQL：</div><div class="line">SELECT * FROM ref_tb,other_tb WHERE ref_tb.key_column=other_tb.column;</div><div class="line">SELECT * FROM ref_tb,other_tb WHERE ref_tb.key_column_part1=other_tb.column AND ref_tb.key_column_part2=?;</div></pre></td></tr></table></figure></p><p>ref：对于来自前面的表的任意行组合，将从该表中读取所有匹配的行。可以用于使用”=”或”&lt;=&gt;”操作符带索引的列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">示例SQL：</div><div class="line">SELECT * FROM ref_tb WHERE key_column=expr;</div><div class="line">SELECT * FROM ref_tb,other_tb WHERE ref_tb.key_column=other_tb.column;</div><div class="line">SELECT * FROM ref_tb,other_tb WHERE ref_tb.key_column_part1=other_tb.column AND ref_tb.key_column_part2=?;</div></pre></td></tr></table></figure></p><p>ref_or_null：如同ref，专门搜索包含NULL值的行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">示例SQL：</div><div class="line">SELECT * FROM ref_tb WHERE key_column=expr OR key_column IS NULL;</div></pre></td></tr></table></figure></p><p>index_merge：使用了索引合并优化方法。key列中包含了使用的索引清单。<br>unique_subquery：索引查找函数，可以完全替换子查询。可以下面形式的IN子查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">value IN(SELECT primary_key FROM tb WHERE some_expr)</div></pre></td></tr></table></figure></p><p>index_subquery：可以替换IN子查询，只适合下列形式的子查询中的非唯一索引。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">value IN(SELECT key_column FROM tb WHERE some_expr)</div></pre></td></tr></table></figure></p><p>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引。当使用”=”，”&lt;&gt;”，”&gt;”，”&gt;=”，”&lt;”，”&lt;=”，”IS NULL”，”&lt;=&gt;”，”BETWEEN”，”IN”操作符，用常量比较关键字列时，类型为range。<br><strong>index：只扫描索引树。<br>ALL：对于前面的表的任意行组合，进行完整的全表扫描。</strong></p><ul><li>possible_keys：能使用哪个索引在该表中找到行。NULL则没有相关的索引。</li><li>key：实际查询时使用到的索引。NULL则没有选择所有。</li><li>key_len：索引自动按字节计算的长度。数值越小，表示越快。</li><li>ref：使用哪个列或常数与索引一起来查询记录。</li><li>rows：在表中进行查询时必须检查的行数。</li><li>Extra：处理查询时的详细信息。</li></ul><h2 id="设计合理的索引"><a href="#设计合理的索引" class="headerlink" title="设计合理的索引"></a>设计合理的索引</h2><p>如下图，没有在f_name字段上增加索引。可以分析执行了全表。<br><img src="https://dhsmp.nos-eastchina1.126.net/86876313.jpg" alt=""><br>查询在f_name字段上增加索引的选择性。选择性越高的索引价值越大。<br><img src="https://dhsmp.nos-eastchina1.126.net/5376216.jpg" alt=""><br>建立索引再来分析。<br><img src="https://dhsmp.nos-eastchina1.126.net/27796159.jpg" alt=""></p><h2 id="索引未起作用的特殊情况"><a href="#索引未起作用的特殊情况" class="headerlink" title="索引未起作用的特殊情况"></a>索引未起作用的特殊情况</h2><ul><li><strong>在使用LIKE关键字的查询语句中，如果匹配字符串的第一个字符为”%”，索引将不会起作用。只有”%”不在第一个位置，索引才会起作用。</strong></li><li><strong>使用多列索引，也就是组合索引。遵循最左前缀集合。比如在f_id、f_name、f_price三个字段创建组合索引。那么在查询条件包含f_id、f_name、f_price或f_id、f_name或f_id时会使用到索引。而f_name、f_price条件则索引将不会起作用。</strong></li><li><strong>查询语句的查询条件中只有OR关键字，且OR前后的两个条件中的列都是索引时，查询才会使用到索引。</strong></li></ul><h2 id="子查询说明"><a href="#子查询说明" class="headerlink" title="子查询说明"></a>子查询说明</h2><p>子查询虽然可以使查询语句很灵活，但执行效率不高。<strong>这是因为MySQL在执行子查询时，会为内层查询语句的查询结果建立一张临时表。</strong>然后外层查询语句从临时表中查询记录。查询完毕后，再撤销这些临时表。建议使用连接查询来替代子查询。连接查询不需要建立临时表。<br><strong>SELECT语句中避免使用*号通配符。数据库在解析的过程中，会将*号依次转换成所有的列名，这个工作是通过查询数据字典完成的。意味着耗费更多的时间。</strong></p><h2 id="数据库的结构优化"><a href="#数据库的结构优化" class="headerlink" title="数据库的结构优化"></a>数据库的结构优化</h2><p>对于字段较多的表，如果有些字段的使用频率很低，可以将这些字段分离出来形成新的表。</p><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ul><li>范式是为解决数据的存储与优化。保存数据的存储后，凡是能够通过关系寻找出来的数据，坚决不再重复存储，终极目标是为了减少数据的冗余。范式是一种分层结构的规范，分为六层。每一层都比上一层更加严格，若要满足下一层范式，前提是满足上一层范式。</li><li>六层范式：1NF、2NF、3NF、4NF、5NF、6NF</li><li>MySQL属于关系型数据库，有空间上的浪费，其本身也是致力于节省存储空间，与范式所解决的问题不谋而合，在设计数据库的时候，会利用范式来指导设计，但不是强制规范。但是数据库不单是要解决空间问题，还要保证效率问题。范式只为解决空间问题，所以数据库的设计又不能完全按照范式的要求实现。一般情况下，满足3NF即可。</li><li>1NF：在设计表存储数据的时候，如果表中设计的字段存储的数据，在取出来使用之前，还需要额外的处理或拆分，那么该表的设计不满足第一范式。第一范式要求字段的数据具有原子性，不可再分。</li><li>2NF：在数据表设计的过程中，如果有复合主键（多字段主键），且表中有字段并不是由整个主键来确定，而是依赖主键中的某个字段（主键的部分）。即存在字段依赖主键的部分，称之为部分依赖。第二范式就是要解决表的设计不允许出现部分依赖。</li><li>3NF：理论上讲，应该一张表中的所有字段都直接依赖主键（逻辑主键：代表的是业务主键）。如果表设计中存在一个字段，并不直接依赖主键，而是通过某个非主键字段依赖，最终实现依赖主键。把这种不是直接依赖主键，而是依赖非主键字段的依赖关系称之为传递依赖。第三范式就是要解决传递依赖的问题。</li><li>逆规范化：在设计表的时候，如果一张表中有几个字段是需要从另外的表中去获取信息，理论上讲，的确可以获取到想要的数据，但是效率低一点。这时，会刻意的在某些表中，不去保存另外表的主键（逻辑主键），而是直接保存想要的数据信息。这样一来，在查询数据时，一张表可以直接提供数据，而不需要多表查询（效率低），但是会导致数据冗余增加。同时还需保证数据的一致性。</li></ul><h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><p>MySQL数据库配置优化这里就不说了。工作重点不在这一块，纯属了解了一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL的性能优化包括查询速度优化，更新速度优化，MySQL服务器优化等。&lt;strong&gt;如果是SQL查询很慢，可以开启MySQL的慢查询日志。通过慢查询日志，可以找出执行时间较长、执行效率较低的语句，然后进行优化。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;EXPLAI
      
    
    </summary>
    
      <category term="MySQL" scheme="http://dhsmp.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>使用动态代理实现一个简单的数据库连接池</title>
    <link href="http://dhsmp.com/2018/07/25/jdbc-pool/"/>
    <id>http://dhsmp.com/2018/07/25/jdbc-pool/</id>
    <published>2018-07-25T14:16:08.000Z</published>
    <updated>2018-10-28T00:49:32.187Z</updated>
    
    <content type="html"><![CDATA[<p>明确一点：数据库连接是一个重量级的对象，每一个连接的建立是一个复杂且很消耗资源的事情。为了复用已经创建好的连接，出现了池技术。连接池、线程池、对象池等等。这里采用动态代理实现一个简单的数据库连接池。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> java.util.logging.Logger;</div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcPool</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//使用LinkedList集合,会使用到大量的增删改查</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> LinkedList&lt;Connection&gt; list = <span class="keyword">new</span> LinkedList&lt;Connection&gt;();</div><div class="line"></div><div class="line"><span class="keyword">static</span>&#123;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line"><span class="comment">//读取数据库连接的必要配置</span></div><div class="line">InputStream in = JdbcPool.class.getClassLoader().getResourceAsStream(<span class="string">"db.properties"</span>);</div><div class="line">Properties prop = <span class="keyword">new</span> Properties();</div><div class="line">prop.load(in);</div><div class="line">String driver= prop.getProperty(<span class="string">"driver"</span>);</div><div class="line">String url = prop.getProperty(<span class="string">"url"</span>);</div><div class="line">String username = prop.getProperty(<span class="string">"username"</span>);</div><div class="line">String password = prop.getProperty(<span class="string">"password"</span>);</div><div class="line"><span class="comment">//加载驱动</span></div><div class="line">Class.forName(driver);</div><div class="line"></div><div class="line"><span class="comment">//找数据要多少个链接,就循环多少次</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">Connection conn = DriverManager.getConnection(url, username, password);</div><div class="line"><span class="comment">//把链接存入集合中</span></div><div class="line">System.out.println(<span class="string">"获取到了链接:"</span>+conn);</div><div class="line">list.add(conn);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(e);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">1.写一个子类,覆盖close方法</div><div class="line">2.写一个Connection的包装类,增强close方法</div><div class="line">3.用动态代理,返回一个代理对象出去,拦截close方法的调用,对close方法进行增强</div><div class="line"></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//proxyConnection.commit()  proxyConnection.rollback</span></div><div class="line"><span class="keyword">if</span>(list.size()&gt;<span class="number">0</span>)&#123;</div><div class="line"><span class="keyword">final</span> Connection conn = list.removeFirst();   <span class="comment">//myconnection.commit</span></div><div class="line">System.out.println(<span class="string">"池大小是:"</span> + list.size());</div><div class="line"></div><div class="line"><span class="comment">//使用动态代理</span></div><div class="line"><span class="keyword">return</span> (Connection) Proxy.newProxyInstance(</div><div class="line">JdbcPool.class.getClassLoader(), </div><div class="line">conn.getClass().getInterfaces(), </div><div class="line"><span class="keyword">new</span> InvocationHandler()&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line"><span class="keyword">throws</span> Throwable &#123;</div><div class="line"><span class="keyword">if</span>(!method.getName().equals(<span class="string">"close"</span>))&#123;</div><div class="line"><span class="keyword">return</span> method.invoke(conn, args);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">list.add(conn);</div><div class="line">System.out.println(conn + <span class="string">"被还给池了！！"</span>);</div><div class="line">System.out.println(<span class="string">"池大小为"</span> + list.size());</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"对不起，数据库忙"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span><span class="params">(<span class="keyword">int</span> seconds)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">unwrap</span><span class="params">(Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWrapperFor</span><span class="params">(Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span></span></div><div class="line"><span class="keyword">throws</span> SQLException &#123;</div><div class="line"><span class="comment">// TODO Auto-generated method stub</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>DataSource接口是必须要实现的，上面那些未实现的方法这里不做说明，都是DataSource接口中需要实现的方法。<strong>JdbcPool在加载进内存时候，就已经找数据库获取了10个数据库连接。getConnection()获取数据库连接，返回的就是Connection的一个代理对象出去。最终要做的事情是，拦截对close()方法的处理，当发现调用的是close()方法时，并不去执行释放连接，而是把连接返回到了LinkedList集合里面去了。</strong><br><img src="https://dhsmp.nos-eastchina1.126.net/16826945.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;明确一点：数据库连接是一个重量级的对象，每一个连接的建立是一个复杂且很消耗资源的事情。为了复用已经创建好的连接，出现了池技术。连接池、线程池、对象池等等。这里采用动态代理实现一个简单的数据库连接池。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;
      
    
    </summary>
    
      <category term="SQL" scheme="http://dhsmp.com/categories/SQL/"/>
    
      <category term="Java" scheme="http://dhsmp.com/categories/SQL/Java/"/>
    
    
  </entry>
  
</feed>
