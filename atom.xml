<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamMaker-HS</title>
  
  <subtitle>勤思善问，可敌良师益友。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dhsmp.com/"/>
  <updated>2018-10-15T07:05:35.628Z</updated>
  <id>http://dhsmp.com/</id>
  
  <author>
    <name>HuaShan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年度总结</title>
    <link href="http://dhsmp.com/2018/10/15/annual-summary-2018/"/>
    <id>http://dhsmp.com/2018/10/15/annual-summary-2018/</id>
    <published>2018-10-15T07:04:17.000Z</published>
    <updated>2018-10-15T07:05:35.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018年目标"><a href="#2018年目标" class="headerlink" title="2018年目标"></a>2018年目标</h2><h3 id="1月目标"><a href="#1月目标" class="headerlink" title="1月目标"></a>1月目标</h3><ul><li>完成自考4月报考</li><li>阅读《大学之路》第一册</li><li>阅读《文明之光》第二册</li><li>阅读教材《数据结构》</li></ul><h3 id="1月进展"><a href="#1月进展" class="headerlink" title="1月进展"></a>1月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>完成自考4月报考</del></li><li><del>阅读《大学之路》第一册</del></li><li><del>阅读《文明之光》第二册</del></li><li><del>阅读教材《数据结构》</del></li></ul><h3 id="2月目标"><a href="#2月目标" class="headerlink" title="2月目标"></a>2月目标</h3><ul><li>刷题《数据结构》，提炼重点知识</li><li>阅读教材《网络工程》</li><li>阅读教材《计算机网络安全》</li><li>记忆理解《计算机网络原理》重点知识</li><li>阅读《大学之路》第二册</li><li>阅读《文明之光》第三册</li></ul><h3 id="2月进展"><a href="#2月进展" class="headerlink" title="2月进展"></a>2月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《数据结构》，提炼重点知识</del></li><li><del>阅读教材《网络工程》</del></li><li><del>阅读教材《计算机网络安全》</del></li><li><del>记忆理解《计算机网络原理》重点知识</del></li><li><del>阅读《大学之路》第二册</del></li><li><del>阅读《文明之光》第三册</del></li></ul><h3 id="3月目标"><a href="#3月目标" class="headerlink" title="3月目标"></a>3月目标</h3><ul><li>刷题《计算机网络安全》，提炼重点知识</li><li>刷题《网络工程》，提炼重点知识</li><li>记忆理解《计算机网络原理》重点知识</li><li>记忆理解《数据结构》重点知识</li><li>阅读《数学之美》</li><li>阅读《文明之光》第四册</li><li>阅读《见识》</li><li>阅读《智能时代》</li><li>泛读《大话数据结构》</li></ul><h3 id="3月进展"><a href="#3月进展" class="headerlink" title="3月进展"></a>3月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络安全》，提炼重点知识</del></li><li><del>刷题《网络工程》，提炼重点知识</del></li><li><del>记忆理解《计算机网络原理》重点知识</del></li><li><del>记忆理解《数据结构》重点知识</del></li><li><del>阅读《数学之美》</del></li><li><del>阅读《文明之光》第四册</del></li><li><del>阅读《见识》</del></li><li><del>阅读《智能时代》</del></li><li><del>泛读《大话数据结构》</del></li></ul><h3 id="4月目标"><a href="#4月目标" class="headerlink" title="4月目标"></a>4月目标</h3><ul><li>刷题《计算机网络安全》，提炼重点知识</li><li>记忆理解《计算机网络安全》重点知识</li><li>参加4月自学考试</li><li>再次阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</li></ul><h3 id="4月进展"><a href="#4月进展" class="headerlink" title="4月进展"></a>4月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络安全》，提炼重点知识</del></li><li><del>记忆理解《计算机网络安全》重点知识</del></li><li><del>参加4月自学考试</del></li><li><del>再次阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</del></li></ul><h3 id="5月目标"><a href="#5月目标" class="headerlink" title="5月目标"></a>5月目标</h3><ul><li>阅读《计算机组成原理》</li><li>阅读《智识分子：做个复杂的现代人》</li><li>阅读《高手：精英的见识和我们的时代》</li><li>阅读《如何有效阅读一本书》</li><li>阅读《学会学习：从认知自我到高效学习》</li><li>阅读《抗压力：逆境重生法则》</li></ul><h3 id="5月进展"><a href="#5月进展" class="headerlink" title="5月进展"></a>5月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读《计算机组成原理》</del></li><li><del>阅读《智识分子：做个复杂的现代人》</del></li><li><del>阅读《高手：精英的见识和我们的时代》</del></li><li><del>阅读《如何有效阅读一本书》</del></li><li><del>阅读《学会学习：从认知自我到高效学习》</del></li><li><del>阅读《抗压力：逆境重生法则》<br><img src="http://orxmumro7.bkt.clouddn.com/18-6-13/80165275.jpg" alt=""></del></li></ul><h3 id="6月目标"><a href="#6月目标" class="headerlink" title="6月目标"></a>6月目标</h3><ul><li>阅读教材《数据库系统原理》</li><li>阅读教材《互联网及其应用》</li></ul><h3 id="6月进展"><a href="#6月进展" class="headerlink" title="6月进展"></a>6月进展</h3><ul><li><del>阅读教材《数据库系统原理》</del></li><li><del>阅读教材《互联网及其应用》</del></li><li><del>完成一篇博客文章的输出</del></li><li><del>《新概念英语一》进展的很缓慢，到目前为止推进到第55课。</del></li></ul><h3 id="7月目标"><a href="#7月目标" class="headerlink" title="7月目标"></a>7月目标</h3><ul><li>阅读教材《网络操作系统》</li><li>提炼《数据库系统原理》重点知识</li><li>阅读《踏踏实实学英语》</li><li>阅读《记忆的窍门》</li><li>阅读《学习贵在开窍》</li><li>报考10月考试《网络操作系统》《数据库系统原理》《计算机网络管理》《互联网及其应用》</li></ul><h3 id="7月进展"><a href="#7月进展" class="headerlink" title="7月进展"></a>7月进展</h3><ul><li><del>阅读教材《网络操作系统》</del></li><li><del>提炼《数据库系统原理》重点知识</del></li><li><del>阅读《踏踏实实学英语》</del></li><li><del>阅读《记忆的窍门》</del></li><li><del>阅读《学习贵在开窍》</del></li></ul><h3 id="8月目标"><a href="#8月目标" class="headerlink" title="8月目标"></a>8月目标</h3><ul><li>提炼《网络操作系统》重点知识</li><li>刷题《数据库系统原理》</li><li>阅读教材《计算机网络管理》</li><li>阅读《硅谷钢铁侠》</li><li>阅读《天涯若比邻》</li><li>阅读《整理的艺术》</li><li>阅读《零秒思考》</li></ul><h3 id="8月进展"><a href="#8月进展" class="headerlink" title="8月进展"></a>8月进展</h3><ul><li><del>提炼《网络操作系统》重点知识</del></li><li><del>刷题《数据库系统原理》</del></li><li><del>阅读《硅谷钢铁侠》</del></li><li><del>阅读《天涯若比邻》</del></li><li><del>阅读《整理的艺术》</del></li><li><del>阅读《零秒思考》</del></li></ul><h3 id="9月目标"><a href="#9月目标" class="headerlink" title="9月目标"></a>9月目标</h3><ul><li>刷题《网络操作系统》，记忆理解重点知识点</li><li>刷题《数据库系统原理》，记忆理解重点知识点</li><li>阅读《雷军:世界需要我的突围》</li><li>阅读《麦肯锡教我的思考武器》</li><li>阅读《麦肯锡入职培训第一课》</li></ul><h3 id="9月进展"><a href="#9月进展" class="headerlink" title="9月进展"></a>9月进展</h3><ul><li><del>刷题《网络操作系统》，记忆理解重点知识点</del></li><li><del>刷题《数据库系统原理》，记忆理解重点知识点</del></li><li><del>阅读《雷军:世界需要我的突围》</del></li><li><del>阅读《麦肯锡教我的思考武器》</del></li><li><del>阅读《麦肯锡入职培训第一课》</del></li></ul><h3 id="10月目标"><a href="#10月目标" class="headerlink" title="10月目标"></a>10月目标</h3><ul><li>记忆理解《网络操作系统》重点知识点</li><li>记忆理解《数据库系统原理》重点知识点</li><li>记忆理解《互联网及其应用》重点知识点</li><li>阅读《人类简史》</li><li>参加10月自学考试</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018年目标&quot;&gt;&lt;a href=&quot;#2018年目标&quot; class=&quot;headerlink&quot; title=&quot;2018年目标&quot;&gt;&lt;/a&gt;2018年目标&lt;/h2&gt;&lt;h3 id=&quot;1月目标&quot;&gt;&lt;a href=&quot;#1月目标&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="随想" scheme="http://dhsmp.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>page</title>
    <link href="http://dhsmp.com/2018/09/25/%E5%88%A9%E5%99%A8/"/>
    <id>http://dhsmp.com/2018/09/25/利器/</id>
    <published>2018-09-25T05:05:11.000Z</published>
    <updated>2018-09-25T05:05:11.371Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构之树形结构</title>
    <link href="http://dhsmp.com/2018/08/26/data_struct_tree/"/>
    <id>http://dhsmp.com/2018/08/26/data_struct_tree/</id>
    <published>2018-08-26T01:36:51.000Z</published>
    <updated>2018-09-30T06:00:43.328Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://dhsmp.com/2018/02/26/data_struct/">《回顾数据结构的基础知识》</a></p><h2 id="非线性结构-树"><a href="#非线性结构-树" class="headerlink" title="非线性结构-树"></a>非线性结构-树</h2><p>树形结构属于非线性结构，树中结点之间具有明确的层次关系，并且结点之间有分支。例如权限、行政组织、家谱等。树形结构最大的特点是：<strong>它是一个递归结构。</strong>度、深度、层数、左孩子、右孩子、森林之类的名词，这里不就再解释了。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/77582195.jpg" alt=""></p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树不仅仅只是在树形结构中非常重要，在实际问题解决过程中，往往也是转换为二叉树的形式解决的。<strong>例如像Java中的HashMap，抽象出来的数据结构是红黑树。TreeMap，抽象出来的数据结构是二叉排序树。</strong>关于定义，这里就不多说了。<strong>其最大的特点就是每个结点最多只有两棵子树。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/25345859.jpg" alt=""><br>二叉树的存储方式，分为顺序存储结构跟链式存储结构。顺序存储结构比较浪费空间，基本都是采用链式存储。<br>顺序存储结构是把二叉树补充成一个完全二叉树，添加一些实际上不存在的虚节点，从根节点开始，一层一层从左往右依次存放到顺序表中。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/24588966.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/71655698.jpg" alt=""><br>二叉树的遍历主要有三种。先序遍历、中序遍历、后序遍历。<strong>所谓的先、中、后，都是相对于对应树或子树的根节点而言的。</strong><br><strong>先序遍历：其规律是根、左、右。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/4043005.jpg" alt=""><br><strong>中序遍历：其规律是左、根、右。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/54019026.jpg" alt=""><br><strong>后序遍历：其规律是左、右、根。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/99557798.jpg" alt=""></p><h4 id="C代码"><a href="#C代码" class="headerlink" title="C代码"></a>C代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;malloc.h&gt;</div><div class="line"></div><div class="line">typedef struct TreeNode&#123;</div><div class="line">//数据域</div><div class="line">char data;</div><div class="line">//左孩子</div><div class="line">struct TreeNode * pLeftChild;</div><div class="line">//右孩子</div><div class="line">struct TreeNode * pRightChild;</div><div class="line">&#125;TREENODE, *PTREENODE;</div><div class="line"></div><div class="line">//创建一个树</div><div class="line">PTREENODE createTree();</div><div class="line">//先序输出</div><div class="line">void printXianXu(PTREENODE);</div><div class="line">//中序输出</div><div class="line">void printZhongXu(PTREENODE);</div><div class="line">//后序输出</div><div class="line">void printHouXu(PTREENODE);</div><div class="line">//计算深度</div><div class="line">int binTreeDepth(PTREENODE);</div><div class="line">//得到所有的节点数</div><div class="line">int sumNodes(PTREENODE rootNode);</div><div class="line">//得到所有的叶子节点数</div><div class="line">int sumLeafNodes(PTREENODE rootNode);</div><div class="line">//copy一个树</div><div class="line">PTREENODE copyTree(PTREENODE);</div><div class="line">//使用#号创建法，创建一个树</div><div class="line">PTREENODE createTree1();</div><div class="line"></div><div class="line">void main()&#123;</div><div class="line">int depth, sum, sumLeaf;</div><div class="line">PTREENODE tree;</div><div class="line"></div><div class="line">PTREENODE rootNode = createTree();</div><div class="line">printXianXu(rootNode);</div><div class="line">//printZhongXu(rootNode);</div><div class="line">//printHouXu(rootNode);</div><div class="line"></div><div class="line">depth = binTreeDepth(rootNode);</div><div class="line">printf(&quot;树的深度为：%d\n&quot;, depth);</div><div class="line"></div><div class="line">sum = sumNodes(rootNode);</div><div class="line">printf(&quot;树的节点总数为：%d\n&quot;, sum);</div><div class="line"></div><div class="line">sumLeaf = sumLeafNodes(rootNode);</div><div class="line">printf(&quot;树的叶子节点总数为：%d\n&quot;, sumLeaf);</div><div class="line"></div><div class="line">tree = copyTree(rootNode);</div><div class="line">printXianXu(tree);</div><div class="line"></div><div class="line">tree = createTree1();</div><div class="line">printXianXu(tree);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建树</div><div class="line">PTREENODE createTree()&#123;</div><div class="line">PTREENODE pNodeA = (PTREENODE)malloc(sizeof(TREENODE));</div><div class="line">PTREENODE pNodeB = (PTREENODE)malloc(sizeof(TREENODE));</div><div class="line">PTREENODE pNodeC = (PTREENODE)malloc(sizeof(TREENODE));</div><div class="line">PTREENODE pNodeD = (PTREENODE)malloc(sizeof(TREENODE));</div><div class="line">PTREENODE pNodeE = (PTREENODE)malloc(sizeof(TREENODE));</div><div class="line"></div><div class="line">pNodeA-&gt;data = &apos;A&apos;;</div><div class="line">pNodeB-&gt;data = &apos;B&apos;;</div><div class="line">pNodeC-&gt;data = &apos;C&apos;;</div><div class="line">pNodeD-&gt;data = &apos;D&apos;;</div><div class="line">pNodeE-&gt;data = &apos;E&apos;;</div><div class="line"></div><div class="line">pNodeA-&gt;pLeftChild = pNodeB;</div><div class="line">pNodeA-&gt;pRightChild = pNodeC;</div><div class="line"></div><div class="line">pNodeB-&gt;pLeftChild = pNodeB-&gt;pRightChild = NULL;</div><div class="line"></div><div class="line">pNodeC-&gt;pLeftChild = pNodeD;</div><div class="line">pNodeC-&gt;pRightChild = NULL;</div><div class="line"></div><div class="line">pNodeD-&gt;pLeftChild = NULL;</div><div class="line">pNodeD-&gt;pRightChild = pNodeE;</div><div class="line"></div><div class="line">pNodeE-&gt;pLeftChild = pNodeE-&gt;pRightChild = NULL;</div><div class="line"></div><div class="line">return pNodeA;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//先序输出</div><div class="line">void printXianXu(PTREENODE rootNode)&#123;</div><div class="line">if(NULL != rootNode)&#123;</div><div class="line">//先序访问根节点</div><div class="line">printf(&quot;%c\n&quot;, rootNode-&gt;data);</div><div class="line">if(NULL != rootNode-&gt;pLeftChild)&#123;</div><div class="line">//再先序访问左子树</div><div class="line">printXianXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line">if(NULL != rootNode-&gt;pRightChild)&#123;</div><div class="line">//再先序访问右子树</div><div class="line">printXianXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//中序输出</div><div class="line">void printZhongXu(PTREENODE rootNode)&#123;</div><div class="line">if(NULL != rootNode)&#123;</div><div class="line">if(NULL != rootNode-&gt;pLeftChild)&#123;</div><div class="line">//中序访问左子树</div><div class="line">printZhongXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line">//再中序访问根节点</div><div class="line">printf(&quot;%c\n&quot;, rootNode-&gt;data);</div><div class="line">if(NULL != rootNode-&gt;pRightChild)&#123;</div><div class="line">//再中序访问右子树</div><div class="line">printZhongXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//后序输出</div><div class="line">void printHouXu(PTREENODE rootNode)&#123;</div><div class="line">if(NULL != rootNode)&#123;</div><div class="line">if(NULL != rootNode-&gt;pLeftChild)&#123;</div><div class="line">//后序访问左子树</div><div class="line">printHouXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line">if(NULL != rootNode-&gt;pRightChild)&#123;</div><div class="line">//再后序访问右子树</div><div class="line">printHouXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">//再后序访问根节点</div><div class="line">printf(&quot;%c\n&quot;, rootNode-&gt;data);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//深度</div><div class="line">int binTreeDepth(PTREENODE rootNode)&#123;</div><div class="line">int depL, depR;</div><div class="line">if(rootNode ==NULL)&#123;</div><div class="line">return 0;</div><div class="line">&#125;else&#123;</div><div class="line">//计算左子树的深度</div><div class="line">depL = binTreeDepth(rootNode-&gt;pLeftChild);</div><div class="line">//计算右子树的深度</div><div class="line">depR = binTreeDepth(rootNode-&gt;pRightChild);</div><div class="line">if(depL &gt; depR)&#123;</div><div class="line">return depL + 1;</div><div class="line">&#125;else&#123;</div><div class="line">return depR + 1;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//所有的节点</div><div class="line">int sumNodes(PTREENODE rootNode)&#123;</div><div class="line">int sumNodesL, sumNodesR;</div><div class="line">if(rootNode ==NULL)&#123;</div><div class="line">return 0;</div><div class="line">&#125;else&#123;</div><div class="line">sumNodesL = sumNodes(rootNode-&gt;pLeftChild);</div><div class="line">sumNodesR = sumNodes(rootNode-&gt;pRightChild);</div><div class="line">return sumNodesL + sumNodesR + 1;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//得到所有的叶子节点数</div><div class="line">int sumLeafNodes(PTREENODE rootNode)&#123;</div><div class="line">int sumNodesL, sumNodesR;</div><div class="line">if(rootNode ==NULL)&#123;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">if(rootNode-&gt;pLeftChild == NULL &amp;&amp; rootNode-&gt;pRightChild == NULL)&#123;</div><div class="line">return 1;</div><div class="line">&#125;else&#123;</div><div class="line">sumNodesL = sumLeafNodes(rootNode-&gt;pLeftChild);</div><div class="line">sumNodesR = sumLeafNodes(rootNode-&gt;pRightChild);</div><div class="line">return sumNodesL + sumNodesR;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//copy一个树</div><div class="line">PTREENODE copyTree(PTREENODE rootNode)&#123;</div><div class="line">PTREENODE newNode;</div><div class="line">PTREENODE leftNode;</div><div class="line">PTREENODE rightNode;</div><div class="line">if(rootNode == NULL)&#123;</div><div class="line">return NULL;</div><div class="line">&#125;</div><div class="line">//copy左子树</div><div class="line">if(rootNode-&gt;pLeftChild != NULL)&#123;</div><div class="line">leftNode = copyTree(rootNode-&gt;pLeftChild);</div><div class="line">&#125;else&#123;</div><div class="line">leftNode = NULL;</div><div class="line">&#125;</div><div class="line">//copy右子树</div><div class="line">if(rootNode-&gt;pRightChild != NULL)&#123;</div><div class="line">rightNode = copyTree(rootNode-&gt;pRightChild);</div><div class="line">&#125;else&#123;</div><div class="line">rightNode = NULL;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建一个新节点</div><div class="line">newNode = (PTREENODE)malloc(sizeof(TREENODE));</div><div class="line">newNode-&gt;pLeftChild = leftNode;</div><div class="line">newNode-&gt;pRightChild = rightNode;</div><div class="line">newNode-&gt;data = rootNode-&gt;data;</div><div class="line">return newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line">//二叉树的非递归遍历算法</div><div class="line">void inorder(PTREENODE rootNode)&#123;</div><div class="line">//辅助指针变量</div><div class="line">PTREENODE node;</div><div class="line">//初始化一个栈</div><div class="line">STACK stack;</div><div class="line">init(&amp;stack);</div><div class="line">//把根节点压栈</div><div class="line">push(&amp;stack, rootNode);</div><div class="line">//栈不为空，就一直循环。知道栈为空</div><div class="line">while(!isEmpty(&amp;stack))&#123;</div><div class="line">//栈顶的元素不给空，则一直循环</div><div class="line">while(getTop(&amp;stack)&#123;</div><div class="line">//把左子树一直压入栈中</div><div class="line">push(&amp;stack, getTop(&amp;stack)-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line">//执行到这里，说明栈顶是一个NULL元素。左子树为空的节点</div><div class="line">//把栈顶的空元素，出栈</div><div class="line">node = pop(&amp;stack);</div><div class="line">//栈不为空时，说明还没有结束</div><div class="line">if(!isEmpty(&amp;stack))&#123;</div><div class="line">//左子树没有，访问根节点。栈顶的那个元素则是根节点</div><div class="line">printf(&quot;%c\n&quot;, getTop(&amp;stack)-&gt;data);</div><div class="line">//访问完根节点，根节点则出栈</div><div class="line">node = pop(&amp;stack);</div><div class="line">//把右子树压入栈中。执行完这一句，则进行下一个循环了。</div><div class="line">push(&amp;stack, node-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line">//使用#号创建法，创建一个树</div><div class="line">PTREENODE createTree1()&#123;</div><div class="line">PTREENODE node = NULL;</div><div class="line">PTREENODE leftNode = NULL;</div><div class="line">PTREENODE rightNode = NULL;</div><div class="line">char ch;</div><div class="line">scanf(&quot;%c&quot;, &amp;ch);</div><div class="line">//#号，则不创建树节点</div><div class="line">if(ch == &apos;#&apos;)&#123;</div><div class="line">return NULL;</div><div class="line">&#125;else&#123;</div><div class="line">//创建一个节点</div><div class="line">node = (PTREENODE)malloc(sizeof(TREENODE));</div><div class="line">node-&gt;data = ch;</div><div class="line">node-&gt;pLeftChild = createTree1();</div><div class="line">node-&gt;pRightChild = createTree1();</div><div class="line">return node;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package datastructure.part.tree;</div><div class="line">/**</div><div class="line"> * @description </div><div class="line"> * @author Denghs</div><div class="line"> * @version 1.0,2018年6月30日 上午10:16:49</div><div class="line"> * @remark 树节点</div><div class="line"> */</div><div class="line">public class TreeNode&lt;T&gt; &#123;</div><div class="line"></div><div class="line">private TreeNode&lt;T&gt; leftNode;//左子树</div><div class="line">private TreeNode&lt;T&gt; rightNode;//右子树</div><div class="line">private T data;//数据部分</div><div class="line"></div><div class="line">public TreeNode&lt;T&gt; getLeftNode() &#123;</div><div class="line">return leftNode;</div><div class="line">&#125;</div><div class="line">public void setLeftNode(TreeNode&lt;T&gt; leftNode) &#123;</div><div class="line">this.leftNode = leftNode;</div><div class="line">&#125;</div><div class="line">public TreeNode&lt;T&gt; getRightNode() &#123;</div><div class="line">return rightNode;</div><div class="line">&#125;</div><div class="line">public void setRightNode(TreeNode&lt;T&gt; rightNode) &#123;</div><div class="line">this.rightNode = rightNode;</div><div class="line">&#125;</div><div class="line">public T getData() &#123;</div><div class="line">return data;</div><div class="line">&#125;</div><div class="line">public void setData(T data) &#123;</div><div class="line">this.data = data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line">package datastructure.part.tree;</div><div class="line">/**</div><div class="line"> * @description </div><div class="line"> * @author Denghs</div><div class="line"> * @version 1.0,2018年6月30日 上午10:22:57</div><div class="line"> * @remark </div><div class="line"> */</div><div class="line">public class TreeUtils &#123;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @param node</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static TreeNode&lt;String&gt; createTree() &#123;</div><div class="line">TreeNode&lt;String&gt; nodeA = new TreeNode&lt;String&gt;();</div><div class="line">TreeNode&lt;String&gt; nodeB = new TreeNode&lt;String&gt;();</div><div class="line">TreeNode&lt;String&gt; nodeC = new TreeNode&lt;String&gt;();</div><div class="line">TreeNode&lt;String&gt; nodeD = new TreeNode&lt;String&gt;();</div><div class="line">TreeNode&lt;String&gt; nodeE = new TreeNode&lt;String&gt;();</div><div class="line"></div><div class="line">nodeA.setData(&quot;A&quot;);</div><div class="line">nodeB.setData(&quot;B&quot;);</div><div class="line">nodeC.setData(&quot;C&quot;);</div><div class="line">nodeD.setData(&quot;D&quot;);</div><div class="line">nodeE.setData(&quot;E&quot;);</div><div class="line"></div><div class="line">nodeA.setLeftNode(nodeB);</div><div class="line">nodeB.setLeftNode(nodeC);</div><div class="line"></div><div class="line">nodeA.setRightNode(nodeD);</div><div class="line">nodeD.setLeftNode(nodeE);</div><div class="line"></div><div class="line">return nodeA;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 先序输出</div><div class="line"> * @param rootNode</div><div class="line"> */</div><div class="line">public static &lt;T&gt; void printXianXu(TreeNode&lt;T&gt; rootNode) &#123;</div><div class="line">if(null != rootNode)&#123;</div><div class="line">//先输出根节点</div><div class="line">System.out.println(rootNode.getData().toString());</div><div class="line">//访问左子树</div><div class="line">if(null != rootNode.getLeftNode())&#123;</div><div class="line">printXianXu(rootNode.getLeftNode());</div><div class="line">&#125;</div><div class="line">//访问右子树</div><div class="line">if(null != rootNode.getRightNode())&#123;</div><div class="line">printXianXu(rootNode.getRightNode());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> * 中序输出</div><div class="line"> * @param rootNode</div><div class="line"> */</div><div class="line">public static &lt;T&gt; void printZhongXu(TreeNode&lt;T&gt; rootNode) &#123;</div><div class="line">if(null != rootNode)&#123;</div><div class="line">//访问左子树</div><div class="line">if(null != rootNode.getLeftNode())&#123;</div><div class="line">printZhongXu(rootNode.getLeftNode());</div><div class="line">&#125;</div><div class="line">//输出根节点</div><div class="line">System.out.println(rootNode.getData().toString());</div><div class="line">//访问右子树</div><div class="line">if(null != rootNode.getRightNode())&#123;</div><div class="line">printZhongXu(rootNode.getRightNode());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> * 后序输出</div><div class="line"> * @param rootNode</div><div class="line"> */</div><div class="line">public static &lt;T&gt; void printHouXu(TreeNode&lt;T&gt; rootNode) &#123;</div><div class="line">if(null != rootNode)&#123;</div><div class="line">//访问左子树</div><div class="line">if(null != rootNode.getLeftNode())&#123;</div><div class="line">printHouXu(rootNode.getLeftNode());</div><div class="line">&#125;</div><div class="line">//访问右子树</div><div class="line">if(null != rootNode.getRightNode())&#123;</div><div class="line">printHouXu(rootNode.getRightNode());</div><div class="line">&#125;</div><div class="line">//输出根节点</div><div class="line">System.out.println(rootNode.getData().toString());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 树的高度</div><div class="line"> * @param rootNode</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static &lt;T&gt; int treeDepth(TreeNode&lt;T&gt; rootNode) &#123;</div><div class="line">if(null == rootNode)&#123;</div><div class="line">return 0;</div><div class="line">&#125; else &#123;</div><div class="line">//计算左子树的深度</div><div class="line">int depL = treeDepth(rootNode.getLeftNode());</div><div class="line">//计算右子树的深度</div><div class="line">int depR = treeDepth(rootNode.getRightNode());</div><div class="line">if(depL &gt; depR)&#123;</div><div class="line">return depL + 1;</div><div class="line">&#125;else&#123;</div><div class="line">return depR + 1;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 计算所有节点数</div><div class="line"> * @param rootNode</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static &lt;T&gt; int sumNodes(TreeNode&lt;T&gt; rootNode) &#123;</div><div class="line">if(null == rootNode)&#123;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">//计算左子树的节点</div><div class="line">int sumL = sumNodes(rootNode.getLeftNode());</div><div class="line">//计算右子树的节点</div><div class="line">int sumR = sumNodes(rootNode.getRightNode());</div><div class="line">return sumL + sumR + 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 计算所有的叶子节点</div><div class="line"> * @param rootNode</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static &lt;T&gt; int sumLeafNodes(TreeNode&lt;T&gt; rootNode) &#123;</div><div class="line">if(null == rootNode)&#123;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">//没有左子树和右子树的节点，就是叶子节点</div><div class="line">if(null == rootNode.getLeftNode() &amp;&amp; null == rootNode.getRightNode())&#123;</div><div class="line">return 1;</div><div class="line">&#125; else &#123;</div><div class="line">int sumNodesL = sumLeafNodes(rootNode.getLeftNode());</div><div class="line">int sumNodesR = sumLeafNodes(rootNode.getRightNode());</div><div class="line">return sumNodesL + sumNodesR;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 复制一棵树</div><div class="line"> * @param rootNode</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static &lt;T&gt; TreeNode&lt;T&gt; copyTree(TreeNode&lt;T&gt; rootNode) &#123;</div><div class="line">TreeNode&lt;T&gt; newNode = null;</div><div class="line">TreeNode&lt;T&gt; leftNode = null;</div><div class="line">TreeNode&lt;T&gt; rightNode = null;</div><div class="line"></div><div class="line">if(null == rootNode)&#123;</div><div class="line">return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//复制左子树</div><div class="line">if(null != rootNode.getLeftNode())&#123;</div><div class="line">leftNode = copyTree(rootNode.getLeftNode());</div><div class="line">&#125;</div><div class="line">//复制右子树</div><div class="line">if(null != rootNode.getRightNode())&#123;</div><div class="line">rightNode = copyTree(rootNode.getRightNode());</div><div class="line">&#125;</div><div class="line">newNode = new TreeNode&lt;T&gt;();</div><div class="line">newNode.setData(rootNode.getData());</div><div class="line">newNode.setLeftNode(leftNode);</div><div class="line">newNode.setRightNode(rightNode);</div><div class="line"></div><div class="line">return newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">TreeNode&lt;String&gt; treeNode = TreeUtils.createTree();</div><div class="line"></div><div class="line">System.out.println(&quot;先序输出&quot;);</div><div class="line">printXianXu(treeNode);</div><div class="line"></div><div class="line">System.out.println(&quot;中序输出&quot;);</div><div class="line">printZhongXu(treeNode);</div><div class="line"></div><div class="line">System.out.println(&quot;后序输出&quot;);</div><div class="line">printHouXu(treeNode);</div><div class="line"></div><div class="line">System.out.println(&quot;高度：&quot; + treeDepth(treeNode));</div><div class="line">System.out.println(&quot;节点数：&quot; + sumNodes(treeNode));</div><div class="line">System.out.println(&quot;叶子节点数：&quot; + sumLeafNodes(treeNode));</div><div class="line"></div><div class="line">TreeNode&lt;String&gt; copyTree = copyTree(treeNode);</div><div class="line">System.out.println(&quot;先序输出&quot;);</div><div class="line">printXianXu(copyTree);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="B树、B-树"><a href="#B树、B-树" class="headerlink" title="B树、B+树"></a>B树、B+树</h3><p>平衡多路查找树，不是很懂，只知道常用于文件系统。可以参阅<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">《MySQL索引背后的数据结构及算法原理》</a>一文。</p><h3 id="树、森林与二叉树的转换"><a href="#树、森林与二叉树的转换" class="headerlink" title="树、森林与二叉树的转换"></a>树、森林与二叉树的转换</h3><p>把树或森林转换成成对应的二叉树。<strong>其转换成二叉树的核心思想是二叉树的结点，左边挂孩子，右边挂兄弟。把二叉树还原成对应的树或森林，也是用同样的原理去还原即可。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/55143497.jpg" alt=""></p><h2 id="非线性结构-图"><a href="#非线性结构-图" class="headerlink" title="非线性结构-图"></a>非线性结构-图</h2><p>图的算法比较复杂，了解了一些概念以及图常用算法的原理。并没有写出代码。<br>有向图、无向图、强连通图、存储结构的邻接矩阵和邻接表、遍历算法的深度优先和广度优先、最小生成树的普利姆算法及克鲁斯卡尔算法、最短路径的迪杰斯特拉算法、拓扑排序等。了解一下这些概念，并能在纸上能够大致画出过程图。还真总结不出什么。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://dhsmp.com/2018/02/26/data_struct/&quot;&gt;《回顾数据结构的基础知识》&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;非线性结构-树&quot;&gt;&lt;a href=&quot;#非线性结构-树&quot; class=&quot;headerlink&quot; title=&quot;非线
      
    
    </summary>
    
      <category term="数据结构" scheme="http://dhsmp.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络原理学习部分的总结</title>
    <link href="http://dhsmp.com/2018/07/30/network/"/>
    <id>http://dhsmp.com/2018/07/30/network/</id>
    <published>2018-07-30T08:48:57.000Z</published>
    <updated>2018-09-15T23:54:23.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><p>从去年9月开始，看教材《计算机网络原理》到4月考试通过，前前后后花了大半年时间。必须得承认，我不是神童，也不是学霸，不是那种一学就会的体质。《计算机网络原理》绝对是我啃得最慢，也是我认为最枯燥的一本教科书。但是我还是靠自学把它啃下来了，磨炼了心性。对于计算机网络世界的理解，真的上升了不少，不仅仅只是编程。<br>曾国藩对于学习，提出过四点要求，个人觉得非常有意思。<br><strong>一曰看生书宜求速，不多读则太陋。<br>一曰温旧书宜求熟，不背诵则易忘。<br>一曰习字宜有恒，不善写则如身之无衣，山之无木。<br>一曰作文宜苦思，不善作则如人之哑不能言，马之肢不能行。</strong></p><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><p>在教科书中，有一段话是需要背的。什么是计算机网络？只有当你能够很顺的背下来，你才会去回味、去理解概述的含义。这里再借鉴一下教科书上的内容。<br><strong>计算机网络，是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</strong><br>在整个计算机网络发展史中，早期60年代的计算机网络是美国军方研制的ARPNET网，主要是科研机构为实现资源共享。到了80年代诞生出统一的标准-OSI参考模型。也就是常说的七层模型。教科书都是以七层模型来讲，但是事实上的标准是TCP/IP四层模型。七层模型从高往低依次是：<strong>应、表、会、传、网、数、物</strong>（记第一个字，刚好是一句七言绝句诗，方便记忆）。四层模型从高往低依次：<strong>应、传、互、主</strong>。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-10/40277440.jpg" alt=""><br>每一层中所包含的协议：（两张图都是网上找的，跟教科书上也是一样的，隔个三五天翻看一下，一回生二回熟，慢慢就记住了）<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-10/83019517.jpg" alt=""><br>发送端在将数据进行发送时，需要经过一系列的封装。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/28381599.jpg" alt=""><br>接收端在接收数据的时候，再进行相应的解封。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/37102701.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/65343908.jpg" alt=""></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>总结的方式也按教科书章节的划分，从底层往上层温习。<strong>物理层主要是实现比特流的透明传输，为数据链路层提供数据传输服务，直接面向实际承担数据传输的物理介质。其实就是最原始的二进制位数据的传输。</strong><br>传输介质主要是有线、无线两大类。有线传输介质中有双绞线、同轴电缆、光钎。双绞线跟同轴电缆不可避免的就需要把二进制数据，转换成电频进行传输。专业术语叫调制解调器，俗称猫（MODEL）。在接收方中，再把电信号还原成二进制数据。而光纤传输的是光信号，需要发送端将其转成光信号，接收端再还原成电信号。<br>数据在传输过程中无可避免的就会出现传输速率，信道容量，误码率，通信方式的问题。就类似现实社会中，公司有一堆的货物要运到某个地方，货物就是数据，运输的路径其实就是传输过程，是走汽车运输还是火车运输，货物所运达的时间，传输的速率是不同的。在传输过程中可能会出现少了某一个物品。货物很多，是一次一次的运输，还是一次找10个承运人来运输…等等这些问题。这里不得不提一位伟人-香农。香农提出了信息熵的概念，为信息论和数字通信奠定了基础。<br>物理层的主要任务确定传输媒体接口的一些特性。主要是机械特性、电气特性、功能特性、规程特性。</p><ul><li>机械特性：例如网卡接口的数目、形状、大小等。</li><li>电气特性：电压的范围-5V到+5V。</li><li>功能特性：用电压的取值范围来表示比特数据。-5V到0V表示0，+5V到0V表示1.</li><li>规程特性：规定建立连接时各个相关部件的工作步骤。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/25960527.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/68226925.jpg" alt=""><br>信号的编码方式<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/14023142.jpg" alt=""><br><strong>曼彻斯特编码：bit中间有信号跳变，从低到高的跳变表示0，从高到低的跳变表示1。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/80606994.jpg" alt=""><br><strong>差分曼彻斯特编码：bit中间有信号跳变，bit与bit之间也有信号跳变表示下一bit为0。bit与bit之间无信号跳变，表示下一bit为1。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/88120148.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/42908405.jpg" alt=""><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2>数据链路层主要是对物理层传输原始bit流功能的加强，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。数据链路层的传送单位称为帧。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/743647.jpg" alt=""><br>数据链路层主要是要解决三个问题：</li><li>封装成帧：就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限。首部和尾部的一个重要作用就是进行帧定界。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/48033311.jpg" alt=""></li><li>透明传输：是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/96367096.jpg" alt=""></li><li>差错控制：传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。在数据链路层传送的帧中，广泛使用了循环冗余检验CRC的检错技术。<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括路由选择、拥塞控制、网际互连等。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/21516818.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/78452877.jpg" alt=""></li><li>RIP协议：路由信息协议，简单的距离向量路由协议。每个RIP路由器都保存了一张路由表，每一项对应着一个目的地。其中每项包括了目的地的IP地址、到目的地的路径距离的度量1、到目的地的路径的下一个路由表的IP地址、路由改变标志以及和这条路由有关的一些计时器。其采用的距离度量是一种非常简单的到目的地距离的测量方式：站点计数度量，也就是该路由要经过的路由器个数。</li><li>OSPF协议：链路状态路由协议，每个路由器通过维护它自己的本地链路状态信息，即路由器到子网的链路状态和可以到达的邻居路由器，通过扩散的方法把更新了的本地链路状态信息广播给自治系统中的每个路由器。这样每个路由器都知道自治系统内部的拓扑结构和链路状态信息。路由器根据这个链路状态库计算出到每个目的地的最短路径。所有路由器都采用相同的算法来计算最短路由，而且这个计算是在路由器本地进行的。动态的路由算法，能够自动而快速地适应拓扑结构的变化。</li><li>IP协议：互连网协议，将多个网络连成一个互连网，把高层的数据以多个数据报的形式通过互连网分发出去。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/7500754.jpg" alt=""></li><li>ARP协议：地址转换协议。在TCP/IP网络环境下，每个主机都分配了一个32位的IP地址，这种互联网地址是在网际范围标识主机的一种逻辑地址。为了让报文在物理网上传送，必须知道彼此的物理地址。以以太网环境为例，为了正确地向目的站传送报文，必须把目的站32位IP地址转换成48位以太网目的地址，此时所需要的协议就是ARP协议。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/89098859.jpg" alt=""></li><li>RARP协议：反向地址转换协议，使用与一种特殊的情况，如果站点初始化以后，只有自己的物理网络地址而没有IP地址，则可以通过RARP协议发出广播请求，征求自己的IP地址。而RARP服务器负责回答。无IP地址的站点可以通过RARP协议取得自己的IP地址。</li><li>ICMP协议：互联网控制报文协议。</li><li>IGMP协议：因特网组管理协议。<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/95311087.jpg" alt=""></li><li>TCP协议：需要将传输的数据进行分段传输，建立会话，可靠传输，流量控制。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/71000992.jpg" alt=""><br>传输层协议和应用层协议之间的关系：端口号加使用的传输层协议，用以标识应用程序。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/50225753.jpg" alt=""><br>可靠传输原理：ARQ自动请求重传，采用确认和重传机制。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/61114084.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/9071104.jpg" alt=""><br>TCP报文格式：<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/57953401.jpg" alt=""><br>TCP建立连接三次握手的过程：<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/77880357.jpg" alt=""><br>TCP释放连接四次挥手的过程：<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/45858470.jpg" alt=""></li><li>UDP协议：一个数据包就能够完成数据通信，不分段，不需要建立会话，不需要流量控制，不可靠传输。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/97210689.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前沿&quot;&gt;&lt;a href=&quot;#前沿&quot; class=&quot;headerlink&quot; title=&quot;前沿&quot;&gt;&lt;/a&gt;前沿&lt;/h2&gt;&lt;p&gt;从去年9月开始，看教材《计算机网络原理》到4月考试通过，前前后后花了大半年时间。必须得承认，我不是神童，也不是学霸，不是那种一学就会的体质。
      
    
    </summary>
    
      <category term="计算机理论" scheme="http://dhsmp.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>2017年度总结</title>
    <link href="http://dhsmp.com/2018/06/13/annual-summary/"/>
    <id>http://dhsmp.com/2018/06/13/annual-summary/</id>
    <published>2018-06-13T02:37:53.000Z</published>
    <updated>2018-09-30T06:08:29.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>从2017年6月开始创建博客开始，到现在也有近一年了。回首时，还是很感慨。坚持了一年的博客输出，对知识体系的理解，强迫对知识的输入再输出。收获很多，更多的是心历上的收获。坚持做一件自己持续投入的事情，这份收获在于自己的内心感受。不在乎外界看法，不在乎流量，不在乎评价，坚持自己的初衷，知识的输出。</p><h2 id="2017年目标"><a href="#2017年目标" class="headerlink" title="2017年目标"></a>2017年目标</h2><h3 id="6月目标"><a href="#6月目标" class="headerlink" title="6月目标"></a>6月目标</h3><ul><li>个人博客上线</li><li>阅读《MySQL5.6从零开始学》系统的补充一下MySQL相关知识</li></ul><h3 id="6月进展"><a href="#6月进展" class="headerlink" title="6月进展"></a>6月进展</h3><ul><li><del>个人博客上线，从以前的纸质笔记本上摘抄出一些记录，并输出成博客文章</del> </li><li><del>阅读《MySQL5.6从零开始学》</del></li></ul><h3 id="7月目标"><a href="#7月目标" class="headerlink" title="7月目标"></a>7月目标</h3><ul><li>自考报名、报考</li><li>阅读《MySQL5.6从零开始学》系统的补充一下MySQL相关知识</li><li>阅读教材《Java语言程序设计一》</li></ul><h3 id="7月进展"><a href="#7月进展" class="headerlink" title="7月进展"></a>7月进展</h3><ul><li><del>完成自考报名、10月报考，中大《计算机网络》专业，计划不报班自学参加考试</del></li><li><del>阅读《MySQL5.6从零开始学》系统的补充一下MySQL相关知识</del></li><li><del>阅读教材《Java语言程序设计一》</del></li></ul><h3 id="8月目标"><a href="#8月目标" class="headerlink" title="8月目标"></a>8月目标</h3><ul><li>阅读《精进：如何成为一个很厉害的人》</li><li>阅读教材《中国近代史纲要》</li></ul><h3 id="8月进展"><a href="#8月进展" class="headerlink" title="8月进展"></a>8月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读《精进：如何成为一个很厉害的人》</del></li><li><del>阅读教材《中国近代史纲要》</del></li></ul><h3 id="9月目标"><a href="#9月目标" class="headerlink" title="9月目标"></a>9月目标</h3><ul><li>阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</li><li>刷题《Java语言程序设计一》，提炼重点知识</li><li>刷题《中国近代史纲要》，提炼并背诵简单题知识</li></ul><h3 id="9月进展"><a href="#9月进展" class="headerlink" title="9月进展"></a>9月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</del></li><li><del>刷题《Java语言程序设计一》</del></li><li><del>刷题《中国近代史纲要》</del></li></ul><h3 id="10月目标"><a href="#10月目标" class="headerlink" title="10月目标"></a>10月目标</h3><ul><li>阅读教材《计算机网络原理》</li><li>参加10月自学考试</li><li>阅读《刻意练习》</li></ul><h3 id="10月进展"><a href="#10月进展" class="headerlink" title="10月进展"></a>10月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读教材《计算机网络原理》</del></li><li><del>参加10月自学考试</del></li><li><del>《网络工程》没有按照原有计划进行阅读，主要是一时没有摸索出自己的合适的学习方法。其他科目需要记忆的知识量较大</del></li><li><del>阅读《刻意练习》</del></li></ul><h3 id="11月目标"><a href="#11月目标" class="headerlink" title="11月目标"></a>11月目标</h3><ul><li>预估10月考试中的《计算机网络原理》、《网络工程》是没有过的。再次阅读教材《计算机网络原理》</li><li>阅读《硅谷之谜》</li><li>开始学习《新概念英语一》，每天10个单词</li></ul><h3 id="11月进展"><a href="#11月进展" class="headerlink" title="11月进展"></a>11月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读教材《计算机网络原理》</del></li><li><del>阅读《硅谷之谜》<br><img src="http://orxmumro7.bkt.clouddn.com/18-6-13/49118566.jpg" alt=""></del></li></ul><h3 id="12月目标"><a href="#12月目标" class="headerlink" title="12月目标"></a>12月目标</h3><ul><li>刷题《计算机网络原理》，提炼重点知识</li><li>温习《C语言程序设计》，为《数据结构》的考试补下基础</li><li>阅读教材《网络工程》</li><li>阅读《文明之光》第一册</li></ul><h3 id="12月进展"><a href="#12月进展" class="headerlink" title="12月进展"></a>12月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络原理》，提炼重点知识</del></li><li><del>补了谭浩强的绿皮书《C语言程序设计》</del></li><li><del>阅读教材《网络工程》</del></li><li><del>阅读《文明之光》第一册</del></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;感慨&quot;&gt;&lt;a href=&quot;#感慨&quot; class=&quot;headerlink&quot; title=&quot;感慨&quot;&gt;&lt;/a&gt;感慨&lt;/h2&gt;&lt;p&gt;从2017年6月开始创建博客开始，到现在也有近一年了。回首时，还是很感慨。坚持了一年的博客输出，对知识体系的理解，强迫对知识的输入再输出。收
      
    
    </summary>
    
      <category term="随想" scheme="http://dhsmp.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
</feed>
