<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamMaker-HS</title>
  
  <subtitle>勤思善问，可敌良师益友。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dhsmp.com/"/>
  <updated>2018-04-19T08:45:00.095Z</updated>
  <id>http://dhsmp.com/</id>
  
  <author>
    <name>HuaShan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回顾数据结构的一些基础</title>
    <link href="http://dhsmp.com/2018/02/26/data_struct/"/>
    <id>http://dhsmp.com/2018/02/26/data_struct/</id>
    <published>2018-02-26T01:20:19.078Z</published>
    <updated>2018-04-19T08:45:00.095Z</updated>
    
    <content type="html"><![CDATA[<p>之前在写Java中的容器时，有写到一些关于数据结构的部分，可以参考<a href="http://dhsmp.com/2017/06/29/list-set-map/">《Java的List、Set、Map容器》</a>一文。这里再详细回顾一下对数据结构的学习。</p><h2 id="C语言及指针回顾"><a href="#C语言及指针回顾" class="headerlink" title="C语言及指针回顾"></a>C语言及指针回顾</h2><p>字节：存储数据的单元，是硬件所能访问的最小单位。<br>1字节=8位，1k=1024字节，1M=1024k，1G=1024M。对于4G内存的电脑来说，所能存放数据最多是（4*1024*1024*1024*8）位的二进制数据。<br>内存地址：内存单元的编号，从零开始的非负整数<br>指针：指针就是地址，地址就是指针。<br>指针变量：存放内存单元编号的变量，就是存放地址的变量。<br>结构体：把一些基本类型数据组合在一起，形成一个新的复合数据类型。<br><strong>一个指针变量，无论它指向的变量占几个字节，该指针变量本身只占4个字节。用第一个字节的地址表示整个变量的地址。一个变量的地址是用该变量首字节的地址来表示。CPU通过地址总线、控制总线、数据总线，俗称三根总线，来操作内存。</strong></p><h3 id="看懂一个程序的三个步骤"><a href="#看懂一个程序的三个步骤" class="headerlink" title="看懂一个程序的三个步骤"></a>看懂一个程序的三个步骤</h3><ol><li>程序的流程</li><li>每个语句的功能</li><li>试数<h2 id="问题规模的增加，算法对运算处理的性能消耗"><a href="#问题规模的增加，算法对运算处理的性能消耗" class="headerlink" title="问题规模的增加，算法对运算处理的性能消耗"></a>问题规模的增加，算法对运算处理的性能消耗</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2017年11月23日 下午2:43:18</div><div class="line"> * <span class="doctag">@remark</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOn</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> n = <span class="number">10000</span>;</div><div class="line"></div><div class="line">method1(n);</div><div class="line"></div><div class="line">method2(n);</div><div class="line"></div><div class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = method3(n);</div><div class="line">System.out.println(<span class="string">"method3："</span> + (System.currentTimeMillis() - start) + <span class="string">"毫秒，sum="</span> + sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用for循环进行1+2+3+...+100的计算。 该方法的时间复杂度是O（n）</div><div class="line"> * <span class="doctag">@param</span> n</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"method1： "</span> + (System.currentTimeMillis() - start) + <span class="string">"毫秒，sum="</span> + sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用高斯公式进行1+2+3+...+100的计算。 该方法的时间复杂度是O（1）</div><div class="line"> * <span class="doctag">@param</span> n</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = (n + <span class="number">1</span>) * n / <span class="number">2</span>;</div><div class="line">System.out.println(<span class="string">"method2： "</span> + (System.currentTimeMillis() - start) + <span class="string">"毫秒，sum="</span> + sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用递归的方式计算1+2+3+...+100的和。数值过大，会导致内存溢出，递归本质是函数的不停的压栈、出栈的操作</div><div class="line"> * <span class="doctag">@param</span> n</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">method3</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> n + method3(n-<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/73556896.jpg" alt=""><br><strong>从上图的运行结果可以明显的看到，当问题计算的规模n=10000时，好像method1、method2、method3彼此的计算耗时都是0毫秒。但是当n再扩大10倍时，method1花了2毫秒，method3直接抛异常了，而method2而然是0毫秒。</strong><br>method1是用for循环的方式，method2则是高斯公式，method3是用递归的方式。<br>在数据结构领域，关于算法的时间复杂度，有一个计算公式，大O表示法。这里不做过多说明，教科书上有该公式的计算方法跟定论。</p><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><p>数据结构中关于数据的逻辑结构，只分为线性结构、非线程结构。<strong>所谓的线性结构，我们可以用一个生活化的场景来理解它，用穿好线的针能够一次把元素都串起来</strong>。线性结构是指元素只能有一个顶点、一个端点，中间的元素只有一个前驱跟一个后继。</p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>可以把串在一起的元素，紧紧的挤压在一个方向。让元素紧挨着元素。这就可以理解成是一个顺序表。顺序表其实就是数组，一次给一片连续的空间，然后把空间按一个一个的小格子划分好。其特点是：<strong>当CPU在内存中找不到连续一片的符合要求的空间，会导致分配失败。可以通过存放元素格子的宽度乘以偏移量，获取指定地址空间上的元素。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/79473786.jpg" alt=""></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//连续存储数组的算法</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> * pBase;<span class="comment">//存储容器中第一个元素的地址</span></div><div class="line"><span class="keyword">int</span> capacity;<span class="comment">//所能容纳元素的最大容量</span></div><div class="line"><span class="keyword">int</span> length;<span class="comment">//当前有效元素的个数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> capacity)</span></span>;<span class="comment">//初始化容器</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">append_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> value)</span></span>;<span class="comment">//追加元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span>;<span class="comment">//在指定的角标处插入元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> index, <span class="keyword">int</span> * delete_value)</span></span>;<span class="comment">//删除指定角标处的元素，并返回被删除的元素的值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(struct Arr *, <span class="keyword">int</span> index)</span></span>;<span class="comment">//获取指定角标的元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//容器是否空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//容器是否已满</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_arr</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//按元素的值自然排序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//输出元素的值</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invert_arr</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//元素值前后倒置</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> delete_value;</div><div class="line"><span class="keyword">int</span> get_value;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span> <span class="title">array</span>;</span></div><div class="line">init_arr(&amp;<span class="built_in">array</span>, <span class="number">10</span>);</div><div class="line">print_arr(&amp;<span class="built_in">array</span>);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n-------分隔符-追加-----\n"</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">10</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">6</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">2</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">-1</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">9</span>);</div><div class="line">print_arr(&amp;<span class="built_in">array</span>);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n-------分隔符-插入-----\n"</span>);</div><div class="line">insert_arr(&amp;<span class="built_in">array</span>, <span class="number">0</span>, <span class="number">7</span>);</div><div class="line"><span class="comment">//insert_arr(&amp;array, 6, -18);</span></div><div class="line"><span class="comment">//insert_arr(&amp;array, 1, 72);</span></div><div class="line">print_arr(&amp;<span class="built_in">array</span>);</div><div class="line"></div><div class="line"><span class="comment">/**printf("\n-------分隔符-删除-----\n");</span></div><div class="line">bool flag = delete_arr(&amp;array, 5, &amp;delete_value);</div><div class="line">print_arr(&amp;array);</div><div class="line">if(flag)&#123;</div><div class="line">printf("被删除的元素的值：%d\n", delete_value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">printf("\n-------分隔符-获取-----\n");</div><div class="line">get_value = get(&amp;array, 5);</div><div class="line">printf("角标 %d 的元素值：%d\n", 5 ,get_value);</div><div class="line">get_value = get(&amp;array, 0);</div><div class="line">printf("角标 %d 的元素值：%d\n", 0 ,get_value);</div><div class="line"></div><div class="line">printf("\n-------分隔符-倒置-----\n");</div><div class="line">invert_arr(&amp;array);</div><div class="line">print_arr(&amp;array);</div><div class="line"></div><div class="line">printf("\n-------分隔符-排序-----\n");</div><div class="line">sort_arr(&amp;array);</div><div class="line">print_arr(&amp;array);*/</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化容器</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> capacity)</span></span></div><div class="line">&#123;</div><div class="line">pArr-&gt;pBase = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * capacity);<span class="comment">//动态分配内存</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pArr-&gt;pBase)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"动态分配内存失败！\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);<span class="comment">//程序退出。跟Java中的System.exit(-1);一样</span></div><div class="line">&#125;</div><div class="line">pArr-&gt;capacity = capacity;</div><div class="line">pArr-&gt;length = <span class="number">0</span>;<span class="comment">//未存储元素，有效元素为0个</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出元素的值</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"容器大小为：%d，有效元素个数为：%d\n"</span>, pArr-&gt;capacity, pArr-&gt;length);</div><div class="line"><span class="keyword">if</span>(is_empty(pArr))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"空容器！\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pArr-&gt;length; i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, pArr-&gt;pBase[i]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//容器是否空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="comment">//有效元素的个数为0</span></div><div class="line"><span class="keyword">return</span> pArr-&gt;length == <span class="number">0</span> ? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//容器是否已满</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="comment">//有效元素的个数=容器的长度</span></div><div class="line"><span class="keyword">return</span> pArr-&gt;length == pArr-&gt;capacity ? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//追加</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">append_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="comment">//如果容器满了</span></div><div class="line"><span class="keyword">if</span>(is_full(pArr))&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//在当前容器的最后一个位置处追加元素</span></div><div class="line">pArr-&gt;pBase[pArr-&gt;length] = value;</div><div class="line">pArr-&gt;length++;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在指定的角标处插入元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="comment">//如果容器满了</span></div><div class="line"><span class="keyword">if</span>(is_full(pArr))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"容器已满！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//index的值不能是负数，不是超过容器存储的有效元素个数</span></div><div class="line"><span class="comment">//index=有效元素个数时，表示在最后一个元素处追加一个元素值</span></div><div class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; pArr-&gt;length)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//先移位，把指定角标位及该角标之后存放的元素，往后挪一个位子存放</span></div><div class="line"><span class="keyword">for</span>(i = pArr-&gt;length - <span class="number">1</span>; i &gt;= index; i--)&#123;</div><div class="line">pArr-&gt;pBase[i+<span class="number">1</span>] = pArr-&gt;pBase[i];</div><div class="line">&#125;</div><div class="line"><span class="comment">//把值存入指定角标处</span></div><div class="line">pArr-&gt;pBase[index] = value;</div><div class="line">pArr-&gt;length++;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除指定角标处的元素，并返回被删除的元素的值</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> index, <span class="keyword">int</span> * delete_value)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="comment">//如果容器满了</span></div><div class="line"><span class="keyword">if</span>(is_empty(pArr))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"容器已空！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//index的值不能是负数，不是超过容器存储的有效元素个数</span></div><div class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; pArr-&gt;length<span class="number">-1</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//把要删除的指定角标处的值取出来</span></div><div class="line">*delete_value = pArr-&gt;pBase[index];</div><div class="line"><span class="comment">//需要移位，要删除的指定角标之后的值需要往前移动一位</span></div><div class="line"><span class="keyword">for</span>(i = index + <span class="number">1</span>; i &lt; pArr-&gt;length; i++)&#123;</div><div class="line">pArr-&gt;pBase[i<span class="number">-1</span>] = pArr-&gt;pBase[i];</div><div class="line">&#125;</div><div class="line">pArr-&gt;length--;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取指定角标位置的元素值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> index)</span></span>&#123;</div><div class="line"><span class="comment">//index的值不能是负数，不是超过容器存储的有效元素个数</span></div><div class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; pArr-&gt;length<span class="number">-1</span>)&#123;</div><div class="line"><span class="comment">//应该是Java中的数组角标越界异常，不能确定此处返回的值是否是一个有效的值</span></div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pArr-&gt;pBase[index];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//元素值前后倒置</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invert_arr</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> end = pArr-&gt;length<span class="number">-1</span>;</div><div class="line"><span class="keyword">int</span> temp;</div><div class="line"><span class="keyword">while</span>(start &lt; end)&#123;</div><div class="line">temp = pArr-&gt;pBase[start];</div><div class="line">pArr-&gt;pBase[start] = pArr-&gt;pBase[end];</div><div class="line">pArr-&gt;pBase[end] = temp;</div><div class="line">start++;</div><div class="line">end--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//按元素的值自然排序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_arr</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, temp;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;pArr-&gt;length; i++)&#123;</div><div class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;pArr-&gt;length; j++)&#123;</div><div class="line"><span class="keyword">if</span>(pArr-&gt;pBase[i] &gt; pArr-&gt;pBase[j])&#123;</div><div class="line">temp = pArr-&gt;pBase[j];</div><div class="line">pArr-&gt;pBase[j] = pArr-&gt;pBase[i];</div><div class="line">pArr-&gt;pBase[i] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a>链式结构</h3><p>可以把串在一起的元素，中间的线还流出一点点来。只要顺着线能找到元素。这就可以理解成是一个链式结构。<strong>每一个数据元素的地址可以是分散开来的，动态分配，彼此通过指针相连。每个结点只有一个后续结点，首结点没有前驱，尾结点没有后续。</strong>链式结构，也就是俗称的链表。对于链表的操作，额外增加一个头结点，以方便对整个链表的操作。头结点跟头指针是两个不同的概念。头结点的数据域部分是空的。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/63551606.jpg" alt=""></p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>在单链表的结构中，数据元素要有两部分，一部分存放数据元素的数据部分，一部分存放下一个数据元素的地址。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/66911155.jpg" alt=""></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> data;<span class="comment">//数据域</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指针域</span></div><div class="line">&#125;NODE, *PNODE;</div><div class="line"></div><div class="line"><span class="comment">//创建链表</span></div><div class="line"><span class="function">PNODE <span class="title">creat_list</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">//输出链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//是否为空链表</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//获取链表的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//对链表进行排序：按自然顺序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//插入结点</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_node</span><span class="params">(PNODE,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="comment">//删除结点</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_node</span><span class="params">(PNODE,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> deleteVal;</div><div class="line">PNODE pHead = <span class="literal">NULL</span>;</div><div class="line">pHead = creat_list();</div><div class="line"><span class="comment">//输出值</span></div><div class="line">print_list(pHead);</div><div class="line"><span class="keyword">if</span>(is_empty(pHead))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"空链表\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"链表不为空\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取链表长度</span></div><div class="line">len = get_len(pHead);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"链表的长度为：%d\n"</span>, len);</div><div class="line"><span class="comment">//排序</span></div><div class="line">sort_list(pHead);</div><div class="line">print_list(pHead);</div><div class="line"></div><div class="line"><span class="comment">//插入</span></div><div class="line"><span class="keyword">if</span>(insert_node(pHead, <span class="number">1</span>, <span class="number">33</span>))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"插入成功！\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"插入失败！\n"</span>);</div><div class="line">&#125;</div><div class="line">print_list(pHead);</div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">if</span>(delete_node(pHead, <span class="number">0</span>, &amp;deleteVal))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"删除成功！\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"删除失败！\n"</span>);</div><div class="line">&#125;</div><div class="line">print_list(pHead);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建链表</span></div><div class="line"><span class="function">PNODE <span class="title">creat_list</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> value;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="comment">//创建头结点</span></div><div class="line">PNODE pHead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pHead)&#123;</div><div class="line"><span class="comment">//创建失败</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"分配内存失败，程序终止!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输出链表的结点个数："</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</div><div class="line"></div><div class="line">PNODE pTail = pHead;</div><div class="line">pTail-&gt;pNext = <span class="literal">NULL</span>;</div><div class="line"><span class="comment">//循环生成链表的每个节点</span></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输出第%d个结点的值："</span>, i+<span class="number">1</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value);</div><div class="line"></div><div class="line"><span class="comment">//创建一个新的结点</span></div><div class="line">PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line">pNew-&gt;data = value;</div><div class="line">pTail-&gt;pNext = pNew;</div><div class="line">pNew-&gt;pNext = <span class="literal">NULL</span>;</div><div class="line">pTail = pNew;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pHead;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line">PNODE p = pHead-&gt;pNext;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;data);</div><div class="line">p = p-&gt;pNext;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//是否为空链表</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span> == pHead-&gt;pNext ? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取链表的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">PNODE p = pHead-&gt;pNext;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p)&#123;</div><div class="line">p = p-&gt;pNext;</div><div class="line">len++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//对链表进行排序：按自然顺序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, temp;</div><div class="line"><span class="comment">//总长度</span></div><div class="line"><span class="keyword">int</span> len = get_len(pHead);</div><div class="line"><span class="comment">//一个当前节点，一个当前节点的下一个节点</span></div><div class="line">PNODE pNow, pNext;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, pNow=pHead-&gt;pNext;i&lt;len<span class="number">-1</span>;i++, pNow = pNow-&gt;pNext)&#123;</div><div class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>, pNext = pNow-&gt;pNext;j&lt;len;j++, pNext = pNext-&gt;pNext)&#123;</div><div class="line"><span class="keyword">if</span>(pNow-&gt;data &gt; pNext-&gt;data)&#123;<span class="comment">//a[i] &gt; a[j]</span></div><div class="line">temp =pNow-&gt;data;<span class="comment">//temp = a[i]</span></div><div class="line">pNow-&gt;data = pNext-&gt;data;<span class="comment">//a[i] = a[j]</span></div><div class="line">pNext-&gt;data= temp;<span class="comment">//a[j] = temp;</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在指定位置插入结点，position从0开始</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_node</span><span class="params">(PNODE pHead, <span class="keyword">int</span> position, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="comment">//获取链表的总长度</span></div><div class="line"><span class="comment">//int len = get_len(pHead);</span></div><div class="line"><span class="comment">//判断position是否是一个有效数。长度是5，position为6，表示是在末尾处添加。index为7，超过有效值</span></div><div class="line"><span class="comment">//if(position &gt; len + 1)&#123;</span></div><div class="line"><span class="comment">//return false;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"><span class="comment">//直接定位到需要插入结点的前一结点</span></div><div class="line">PNODE p = pHead;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p &amp;&amp; len &lt; position)&#123;</div><div class="line">p = p-&gt;pNext;</div><div class="line">len++;</div><div class="line">&#125;</div><div class="line"><span class="comment">//结点不存在</span></div><div class="line"><span class="keyword">if</span>(len &gt; position || <span class="literal">NULL</span> == p)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建一个新结点</span></div><div class="line">PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pNew)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"动态内存分配失败！程序退出\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">pNew-&gt;data = value;</div><div class="line">pNew-&gt;pNext = p-&gt;pNext;</div><div class="line">p-&gt;pNext = pNew;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除指定位置的结点，position从0开始</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_node</span><span class="params">(PNODE pHead, <span class="keyword">int</span> position ,<span class="keyword">int</span>* deleteVal)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"><span class="comment">//直接定位到需要插入结点的前一结点</span></div><div class="line">PNODE p = pHead;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p-&gt;pNext &amp;&amp; len &lt; position)&#123;</div><div class="line">p = p-&gt;pNext;</div><div class="line">len++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(len &gt; position || <span class="literal">NULL</span> == p-&gt;pNext)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//要删除的结点</span></div><div class="line">PNODE q = p-&gt;pNext;</div><div class="line">*deleteVal = q-&gt;data;</div><div class="line"></div><div class="line"><span class="comment">//把p的指针域指向要删除结点的下一个节点</span></div><div class="line">p-&gt;pNext = p-&gt;pNext-&gt;pNext;</div><div class="line"><span class="comment">//释放删除结点的内存空间</span></div><div class="line"><span class="built_in">free</span>(q);</div><div class="line">q = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>在双链表的结构中，数据元素要有三部分，一部分存放数据元素的数据部分，一部分存放下一个数据元素的地址，一部分存放上一个数据元素的地址。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/12872314.jpg" alt=""></p><h2 id="线性结构的应用-队列、栈"><a href="#线性结构的应用-队列、栈" class="headerlink" title="线性结构的应用-队列、栈"></a>线性结构的应用-队列、栈</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>操作受限的线性表，也称先进先出表。队尾插入，队头取出元素。<strong>在非空队列中，队头指针始终指向队头元素，队尾指针始终指向队尾元素的下一个位置</strong>。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/99260764.jpg" alt=""></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/94670713.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//循环队列，先进先出</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></div><div class="line"><span class="keyword">int</span> * pBase;<span class="comment">//动态数组</span></div><div class="line"><span class="keyword">int</span> front;<span class="comment">//队列中有效元素的头元素</span></div><div class="line"><span class="keyword">int</span> rear;<span class="comment">//队列中有效元素的尾元素</span></div><div class="line">&#125;QUEUE;</div><div class="line"></div><div class="line"><span class="comment">//初始化循环队列</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"><span class="comment">//入队，在队列有效元素的尾部添加</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(QUEUE *, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="comment">//出队，从队头开始获取</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(QUEUE *, <span class="keyword">int</span> *)</span></span>;</div><div class="line"><span class="comment">//是否已经满</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"><span class="comment">//是否已经空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"><span class="comment">//打印元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">QUEUE q;</div><div class="line"><span class="keyword">int</span> delValue;</div><div class="line"></div><div class="line">init(&amp;q);</div><div class="line"></div><div class="line">add(&amp;q, <span class="number">1</span>);</div><div class="line">add(&amp;q, <span class="number">2</span>);</div><div class="line">add(&amp;q, <span class="number">3</span>);</div><div class="line">add(&amp;q, <span class="number">4</span>);</div><div class="line">add(&amp;q, <span class="number">5</span>);</div><div class="line">add(&amp;q, <span class="number">6</span>);</div><div class="line">add(&amp;q, <span class="number">7</span>);</div><div class="line">add(&amp;q, <span class="number">8</span>);</div><div class="line"></div><div class="line">print(&amp;q);</div><div class="line"></div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"1出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"2出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"3出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"4出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"5出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"6出队的值为：%d\n"</span>, delValue);</div><div class="line"></div><div class="line">add(&amp;q, <span class="number">8</span>);</div><div class="line">add(&amp;q, <span class="number">9</span>);</div><div class="line"></div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"7出队的值为：%d\n"</span>, delValue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化循环队列</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line">pQueue-&gt;pBase = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">6</span>);</div><div class="line">pQueue-&gt;front = <span class="number">0</span>;</div><div class="line">pQueue-&gt;rear = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//入队，在队列有效元素的尾部添加</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(QUEUE * pQueue, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(isFull(pQueue))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"队列已经放满了！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">pQueue-&gt;pBase[pQueue-&gt;rear] = value;</div><div class="line">pQueue-&gt;rear = (pQueue-&gt;rear + <span class="number">1</span>) % <span class="number">6</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//出队，从队头开始获取</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(QUEUE * pQueue, <span class="keyword">int</span> * delValue)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(isEmpty(pQueue))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"队列已经空了！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">*delValue = pQueue-&gt;pBase[pQueue-&gt;front];</div><div class="line">pQueue-&gt;front = (pQueue-&gt;front + <span class="number">1</span>) % <span class="number">6</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//是否已经满</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>((pQueue-&gt;rear+<span class="number">1</span>) % <span class="number">6</span> == pQueue-&gt;front)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//是否已经空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(pQueue-&gt;rear == pQueue-&gt;front)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> front = pQueue-&gt;front;</div><div class="line"><span class="comment">//队头数不等于队尾数，则表示一直都有元素</span></div><div class="line"><span class="keyword">while</span>(front != pQueue-&gt;rear)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, pQueue-&gt;pBase[front]);</div><div class="line">front = (front+<span class="number">1</span>) % <span class="number">6</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><p>栈是限定在表的一端进行插入和删除运算的线性表，通常将插入、删除的一端称为栈顶。链式栈，将对链表的操作进行一定的限制，在一端进行插入、删除即可。链式栈，适合开口向上或向下的操作。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/13995764.jpg" alt=""><br>栈的四种不同操作方式。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/55282453.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//链表的节点数据对象</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> data;<span class="comment">//数据域</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指针域</span></div><div class="line">&#125;NODE, * PNODE;</div><div class="line"></div><div class="line"><span class="comment">//栈--&gt;类似箱子，先进后出</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></div><div class="line">PNODE pTop;</div><div class="line">PNODE pBottom;</div><div class="line">&#125;STACK, * PSTACK;</div><div class="line"></div><div class="line"><span class="comment">//初始化栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</div><div class="line"><span class="comment">//压栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(PSTACK, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="comment">//输出栈中的数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(PSTACK)</span></span>;</div><div class="line"><span class="comment">//出栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(PSTACK, <span class="keyword">int</span>*)</span></span>;</div><div class="line"><span class="comment">//清空</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK)</span></span>;</div><div class="line"><span class="comment">//是否是空栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">STACK <span class="built_in">stack</span>;</div><div class="line"><span class="keyword">int</span> value;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">init(&amp;<span class="built_in">stack</span>);</div><div class="line"></div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">1</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">2</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">3</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">4</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">5</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">6</span>);</div><div class="line">print(&amp;<span class="built_in">stack</span>);</div><div class="line">clear(&amp;<span class="built_in">stack</span>);</div><div class="line"><span class="keyword">if</span>(pop(&amp;<span class="built_in">stack</span>, &amp;value))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"出栈成功！元素值为：%d\n"</span>, value);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"出栈失败！"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(&amp;<span class="built_in">stack</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line">pStack-&gt;pTop = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pStack-&gt;pTop)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">pStack-&gt;pBottom = pStack-&gt;pTop;</div><div class="line">pStack-&gt;pTop-&gt;data = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//压栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(PSTACK pStack, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="comment">//先造一个节点出来</span></div><div class="line">PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pNew)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">pNew-&gt;data = value;</div><div class="line">pNew-&gt;pNext = pStack-&gt;pTop;</div><div class="line">pStack-&gt;pTop = pNew;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出栈中的数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line">PNODE node = pStack-&gt;pTop;</div><div class="line"><span class="keyword">while</span>(node != pStack-&gt;pBottom)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, node-&gt;data);</div><div class="line">node = node-&gt;pNext;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//出栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(PSTACK pStack, <span class="keyword">int</span> * value)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(isEmpty(pStack))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"已经是空栈了\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//要出栈的节点</span></div><div class="line">PNODE node = pStack-&gt;pTop;</div><div class="line"><span class="comment">//出栈节点的值</span></div><div class="line">*value = node-&gt;data;</div><div class="line"><span class="comment">//pTop往下移一个</span></div><div class="line">pStack-&gt;pTop = node-&gt;pNext;</div><div class="line"><span class="comment">//释放出栈节点的内存</span></div><div class="line"><span class="built_in">free</span>(node);</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//是否是空栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> pStack-&gt;pTop == pStack-&gt;pBottom ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//清空</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line">PNODE p = pStack-&gt;pTop;</div><div class="line">PNODE q = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">while</span>(p != pStack-&gt;pBottom)&#123;</div><div class="line">q = p-&gt;pNext;</div><div class="line"><span class="comment">//释放内存</span></div><div class="line"><span class="built_in">free</span>(p);</div><div class="line">p = q;</div><div class="line">&#125;</div><div class="line">pStack-&gt;pTop = pStack-&gt;pBottom;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="顺序表栈"><a href="#顺序表栈" class="headerlink" title="顺序表栈"></a>顺序表栈</h3><p>顺序表栈，适合开口向左或向右的操作。顺序存储结构，采用数组实现。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/51749974.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月8日 上午9:37:53</div><div class="line"> * <span class="doctag">@remark</span> 数组结构的顺序栈</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 栈空间的大小</span></div><div class="line"><span class="keyword">private</span> T[] stackArray;<span class="comment">// 顺序栈，采用泛型确定栈空间的存放的数据类型</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> top; <span class="comment">// 栈顶指针</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">maxSize = size;</div><div class="line">stackArray = (T[]) <span class="keyword">new</span> Object[maxSize];</div><div class="line">top = -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 入栈</div><div class="line"> * <span class="doctag">@param</span> element</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">stackArray[++top] = element;</div><div class="line"><span class="keyword">if</span> (top &gt; (maxSize - <span class="number">1</span>))&#123;</div><div class="line">top = maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pretendedPush</span><span class="params">()</span> </span>&#123;</div><div class="line">++top;</div><div class="line"><span class="keyword">if</span> (top &gt; (maxSize - <span class="number">1</span>)) &#123;</div><div class="line">top = maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 出栈</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (top == -<span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> stackArray[top--];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 查看栈顶元素，但是不出栈</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> stackArray[top];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断栈是否空</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断栈是否满</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年4月5日 下午12:06:32</div><div class="line"> * <span class="doctag">@remark</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStack</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Stack&lt;Student&gt; stack = <span class="keyword">new</span> Stack&lt;Student&gt;(<span class="number">10</span>);</div><div class="line"></div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"张三"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"李四"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"王五"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"麻六"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"黑七"</span>));</div><div class="line"></div><div class="line">System.out.println(stack.pop().getName());</div><div class="line">System.out.println(stack.pop().getName());</div><div class="line">System.out.println(stack.pop().getName());</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="非线性结构-树"><a href="#非线性结构-树" class="headerlink" title="非线性结构-树"></a>非线性结构-树</h2><p>树形结构属于非线性结构，树中结点之间具有明确的层次关系，并且结点之间有分支。例如权限、行政组织、家谱等。树形结构最大的特点是：<strong>它是一个递归结构。</strong>度、深度、层数、左孩子、右孩子、森林之类的名词，这里不就再解释了。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/77582195.jpg" alt=""></p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树不仅仅只是在树形结构中非常重要，在实际问题解决过程中，往往也是转换为二叉树的形式解决的。<strong>例如像Java中的HashMap，抽象出来的数据结构是红黑树。TreeMap，抽象出来的数据结构是二叉排序树。</strong>关于定义，这里就不多说了。<strong>其最大的特点就是每个结点最多只有两棵子树。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/25345859.jpg" alt=""><br>二叉树的存储方式，分为顺序存储结构跟链式存储结构。顺序存储结构比较浪费空间，基本都是采用链式存储。<br>顺序存储结构是把二叉树补充成一个完全二叉树，添加一些实际上不存在的虚节点，从根节点开始，一层一层从左往右依次存放到顺序表中。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/24588966.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/71655698.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></div><div class="line"><span class="comment">//数据域</span></div><div class="line"><span class="keyword">char</span> data;</div><div class="line"><span class="comment">//左孩子</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> * <span class="title">pLeftChild</span>;</span></div><div class="line"><span class="comment">//右孩子</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> * <span class="title">pRightChild</span>;</span></div><div class="line">&#125;TREENODE, *PTREENODE;</div><div class="line"></div><div class="line"><span class="comment">//创建一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">//先序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printXianXu</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//中序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printZhongXu</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//后序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHouXu</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//计算深度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeDepth</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//得到所有的节点数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumNodes</span><span class="params">(PTREENODE rootNode)</span></span>;</div><div class="line"><span class="comment">//得到所有的叶子节点数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumLeafNodes</span><span class="params">(PTREENODE rootNode)</span></span>;</div><div class="line"><span class="comment">//copy一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">copyTree</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//使用#号创建法，创建一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree1</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> depth, sum, sumLeaf;</div><div class="line">PTREENODE tree;</div><div class="line"></div><div class="line">PTREENODE rootNode = createTree();</div><div class="line">printXianXu(rootNode);</div><div class="line"><span class="comment">//printZhongXu(rootNode);</span></div><div class="line"><span class="comment">//printHouXu(rootNode);</span></div><div class="line"></div><div class="line">depth = binTreeDepth(rootNode);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"树的深度为：%d\n"</span>, depth);</div><div class="line"></div><div class="line">sum = sumNodes(rootNode);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"树的节点总数为：%d\n"</span>, sum);</div><div class="line"></div><div class="line">sumLeaf = sumLeafNodes(rootNode);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"树的叶子节点总数为：%d\n"</span>, sumLeaf);</div><div class="line"></div><div class="line">tree = copyTree(rootNode);</div><div class="line">printXianXu(tree);</div><div class="line"></div><div class="line">tree = createTree1();</div><div class="line">printXianXu(tree);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree</span><span class="params">()</span></span>&#123;</div><div class="line">PTREENODE pNodeA = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeB = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeC = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeD = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeE = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line"></div><div class="line">pNodeA-&gt;data = <span class="string">'A'</span>;</div><div class="line">pNodeB-&gt;data = <span class="string">'B'</span>;</div><div class="line">pNodeC-&gt;data = <span class="string">'C'</span>;</div><div class="line">pNodeD-&gt;data = <span class="string">'D'</span>;</div><div class="line">pNodeE-&gt;data = <span class="string">'E'</span>;</div><div class="line"></div><div class="line">pNodeA-&gt;pLeftChild = pNodeB;</div><div class="line">pNodeA-&gt;pRightChild = pNodeC;</div><div class="line"></div><div class="line">pNodeB-&gt;pLeftChild = pNodeB-&gt;pRightChild = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">pNodeC-&gt;pLeftChild = pNodeD;</div><div class="line">pNodeC-&gt;pRightChild = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">pNodeD-&gt;pLeftChild = <span class="literal">NULL</span>;</div><div class="line">pNodeD-&gt;pRightChild = pNodeE;</div><div class="line"></div><div class="line">pNodeE-&gt;pLeftChild = pNodeE-&gt;pRightChild = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> pNodeA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//先序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printXianXu</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode)&#123;</div><div class="line"><span class="comment">//先序访问根节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, rootNode-&gt;data);</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pLeftChild)&#123;</div><div class="line"><span class="comment">//再先序访问左子树</span></div><div class="line">printXianXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pRightChild)&#123;</div><div class="line"><span class="comment">//再先序访问右子树</span></div><div class="line">printXianXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//中序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printZhongXu</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode)&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pLeftChild)&#123;</div><div class="line"><span class="comment">//中序访问左子树</span></div><div class="line">printZhongXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line"><span class="comment">//再中序访问根节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, rootNode-&gt;data);</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pRightChild)&#123;</div><div class="line"><span class="comment">//再中序访问右子树</span></div><div class="line">printZhongXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//后序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHouXu</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode)&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pLeftChild)&#123;</div><div class="line"><span class="comment">//后序访问左子树</span></div><div class="line">printHouXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pRightChild)&#123;</div><div class="line"><span class="comment">//再后序访问右子树</span></div><div class="line">printHouXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line"><span class="comment">//再后序访问根节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, rootNode-&gt;data);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//深度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeDepth</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> depL, depR;</div><div class="line"><span class="keyword">if</span>(rootNode ==<span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//计算左子树的深度</span></div><div class="line">depL = binTreeDepth(rootNode-&gt;pLeftChild);</div><div class="line"><span class="comment">//计算右子树的深度</span></div><div class="line">depR = binTreeDepth(rootNode-&gt;pRightChild);</div><div class="line"><span class="keyword">if</span>(depL &gt; depR)&#123;</div><div class="line"><span class="keyword">return</span> depL + <span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> depR + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//所有的节点</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumNodes</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> sumNodesL, sumNodesR;</div><div class="line"><span class="keyword">if</span>(rootNode ==<span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sumNodesL = sumNodes(rootNode-&gt;pLeftChild);</div><div class="line">sumNodesR = sumNodes(rootNode-&gt;pRightChild);</div><div class="line"><span class="keyword">return</span> sumNodesL + sumNodesR + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//得到所有的叶子节点数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumLeafNodes</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> sumNodesL, sumNodesR;</div><div class="line"><span class="keyword">if</span>(rootNode ==<span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(rootNode-&gt;pLeftChild == <span class="literal">NULL</span> &amp;&amp; rootNode-&gt;pRightChild == <span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sumNodesL = sumLeafNodes(rootNode-&gt;pLeftChild);</div><div class="line">sumNodesR = sumLeafNodes(rootNode-&gt;pRightChild);</div><div class="line"><span class="keyword">return</span> sumNodesL + sumNodesR;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//copy一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">copyTree</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line">PTREENODE newNode;</div><div class="line">PTREENODE leftNode;</div><div class="line">PTREENODE rightNode;</div><div class="line"><span class="keyword">if</span>(rootNode == <span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//copy左子树</span></div><div class="line"><span class="keyword">if</span>(rootNode-&gt;pLeftChild != <span class="literal">NULL</span>)&#123;</div><div class="line">leftNode = copyTree(rootNode-&gt;pLeftChild);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">leftNode = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//copy右子树</span></div><div class="line"><span class="keyword">if</span>(rootNode-&gt;pRightChild != <span class="literal">NULL</span>)&#123;</div><div class="line">rightNode = copyTree(rootNode-&gt;pRightChild);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">rightNode = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个新节点</span></div><div class="line">newNode = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">newNode-&gt;pLeftChild = leftNode;</div><div class="line">newNode-&gt;pRightChild = rightNode;</div><div class="line">newNode-&gt;data = rootNode-&gt;data;</div><div class="line"><span class="keyword">return</span> newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">//二叉树的非递归遍历算法</div><div class="line">void inorder(PTREENODE rootNode)&#123;</div><div class="line">//辅助指针变量</div><div class="line">PTREENODE node;</div><div class="line">//初始化一个栈</div><div class="line">STACK stack;</div><div class="line">init(&amp;stack);</div><div class="line">//把根节点压栈</div><div class="line">push(&amp;stack, rootNode);</div><div class="line">//栈不为空，就一直循环。知道栈为空</div><div class="line">while(!isEmpty(&amp;stack))&#123;</div><div class="line">//栈顶的元素不给空，则一直循环</div><div class="line">while(getTop(&amp;stack)&#123;</div><div class="line">//把左子树一直压入栈中</div><div class="line">push(&amp;stack, getTop(&amp;stack)-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line">//执行到这里，说明栈顶是一个NULL元素。左子树为空的节点</div><div class="line">//把栈顶的空元素，出栈</div><div class="line">node = pop(&amp;stack);</div><div class="line">//栈不为空时，说明还没有结束</div><div class="line">if(!isEmpty(&amp;stack))&#123;</div><div class="line">//左子树没有，访问根节点。栈顶的那个元素则是根节点</div><div class="line">printf("%c\n", getTop(&amp;stack)-&gt;data);</div><div class="line">//访问完根节点，根节点则出栈</div><div class="line">node = pop(&amp;stack);</div><div class="line">//把右子树压入栈中。执行完这一句，则进行下一个循环了。</div><div class="line">push(&amp;stack, node-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="comment">//使用#号创建法，创建一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree1</span><span class="params">()</span></span>&#123;</div><div class="line">PTREENODE node = <span class="literal">NULL</span>;</div><div class="line">PTREENODE leftNode = <span class="literal">NULL</span>;</div><div class="line">PTREENODE rightNode = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">char</span> ch;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</div><div class="line"><span class="comment">//#号，则不创建树节点</span></div><div class="line"><span class="keyword">if</span>(ch == <span class="string">'#'</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//创建一个节点</span></div><div class="line">node = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">node-&gt;data = ch;</div><div class="line">node-&gt;pLeftChild = createTree1();</div><div class="line">node-&gt;pRightChild = createTree1();</div><div class="line"><span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="B树、B-树"><a href="#B树、B-树" class="headerlink" title="B树、B+树"></a>B树、B+树</h3><p>平衡多路查找树，不是很懂，只知道常用于文件系统。可以参阅<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">《MySQL索引背后的数据结构及算法原理》</a>一文。</p><h3 id="树、森林与二叉树的转换"><a href="#树、森林与二叉树的转换" class="headerlink" title="树、森林与二叉树的转换"></a>树、森林与二叉树的转换</h3><p>把树或森林转换成成对应的二叉树。<strong>其转换成二叉树的核心思想是二叉树的结点，左边挂孩子，右边挂兄弟。把二叉树还原成对应的树或森林，也是用同样的原理去还原即可。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/55143497.jpg" alt=""></p><h2 id="非线性结构-图"><a href="#非线性结构-图" class="headerlink" title="非线性结构-图"></a>非线性结构-图</h2><p>图的算法比较复杂，了解了一些概念以及图常用算法的原理。并没有写出代码。<br>有向图、无向图、强连通图、存储结构的邻接矩阵和邻接表、遍历算法的深度优先和广度优先、最小生成树的普利姆算法及克鲁斯卡尔算法、最短路径的迪杰斯特拉算法、拓扑排序等。了解一下这些概念，并能在纸上能够大致画出过程图。还真总结不出什么。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在写Java中的容器时，有写到一些关于数据结构的部分，可以参考&lt;a href=&quot;http://dhsmp.com/2017/06/29/list-set-map/&quot;&gt;《Java的List、Set、Map容器》&lt;/a&gt;一文。这里再详细回顾一下对数据结构的学习。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebService、RPC、微服务的一些认知</title>
    <link href="http://dhsmp.com/2018/01/25/webservice-summary/"/>
    <id>http://dhsmp.com/2018/01/25/webservice-summary/</id>
    <published>2018-01-25T07:39:45.742Z</published>
    <updated>2018-01-29T06:58:58.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨系统间的数据交互"><a href="#跨系统间的数据交互" class="headerlink" title="跨系统间的数据交互"></a>跨系统间的数据交互</h2><p>在<a href="http://dhsmp.com/2017/10/30/evolution/">《应用的变迁》</a>中提到过，随着大量垂直应用系统的诞生。各异构系统之间的通信、交换数据成为需求。同一个应用会有不同的客户端访问,或者不同的应用之间也会相互调用服务。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-25/62279051.jpg" alt=""></p><h3 id="Socket通信原理图"><a href="#Socket通信原理图" class="headerlink" title="Socket通信原理图"></a>Socket通信原理图</h3><p><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/48667679.jpg" alt=""><br>通过IE来访问SocketServer，可以参考<a href="http://dhsmp.com/2017/07/04/http-protocol/">《HTTP协议详解与回顾》</a>一文。程序员都是一群爱偷懒的人，能否在基于socket通信的基础上，进行改进，形成统一的标准、简化操作、更快速的进行业务开发。Web Service就这样产生了。</p><h2 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h2><h3 id="WebService概念介绍"><a href="#WebService概念介绍" class="headerlink" title="WebService概念介绍"></a>WebService概念介绍</h3><p>简单一句话使部署在Web服务器上的应用程序，向外界暴露出一个能够过Web方式访问的API，来进行数据的交互，达到异构平台的互通性。所谓的异构平台，是指Java语言开发的应用程序暴露出来的服务能够被C++语言开发的应用程序无障碍的进行数据交互。</p><h3 id="WebService的规则"><a href="#WebService的规则" class="headerlink" title="WebService的规则"></a>WebService的规则</h3><ul><li>xml:soap消息使用xml进行序列化，该协议通常由http协议承载。</li><li>soap：simple object access协议，简单对象访问协议。由http协议承载。<strong>需要注意的是Map、泛型类对象无法进行传输。</strong></li><li>wsdl：WebService描述语言，它也是xml实现的。服务接口描述。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/30707688.jpg" alt=""><h3 id="WebService的四种访问方式"><a href="#WebService的四种访问方式" class="headerlink" title="WebService的四种访问方式"></a>WebService的四种访问方式</h3>soap1.1、soap1.2、http-get、http-post<h3 id="wsimport"><a href="#wsimport" class="headerlink" title="wsimport"></a>wsimport</h3><strong>WebService的推荐访问方式。该方式是对远程的WebService生产本地代理，再通过代理来访问WebService。</strong></li></ul><p><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/82157443.jpg" alt=""></p><h3 id="使用wsimport命令的要求"><a href="#使用wsimport命令的要求" class="headerlink" title="使用wsimport命令的要求"></a>使用wsimport命令的要求</h3><ul><li>jdk版本要在jdk1.6.21及以上</li><li>操作系统安装的jdk版本与eclipse默认指定的版本要一致<h4 id="wsimport的使用"><a href="#wsimport的使用" class="headerlink" title="wsimport的使用"></a>wsimport的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">语法：wsimport [options] &lt;wsdl_uri&gt;</div><div class="line">-wsdl_uri：wsdl的统一资源标识符</div><div class="line">-d：指定要输出文件的位置</div><div class="line">-s：表示要解析Java的源码，默认解析出来的是class字节码文件</div><div class="line">-p：指定输出的包名</div></pre></td></tr></table></figure></li></ul><p><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/97679618.jpg" alt=""></p><h3 id="Java对于webservice的支持"><a href="#Java对于webservice的支持" class="headerlink" title="Java对于webservice的支持"></a>Java对于webservice的支持</h3><p><strong>JAX-WS</strong>：JAX-WS(Java API for XML Web Services)规范是一组XML web services的JAVA API，JAX-WS允许开发者可以选择RPC-oriented或者message-oriented 来实现自己的web services。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/32535688.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/39955148.jpg" alt=""></p><h3 id="以注解的方式自定义发布WebService服务"><a href="#以注解的方式自定义发布WebService服务" class="headerlink" title="以注解的方式自定义发布WebService服务"></a>以注解的方式自定义发布WebService服务</h3><ul><li>在需要对外提供服务的业务类上声明注解@WebService</li><li>通过Endpoint类的静态方法发布一个WebService服务<br>Endpoint.publish(address, implementor);<br>address：发布的服务地址<br>implementor：服务的实现对象<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/39057037.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/61959864.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/25618179.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/42796566.jpg" alt=""><br>第一次解析出错，是因为我本地设置了代理服务器IP。取消代理即可解析成功。</li><li>生成jar包，使用jar -cvf jar包名.jar 清单文件所在的文件名<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/10818542.jpg" alt=""><br>该命令会把生成的jar包直接放在控制台的路径中，如需要更改导出路径，需要进入指定路径，再执行jar命令。</li><li>测试一下所发布的服务<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/63053388.jpg" alt=""><h3 id="WDSL文件介绍"><a href="#WDSL文件介绍" class="headerlink" title="WDSL文件介绍"></a>WDSL文件介绍</h3>该文件的阅读是从下往上看。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/19062009.jpg" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">service name：服务名</div><div class="line">tns:是targetNameSpace的缩写，tns都能找到详细定义</div><div class="line">port name：服务的访问方式</div><div class="line">binding name：绑定名</div><div class="line">type：对外提供WebService业务类的类名或者接口名</div><div class="line">transport：传输方式，访问方式</div><div class="line">operation name：对外提供WebService的方法名</div><div class="line">input message：输入参数</div><div class="line">output message：输出参数</div></pre></td></tr></table></figure></li></ul><h3 id="常用注解说明"><a href="#常用注解说明" class="headerlink" title="常用注解说明"></a>常用注解说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebService</span>：使用该注解发布服务时，默认是只对<span class="keyword">public</span>修饰的方法进行发布。</div><div class="line">serviceName：更改发布的服务名</div><div class="line">targetNamespace：更改目标命名空间</div><div class="line"><span class="meta">@WebMethod</span>：修饰方法的注解</div><div class="line">operationName：更改访问方法名</div><div class="line">exclude：是否排除发布</div><div class="line"><span class="meta">@WebResult</span>：修饰方法的返回值</div><div class="line">name：更改显示返回值的名称</div><div class="line"><span class="meta">@WebParam</span>：修饰方法的参数</div><div class="line">name：更改显示参数的名称</div></pre></td></tr></table></figure><h3 id="发布具有WebService服务的接口流程："><a href="#发布具有WebService服务的接口流程：" class="headerlink" title="发布具有WebService服务的接口流程："></a>发布具有WebService服务的接口流程：</h3><ul><li>在接口类中声明@WebService注解。</li><li>在接口类的实现类中也必须声明@WebService注解，并设置服务端点接口，指定对外提供服务的接口。endpointInterface=”接口类的全路径”。</li><li>对服务方法发布有所更改的，在接口类中进行注解配置。<h3 id="通过CXF框架发布WebService"><a href="#通过CXF框架发布WebService" class="headerlink" title="通过CXF框架发布WebService"></a>通过CXF框架发布WebService</h3></li><li>ServerFactoryBean发布服务：使用该类不设置注解也可以发布WebService服务，不支持注解，不支持拦截器的添加。</li><li>JaxWsServerFactoryBean发布服务：该类支持注解，可以添加拦截器。<h4 id="WebService访问流程：通过CXF发布的服务"><a href="#WebService访问流程：通过CXF发布的服务" class="headerlink" title="WebService访问流程：通过CXF发布的服务"></a>WebService访问流程：通过CXF发布的服务</h4></li><li>检测本地代理描述的WSDL是否与服务端的WSDL一致，俗称握手。</li><li>通过soap协议实现通信，采用post请求，数据封装在满足soap规约的xml中。</li><li>返回数据同样采用soap通信，数据封装在满足soap规约的xml中。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/34644835.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-1-26/60610835.jpg" alt=""><h3 id="CXF与Spring框架整合发布WebService"><a href="#CXF与Spring框架整合发布WebService" class="headerlink" title="CXF与Spring框架整合发布WebService"></a>CXF与Spring框架整合发布WebService</h3></li><li>web.xml的文件配置。由CXFServlet处理（项目名/ws/*）的访问请求。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/55641320.jpg" alt=""></li><li>spring的applicationContext.xml文件配置。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/78332494.jpg" alt=""></li><li>服务接口<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/32257812.jpg" alt=""></li><li>查看发布的服务说明<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/93501552.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/20178194.jpg" alt=""></li><li>发布成功，即可按照wsimport命令生成本地服务代理，在本地项目中访问远程服务<h2 id="RPC框架原理"><a href="#RPC框架原理" class="headerlink" title="RPC框架原理"></a>RPC框架原理</h2>RPC，它是一种进程间的通信方式。允许像调用本地服务一样调用远程服务。<strong>这里说明一下进程间的通信方式，在我们熟知的操作系统中（Windows、Linux），一个进程想要直接跟另一个进程进行数据交互，是禁止的，安全壁垒。但是在Android系统中，它提供了另外一种方式JNI，这是笔者目前所认知到唯一一种操作系统，提供跨进程通信的方式。</strong>这里不在细谈。回到主题，RPC框架的目标是让远程服务调用更加简单、透明。跟WebService一样，屏蔽底层的操作细节。<h3 id="核心技术点"><a href="#核心技术点" class="headerlink" title="核心技术点"></a>核心技术点</h3></li><li>服务调用相关信息，相当于API说明。类似于WebService的WSDL文件，描述所发布的服务。</li><li>远程代理对象。服务调用者调用的服务实际是远程服务的本地代理。</li><li>RPC框架通信与具体的协议无关。</li><li>远程通信需要将数据对象转换成二进制码流进行网络传输，就需要进行序列化。序列化框架的选择。<h2 id="简单的RPC框架实现"><a href="#简单的RPC框架实现" class="headerlink" title="简单的RPC框架实现"></a>简单的RPC框架实现</h2>基于Java原生的序列化接口、socket通信、动态代理、反射机制，来实现一个最简单的RPC框架。<h3 id="RPC服务端代码："><a href="#RPC服务端代码：" class="headerlink" title="RPC服务端代码："></a>RPC服务端代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> rpc.exporter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Company</span> </div><div class="line"> * <span class="doctag">@author</span> dhs</div><div class="line"> * <span class="doctag">@date</span> 2017年1月31日 下午7:58:27</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span> 服务端提供者</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcExporter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// 获取固定的线程池</span></div><div class="line"><span class="keyword">static</span> Executor executor = Executors.newFixedThreadPool(Runtime</div><div class="line">.getRuntime().availableProcessors());</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exporter</span><span class="params">(String hostName, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket();</div><div class="line">server.bind(<span class="keyword">new</span> InetSocketAddress(hostName, port));</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">executor.execute(<span class="keyword">new</span> ExecutorTask(server.accept()));</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">server.close();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现子线程的内部类，用于接收指定主机与端口的服务处理。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">Socket client = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExecutorTask</span><span class="params">(Socket client)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.client = client;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">ObjectInputStream input = <span class="keyword">null</span>;</div><div class="line">ObjectOutputStream output = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// 从远处客户端的socket中获取对象输入流</span></div><div class="line">input = <span class="keyword">new</span> ObjectInputStream(client.getInputStream());</div><div class="line"><span class="comment">// 获取接口类名</span></div><div class="line">String interfaceName = input.readUTF();</div><div class="line">Class&lt;?&gt; service = Class.forName(interfaceName);</div><div class="line">System.out.println(interfaceName);</div><div class="line"><span class="comment">// 获取接口方法名</span></div><div class="line">String methodName = input.readUTF();</div><div class="line">System.out.println(methodName);</div><div class="line"><span class="comment">// 获取接口方法的参数类型</span></div><div class="line">Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[]) input.readObject();</div><div class="line"><span class="comment">// 获取接口方法的参数值</span></div><div class="line">Object[] arguments = (Object[]) input.readObject();</div><div class="line"><span class="comment">// 反射出需要执行的方法</span></div><div class="line">Method method = service.getMethod(methodName, parameterTypes);</div><div class="line"><span class="comment">// 执行该方法并获取结果</span></div><div class="line">Object result = method.invoke(service.newInstance(), arguments);</div><div class="line"></div><div class="line">output = <span class="keyword">new</span> ObjectOutputStream(client.getOutputStream());</div><div class="line">output.writeObject(result);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="comment">//关流</span></div><div class="line"><span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">input.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (output != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">output.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">client.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> rpc.service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Company</span>  </div><div class="line"> * <span class="doctag">@author</span>   dhs</div><div class="line"> * <span class="doctag">@date</span>     2017年1月31日 下午7:50:01</div><div class="line"> * <span class="doctag">@version</span>  1.0</div><div class="line"> * <span class="doctag">@description</span>  服务提供者的接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EchoService</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String ping)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> rpc.service.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> rpc.service.EchoService;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Company</span>  </div><div class="line"> * <span class="doctag">@author</span>   dhs</div><div class="line"> * <span class="doctag">@date</span>     2017年1月31日 下午6:59:51</div><div class="line"> * <span class="doctag">@version</span>  1.0</div><div class="line"> * <span class="doctag">@description</span>  服务提供者的接口实现类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServiceImpl</span> <span class="keyword">implements</span> <span class="title">EchoService</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String ping)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> ping != <span class="keyword">null</span> ? ping + <span class="string">"---&gt;I am OK"</span>:<span class="string">"I am OK"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> rpc;</div><div class="line"></div><div class="line"><span class="keyword">import</span> rpc.exporter.RpcExporter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Company</span> </div><div class="line"> * <span class="doctag">@author</span> dhs</div><div class="line"> * <span class="doctag">@date</span> 2017年1月31日 下午10:00:06</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span>服务端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcTest</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//子线程启动服务端</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">RpcExporter.exporter(<span class="string">"localhost"</span>, <span class="number">8088</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="RPC客户端代码："><a href="#RPC客户端代码：" class="headerlink" title="RPC客户端代码："></a>RPC客户端代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> rpc.importer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Company</span> </div><div class="line"> * <span class="doctag">@author</span> dhs</div><div class="line"> * <span class="doctag">@date</span> 2017年1月31日 下午9:41:13</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span>RPC客户端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcImporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">importer</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; serviceClass, <span class="keyword">final</span> InetSocketAddress addr)</span> </span>&#123;</div><div class="line"><span class="comment">//采用JDK的动态代理返回代理对象。参数一：类加载器。参数二：基于接口产生代理对象。参数三：执行方法。</span></div><div class="line"><span class="keyword">return</span> (T) Proxy.newProxyInstance(serviceClass.getClassLoader(),</div><div class="line"><span class="keyword">new</span> Class&lt;?&gt;[] &#123; serviceClass.getInterfaces()[<span class="number">0</span>] &#125;,</div><div class="line"><span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method,</span></span></div><div class="line">Object[] args) <span class="keyword">throws</span> Throwable &#123;</div><div class="line">Socket socket = <span class="keyword">null</span>;</div><div class="line">ObjectInputStream input = <span class="keyword">null</span>;</div><div class="line">ObjectOutputStream output = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">socket = <span class="keyword">new</span> Socket();</div><div class="line"><span class="comment">//远程连接通信</span></div><div class="line">socket.connect(addr);</div><div class="line">output = <span class="keyword">new</span> ObjectOutputStream(socket</div><div class="line">.getOutputStream());</div><div class="line">output.writeUTF(serviceClass.getName());</div><div class="line">output.writeUTF(method.getName());</div><div class="line">output.writeObject(method.getParameterTypes());</div><div class="line">output.writeObject(args);</div><div class="line">input = <span class="keyword">new</span> ObjectInputStream(socket</div><div class="line">.getInputStream());</div><div class="line"><span class="keyword">return</span> input.readObject();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</div><div class="line">socket.close();</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</div><div class="line">input.close();</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (output != <span class="keyword">null</span>) &#123;</div><div class="line">output.close();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> rpc.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</div><div class="line"></div><div class="line"><span class="keyword">import</span> rpc.importer.RpcImporter;</div><div class="line"><span class="keyword">import</span> rpc.service.EchoService;</div><div class="line"><span class="keyword">import</span> rpc.service.impl.EchoServiceImpl;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@Company</span> </div><div class="line"> * <span class="doctag">@author</span> dhs</div><div class="line"> * <span class="doctag">@date</span> 2017年1月31日 下午10:10:06</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@description</span>客户端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcTest</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">RpcImporter&lt;EchoService&gt; importer = <span class="keyword">new</span> RpcImporter&lt;EchoService&gt;();</div><div class="line">EchoService echoService = importer.importer(EchoServiceImpl.class,</div><div class="line"><span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8088</span>));</div><div class="line">System.out.println(echoService.echo(<span class="string">"Are you OK?"</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试通信"><a href="#测试通信" class="headerlink" title="测试通信"></a>测试通信</h3><ul><li>需要在客户端项目，导入服务端生成的jar包。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/41366947.jpg" alt=""></li><li>启动服务端项目。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/73065128.jpg" alt=""></li><li>客户端与服务端通信。<br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/53691411.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/26654410.jpg" alt=""><h2 id="微服务中消费者远程服务调用流程"><a href="#微服务中消费者远程服务调用流程" class="headerlink" title="微服务中消费者远程服务调用流程"></a>微服务中消费者远程服务调用流程</h2><img src="http://orxmumro7.bkt.clouddn.com/18-1-29/9800675.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跨系统间的数据交互&quot;&gt;&lt;a href=&quot;#跨系统间的数据交互&quot; class=&quot;headerlink&quot; title=&quot;跨系统间的数据交互&quot;&gt;&lt;/a&gt;跨系统间的数据交互&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://dhsmp.com/2017/10/30/evol
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis的总结与回顾</title>
    <link href="http://dhsmp.com/2017/12/16/redis-summary/"/>
    <id>http://dhsmp.com/2017/12/16/redis-summary/</id>
    <published>2017-12-16T03:32:28.220Z</published>
    <updated>2018-02-14T12:41:43.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关系型数据库（Mysql、Oracle）"><a href="#关系型数据库（Mysql、Oracle）" class="headerlink" title="关系型数据库（Mysql、Oracle）"></a>关系型数据库（Mysql、Oracle）</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>数据之间有关系，进行数据的操作时非常方便。</li><li>有事务操作，保证了数据的完整性。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>因为数据和数据之间有关系的，而这种关系是由底层大量算法所保证。</li><li>数据的存储与使用，访问量大时IO的资源消耗较大。</li><li>大量算法会拉低系统的运行速度，并且会消耗系统资源。</li><li>在海量数据的增删改查时会显得无能为力，很可能会宕机。</li><li>在海量数据环境下对数据表进行维护、扩展，也会变得无能为力<br>例如：<br>update product set cname = ‘手机数码’;//修改所有数据<br>把商品表的cname字段，由varchar(64),char(100);//更改表字段属性<h2 id="非关系型数据库（NoSQL）"><a href="#非关系型数据库（NoSQL）" class="headerlink" title="非关系型数据库（NoSQL）"></a>非关系型数据库（NoSQL）</h2>No不是单词no，是not only的缩写。设计之初是为了替代关系型数据库。足见其野心。<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3></li><li>海量数据的增删改查，非常轻松</li><li>海量数据的维护非常轻松<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3></li><li>数据与数据之间没有关系，所以不能一目了然</li><li>没有强大的事务，保证数据的完整和安全<h2 id="redis概述"><a href="#redis概述" class="headerlink" title="redis概述"></a>redis概述</h2>key-value结构的数据，类似Java中的Map，默认占用6379端口。共有5钟数据类型。string、hash、list、set、有序的set集合。<h2 id="redis在Linux中的安装"><a href="#redis在Linux中的安装" class="headerlink" title="redis在Linux中的安装"></a>redis在Linux中的安装</h2><h3 id="redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc"><a href="#redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc" class="headerlink" title="redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc"></a>redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/40941534.jpg" alt=""><br>如果提示”bash: gcc: command not found”，则需要安装gcc环境。<br>命令：yum install gcc-c++<br>如果提示是否下载，输入y。<br>如果提示是否安装，输入y。<h3 id="把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译"><a href="#把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译" class="headerlink" title="把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译"></a>把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/50559517.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/68840915.jpg" alt=""><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/58240855.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/30177891.jpg" alt=""><h3 id="拷贝配置文件至安装目录中"><a href="#拷贝配置文件至安装目录中" class="headerlink" title="拷贝配置文件至安装目录中"></a>拷贝配置文件至安装目录中</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/3039823.jpg" alt=""><br><strong>redis启动需要一个配置文件，可以修改端口号等配置。如果没有配置文件redis也可以启动，启用的是默认配置，不方修改端口号等配置。</strong><h3 id="bin文件夹下的文件"><a href="#bin文件夹下的文件" class="headerlink" title="bin文件夹下的文件"></a>bin文件夹下的文件</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/24933226.jpg" alt=""><br><strong>redis-benchmark        —-性能测试工具<br>redis-check-aof        —-AOF文件修复工具<br>redis-check-dump    —-RDB文件检查工具（快照持久化文件）<br>redis-cli            —-命令行客户端<br>redis-server        —-redis服务器启动命令</strong><h3 id="前端启动服务"><a href="#前端启动服务" class="headerlink" title="前端启动服务"></a>前端启动服务</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/91327662.jpg" alt=""><br><strong>该启动方式有硬伤：无法进行集群部署</strong><h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/25163537.jpg" alt=""><br><strong>可以在上图的命令中加入参数 -h ip地址 -p 端口进行指定连接</strong><h3 id="后端启动服务"><a href="#后端启动服务" class="headerlink" title="后端启动服务"></a>后端启动服务</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/45080117.jpg" alt=""><br>修改redis.conf配置文件的daemonize为yes即可<br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/42130847.jpg" alt=""><br>如果无法启动修改配置supervised yes为supervised no。按上图进行后端启动。<h2 id="redis的5种数据类型"><a href="#redis的5种数据类型" class="headerlink" title="redis的5种数据类型"></a>redis的5种数据类型</h2><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/45206447.jpg" alt=""><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3>字符串类型是redis中最为基础、常用的数据存储类型，<strong>它在redis中是二进制安全的</strong>，value最多可以容纳的数据长度是512M。<br>二进制安全和数据安全是没有关系的。<br>关系型数据库，二进制是不安全的。会出现乱码丢失数据。编解码频繁。<br>以MySQL为例，它能指定数据的存储的字符集。服务器在拿到表中的数据时，很可能因为解码的码表不一致，导致出现数据的乱码。<br>redis直接存储的二进制数据，不会对数据再进行编解码操作。<h4 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">set key value：赋值、修改操作，key相同则覆盖，新值覆盖旧值。</div><div class="line">del key：删除成功返回1（integer），key不存在返回0（integer）</div><div class="line">getset key value：先取后赋值</div><div class="line">incr key：递增1，非数字则报错</div><div class="line">decr key：递减1，非数字则报错</div><div class="line">append key value：类似StringBuffer的append</div><div class="line">incrby key number：递增指定的数值</div><div class="line">decrby key number：递减指定的数值</div></pre></td></tr></table></figure></li></ul><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/99156695.jpg" alt=""></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash类型可以看成是具有String key和String value的map容器。非常适合于存储值对象的信息。占用的磁盘空间极少。其表现形式是{uname:”zhangsna”,age:”19”,sex:”man”}</p><h4 id="常用的命令-1"><a href="#常用的命令-1" class="headerlink" title="常用的命令"></a>常用的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hset key field value：赋值操作，为key的某个字段赋值。</div><div class="line">hset key field value [field2 value2 ...]：为key的多个字段进行赋值。</div><div class="line">hmget key field1 field2 ...：获取key中多个field的值</div><div class="line">hgetall key：获取key中所有的filed-value</div><div class="line">del key：删除整个hash</div><div class="line">hkeys key：获取key所有的filed</div><div class="line">hvals key：获取key所有的value</div></pre></td></tr></table></figure><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/41605092.jpg" alt=""></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>链表结构，redis的操作中，最多的操作就是进行元素的增删，它的使用环境是做大数据集合的增删、任务队列。关于链表结构，可查看<a href="http://dhsmp.com/2017/06/29/list-set-map/">《Java的List、Set、Map容器》</a>一文</p><h4 id="常用的命令-2"><a href="#常用的命令-2" class="headerlink" title="常用的命令"></a>常用的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lpush key value [value2 ...]：赋值，从左侧开始添加（每次添加都是从左侧开始）</div><div class="line">rpush key value [value2 ...]：赋值，从右侧开始添加（每次添加都是从右侧开始）</div><div class="line">lrange key start end：获取key链表中从start到end的元素值（含头又含尾）。start为0，end为-1时，表示取整个链表的元素值。</div><div class="line">lpop key：从左侧开始删除</div><div class="line">rpop key：从右侧开始删除</div><div class="line">llen key：返回指定的key关联的链表中元素数量</div><div class="line">rpoplpush source destination：将链表中的尾部元素弹出并添加到头部（循环）</div></pre></td></tr></table></figure><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/35379556.jpg" alt=""></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>在redis中，可以将set类型看作为没有排序的字符集合。set可包含的最大元素数量是4294967295。set集合中不允许出现重复的元素，可在服务端完成多个set之间的聚合计算操作。效率极高。</p><h4 id="常用的命令-3"><a href="#常用的命令-3" class="headerlink" title="常用的命令"></a>常用的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sadd key value [value2 ...]：赋值</div><div class="line">smembers key：获取set集合key中所有的成员</div><div class="line">sismember key member：判断参数中指定的成员是否在该set中，返回1表示存在、0表示不存在</div><div class="line">srem key member [member2 ...]：删除set中指定的成员</div><div class="line">sdiff key1 key2 ...：返回key1与key2中相差的成员，而且与key的顺序有关。返回差集</div><div class="line">sinter key1 key2 ...：返回交集</div><div class="line">sunion key1 key2 ...：返回并集</div><div class="line">scard key：获取set集合key中成员的数量</div><div class="line">srandmember key：随机返回set中的一个成员</div><div class="line">sdiffstore destination key1 key2 ...：将返回的差集成员存储在destination上</div><div class="line">sunionstore destination key1 key2 ...：将返回的差集成员存储在destination上</div></pre></td></tr></table></figure><h3 id="有序set"><a href="#有序set" class="headerlink" title="有序set"></a>有序set</h3><p>有序，不重复。在集合元素上分配分数，每个元素都需要手动赋予一个分数。</p><h4 id="常用的命令-4"><a href="#常用的命令-4" class="headerlink" title="常用的命令"></a>常用的命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">zadd key score member score2 member ...：赋值</div><div class="line">zscore key member：返回指定成员的分数</div><div class="line">zrange key start end [withscores]：获取集合中角标为start-end的成员，分数由小到大</div><div class="line">zrevrange key start end [withscores]：获取集合中角标为start-end的成员，分数由大到小</div><div class="line">zrem key member [member2 ...]：移除集合中指定的成员</div><div class="line">zremrangebyrank key start stop：按照排名范围删除元素</div><div class="line">zremrangebyscore key min max：按照分数范围删除元素</div><div class="line">zcount key min max：获取分数在min-max之间的成员</div><div class="line">zrank key member：返回成员在集合中排名，索引从小到大</div><div class="line">zrevrank key member：返回成员在集合中的排序，索引从大到小</div></pre></td></tr></table></figure><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">keys *：*号表示0个或多个任意字符</div><div class="line">keys ?：?号表示1个字符（任意）</div><div class="line">del key1 key2 ...：删除对应的key</div><div class="line">exists key：判断key是否存在，1表示存在，0表示不存在</div><div class="line">rename key newkey：为key重命名</div><div class="line">type key：获取指定key的值类型</div><div class="line">expire key：设置key的生存时间</div><div class="line">ttl key：查看key所剩的超时时间。如果没有设置超时，返回-1。如果返回-2，表示超时不存在。</div><div class="line">quit：退出客户端</div><div class="line">dbsize：返回当前数据库中key的数目</div><div class="line">info：查看redis的信息</div></pre></td></tr></table></figure><h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><p>subscribe channel：订阅频道<br>psubscribe channel*：批量订阅频道，*是通配符，订阅以channel部分的值为开头的频道<br>publish channel content：在指定的频道中发布消息</p><h2 id="多数据库"><a href="#多数据库" class="headerlink" title="多数据库"></a>多数据库</h2><p>redis默认有16个数据库，名称从0、1、2…15。在redis上所做的所有数据操作，默认在0号数据库上操作的。命令config get databases可查看数据的个数。<strong>数据库和数据库之间，是不能共享键值对。</strong>命令select 数据库名，切换数据库。move key dbname：将当前库的key移植到指定的数据库中。flushdb，清空当前数据库。flushall，清空redis服务器的数据。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>关系型数据库的事务，是为了保证数据的完整性、保证数据安全。可查看<a href="http://dhsmp.com/2017/07/13/database-transaction/">《关系型数据库的事务》</a>一文。<br>redis的事务，是为了进行redis语句的批量执行。<br>multi：开启事务，用于标记事务的开始，其后执行的命令都将被存入命令队列。<br>exec：提交事务，执行批量化操作<br>discard：事务回滚，不执行批量化操作</p><h2 id="redis的两种持久化策略"><a href="#redis的两种持久化策略" class="headerlink" title="redis的两种持久化策略"></a>redis的两种持久化策略</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>redis默认的持久化机制。安装目录下的dump.rdb文件。相当于照快照，保存的是一种状态。<br>优点：快照保存速度极快，还原数据速度极快。适用灾难备份。<br>缺点：小内存机器不适合使用。<br>RDB机制，符合要求就会照快照（随时随地启动），会占用一部分系统资源（突然的），很可能内存不足直接宕机。适用于内存<br>服务器正常关闭时，照快照。./bin/redis-cli shutdown<br>key满足一定条件，照快照。</p><p>redis.conf的配置，第二列是时间（秒），第三列是发生变化的key的个数。达到，则会在时间到达后照快照。<br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/72603207.jpg" alt=""></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>使用日志功能保存数据操作。默认AOF机制是关闭的。<strong>AOF操作，只会保存导致对应key发生变化的语句（增、删。改），保存的是语句不是数据。</strong>一个key在操作中可能出现10次的变化，如key保存的value变了，日志就会有对应的每次发生变化的语句。<br>优点：持续占用极少量的内存资源。<br>缺点：日志文件会特别大，不适用于灾难恢复。数据恢复效率远远低于RDB，适用于内存较小的计算机。</p><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/7326511.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">redis.conf文件中把appendonly no修改为appendonly yes，开启AOF机制</div><div class="line">appendfsync always--每修改同步，只要有key变化语句，就进行AOF保存数据。比较安全，浪费效率</div><div class="line">appendfsync everysec--每秒进行一次AOF保存数据。安全性低，节省系统资源（默认机制）</div><div class="line">appendfsync no--不同步，不进行任何持久化操作。不安全</div></pre></td></tr></table></figure></p><h2 id="Java中访问redis"><a href="#Java中访问redis" class="headerlink" title="Java中访问redis"></a>Java中访问redis</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p><img src="http://orxmumro7.bkt.clouddn.com/18-2-14/60737077.jpg" alt=""></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> redis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span> </div><div class="line"> * <span class="doctag">@version</span> 1.0,2017年8月19日 下午6:11:25,Denghs</div><div class="line"> * <span class="doctag">@remark</span> </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJedisConnection</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">poolConnection();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 单实例连接redis数据库</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">instanceConnection</span><span class="params">()</span></span>&#123;</div><div class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"192.168.17.128"</span>, <span class="number">6379</span>);</div><div class="line"><span class="comment">//jedis.set("name", "王五");</span></div><div class="line">System.out.println(jedis.get(<span class="string">"name"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 池连接技术</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">poolConnection</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//连接池配置</span></div><div class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line"><span class="comment">//最大连接总数</span></div><div class="line">config.setMaxTotal(<span class="number">50</span>);</div><div class="line"><span class="comment">//最大闲置连接数</span></div><div class="line">config.setMaxIdle(<span class="number">10</span>);</div><div class="line"><span class="comment">//Jedis连接池</span></div><div class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">"192.168.17.128"</span>, <span class="number">6379</span>);</div><div class="line"><span class="comment">//获取连接资源</span></div><div class="line">Jedis jedis = jedisPool.getResource();</div><div class="line">System.out.println(jedis.get(<span class="string">"name"</span>));</div><div class="line"><span class="comment">//释放资源</span></div><div class="line">jedis.close();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关系型数据库（Mysql、Oracle）&quot;&gt;&lt;a href=&quot;#关系型数据库（Mysql、Oracle）&quot; class=&quot;headerlink&quot; title=&quot;关系型数据库（Mysql、Oracle）&quot;&gt;&lt;/a&gt;关系型数据库（Mysql、Oracle）&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云栖大会广东分会感想</title>
    <link href="http://dhsmp.com/2017/11/22/thoughts/"/>
    <id>http://dhsmp.com/2017/11/22/thoughts/</id>
    <published>2017-11-22T11:52:38.477Z</published>
    <updated>2017-11-22T12:40:34.955Z</updated>
    
    <content type="html"><![CDATA[<p>有幸参加了2017年云栖大会广东分会，其实刚开始都没怎么有太多的期望。但还是抱着反正也报名成功了，不如来聆听一次。收获很大，而这种收获不仅仅只是技术知识的收获，而是思想上的收获。</p><h2 id="一位科学家"><a href="#一位科学家" class="headerlink" title="一位科学家"></a>一位科学家</h2><p>闵万里，阿里云人工智能首席科学家。<br>科学家！以前觉得好遥远，也不知道科学家到达是啥模样。是不是像小时候老师说的，科学家都很古板、很安静，只会一脑子的做实验。今天听这个科学家讲完，感觉被老师给误导了。<br>分享了他关于ET城市大脑的理解与实践。从他的演讲谈吐中，瞬间有一种如沐春风感。有条不紊，思路逻辑处处缜密，而又不缺引人入深的思考。从两千年前阿基米德的名言，引入消失的城市（亚特兰蒂斯、楼兰古城），塞纳河上的第一艘蒸汽船。足可见闵博士的阅读之多、思考之深。瞬间颠覆了我心中对于科学家的定义。甚至让我有点浮想联翩，人生就需要与高段位的选手做队友。在闵博士分享关于城市这个命题的研究与实践时，又不得不佩服此科学家对于真理的追求，与心中的那份笃定。博士在分享时，是快乐的、开心的。<br>不禁思考起，初中时老师常说的一句话：“吃得苦中苦方为人上人。”直到今天，心中才终于有了答案。老师在说那句话的场景，本意是想要我能吃下<strong>读书的苦</strong>。但是当我听完那句话之后，一直把疑惑埋在心底。如果读书真的那么苦，那我还要苦这么多年，读书的意义又是何在？回想踏入社会后的学习，感慨自身知识的匮乏，才真正明白。博士的快乐，正式这份求知。用笃定、探索去解心中之惑。而我，从小就认为自己并不比别人差。而青春年少时，未种下梦想的种子。以及读书是一件苦差事的灌输，成长到了目前的人生轨迹。所幸，今天聆听闵博士一席话解了前半生的惑。幸哉幸哉。</p><h2 id="一次颁奖典礼"><a href="#一次颁奖典礼" class="headerlink" title="一次颁奖典礼"></a>一次颁奖典礼</h2><p>天池大数据竞赛的颁奖典礼。这个心目中关注已久的顶级大赛，我总算是瞧见了一次颁奖典礼。能够参加的肯定都是高手，能够获胜的肯定都是顶级高手。这种顶级大赛的竞争，不正燃烧了我心中的向往吗？所以，为了内心的向往，每天每夜的学习都是一件快乐的事情。这样我才能离它更近。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有幸参加了2017年云栖大会广东分会，其实刚开始都没怎么有太多的期望。但还是抱着反正也报名成功了，不如来聆听一次。收获很大，而这种收获不仅仅只是技术知识的收获，而是思想上的收获。&lt;/p&gt;
&lt;h2 id=&quot;一位科学家&quot;&gt;&lt;a href=&quot;#一位科学家&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>应用的变迁</title>
    <link href="http://dhsmp.com/2017/10/30/evolution/"/>
    <id>http://dhsmp.com/2017/10/30/evolution/</id>
    <published>2017-10-30T12:49:09.319Z</published>
    <updated>2017-10-30T14:36:57.122Z</updated>
    
    <content type="html"><![CDATA[<p>时代在变迁，技术在变革，我们所处的环境也一直在发生着变化。浅谈一下对应用变迁的一种自我认知，尝试去理解这种变迁背后深层次的原因。</p><h2 id="传统垂直架构"><a href="#传统垂直架构" class="headerlink" title="传统垂直架构"></a>传统垂直架构</h2><p>还清晰的记得第一次搭建tomcat，第一次做web服务。从jsp、servlet、JDBC实现编写的第一个完整的web应用。MVC三层架构的理解与实践。至Strust2、Spring、SptringMVC、Hibernate、mybatis的学习、理解、应用。更多的出发点，也仅仅只是想要掌握这些技术。<br><img src="http://orxmumro7.bkt.clouddn.com/17-10-30/49816219.jpg" alt=""><br>这就是一个典型的垂直架构应用。本地应用间的API调用。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>技术比较单一（如SSH、SSM技术的集成）</li><li>学习成本低（会用才是重点、无需了解其原理）</li><li>开发上手较快（一个基本的DEMO，就能对着业务进行开发）</li><li>测试、部署、运维比较简单（LAMP）</li><li>整个应用模块都部署在同一个进程内，一旦发生故障，整个节点宕机。<h2 id="面向服务的架构"><a href="#面向服务的架构" class="headerlink" title="面向服务的架构"></a>面向服务的架构</h2>随着越来越多的垂直架构，异构系统之间的通信与数据交换成为需求。以RPC框架为基础，各种面向服务的框架开始流行。如Dubbo+Zookeeper等技术。RPC本身只是一种进程间的通信方式，允许像调用本地服务一样调用远程服务。个人觉得比较原始一点的面向服务的架构，应该是基于WebService搭建的ESB（企业服务总线）。<strong>其三要素完整的表述了一个服务，UDDI目录、WSDL说明书、SOAP协议。实现跨平台，跨语言的服务。</strong>当然还有RESTful。<br><img src="http://orxmumro7.bkt.clouddn.com/17-10-30/34274329.jpg" alt=""><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2>目前能够理解的，也就是其原子服务，专注于做一件事，“高内聚、松耦合”。功能越单一，也就意味着对其他的功能依赖越少。其他的高密度部署、敏捷交付、微自治，暂时没体验过。<br><img src="http://orxmumro7.bkt.clouddn.com/17-10-30/56214898.jpg" alt=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>了解历史的演进过程，才能清楚自己所处哪个潮流中。该如何在这个技术迭代的浪潮中该如何去选择学习的重点技术。而不是人云亦云的去追逐。个人感觉，跟计算机网络的发展有点类似。从单台计算机到局域网，局域网到广域网。从局域网的CSMA/CD协议，到广域网的点对点协议（PPP协议）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时代在变迁，技术在变革，我们所处的环境也一直在发生着变化。浅谈一下对应用变迁的一种自我认知，尝试去理解这种变迁背后深层次的原因。&lt;/p&gt;
&lt;h2 id=&quot;传统垂直架构&quot;&gt;&lt;a href=&quot;#传统垂直架构&quot; class=&quot;headerlink&quot; title=&quot;传统垂直架构&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
