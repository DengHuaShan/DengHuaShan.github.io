<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamMaker-HS</title>
  
  <subtitle>勤思善问，可敌良师益友。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dhsmp.com/"/>
  <updated>2018-09-07T15:42:15.115Z</updated>
  <id>http://dhsmp.com/</id>
  
  <author>
    <name>HuaShan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于计算机网络原理学习部分的总结</title>
    <link href="http://dhsmp.com/2018/07/30/network/"/>
    <id>http://dhsmp.com/2018/07/30/network/</id>
    <published>2018-07-30T08:48:57.000Z</published>
    <updated>2018-09-07T15:42:15.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h2><p>从去年9月开始，看教材《计算机网络原理》到4月考试通过，前前后后花了大半年时间。必须得承认，我不是神童，也不是学霸，不是那种一学就会的体质。《计算机网络原理》绝对是我啃得最慢，也是我认为最枯燥的一本教科书。但是我还是靠自学把它啃下来了，磨炼了心性。对于计算机网络世界的理解，真的上升了不少，不仅仅只是编程。<br>曾国藩对于学习，提出过四点要求，个人觉得非常有意思。<br><strong>一曰看生书宜求速，不多读则太陋。<br>一曰温旧书宜求熟，不背诵则易忘。<br>一曰习字宜有恒，不善写则如身之无衣，山之无木。<br>一曰作文宜苦思，不善作则如人之哑不能言，马之肢不能行。</strong></p><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><p>在教科书中，有一段话是需要背的。什么时候计算机网络？只有当你能够很顺的背下来，你才会去回味、去理解概述的含义。这里再借鉴一下教科书上的内容。<br><strong>计算机网络，是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</strong><br>在整个计算机网络发展史中，早期60年代的计算机网络是美国军方研制的ARPNET网，主要是科研机构为实现资源共享。到了80年代诞生出统一的标准-OSI参考模型。也就是常说的七层模型。教科书都是以七层模型来讲，但是事实上的标准是TCP/IP四层模型。七层模型从高往低依次是：<strong>应、表、会、传、网、数、物</strong>（记第一个字，刚好是一句七言绝句诗，方便记忆）。四层模型从高往低依次：<strong>应、传、互、主</strong>。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-10/40277440.jpg" alt=""><br>每一层中所包含的协议：（两张图都是网上找的，跟教科书上也是一样的，隔个三五天翻看一下，一回生二回熟，慢慢就记住了）<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-10/83019517.jpg" alt=""><br>发送端在将数据进行发送时，需要经过一系列的封装。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/28381599.jpg" alt=""><br>接收端在接收数据的时候，再进行相应的解封。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/37102701.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/65343908.jpg" alt=""></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>总结的方式也按教科书章节的划分，从底层往上层温习。<strong>物理层主要是实现比特流的透明传输，为数据链路层提供数据传输服务，直接面向实际承担数据传输的物理介质。其实就是最原始的二进制位数据的传输。</strong><br>传输介质主要是有线、无线两大类。有线传输介质中有双绞线、同轴电缆、光钎。双绞线跟同轴电缆不可避免的就需要把二进制数据，转换成电频进行传输。专业术语叫调制解调器，俗称猫（MODEL）。在接收方中，再把电信号还原成二进制数据。而光纤传输的是光信号，需要发送端将其转成光信号，接收端再还原成电信号。<br>数据在传输过程中无可避免的就会出现传输速率，信道容量，误码率，通信方式的问题。就类似现实社会中，公司有一堆的货物要运到某个地方，货物就是数据，运输的路径其实就是传输过程，是走汽车运输还是火车运输，货物所运达的时间，传输的速率是不同的。在传输过程中可能会出现少了某一个物品。货物很多，是一次一次的运输，还是一次找10个承运人来运输…等等这些问题。这里不得不提一位伟人-香农。香农提出了信息熵的概念，为信息论和数字通信奠定了基础。<br>物理层的主要任务确定传输媒体接口的一些特性。主要是机械特性、电气特性、功能特性、规程特性。</p><ul><li>机械特性：例如网卡接口的数目、形状、大小等。</li><li>电气特性：电压的范围-5V到+5V。</li><li>功能特性：用电压的取值范围来表示比特数据。-5V到0V表示0，+5V到0V表示1.</li><li>规程特性：规定建立连接时各个相关部件的工作步骤。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/25960527.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/68226925.jpg" alt=""><br>信号的编码方式<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/14023142.jpg" alt=""><br><strong>曼彻斯特编码：bit中间有信号跳变，从低到高的跳变表示0，从高到低的跳变表示1。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/80606994.jpg" alt=""><br><strong>差分曼彻斯特编码：bit中间有信号跳变，bit与bit之间也有信号跳变表示下一bit为0。bit与bit之间无信号跳变，表示下一bit为1。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/88120148.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/42908405.jpg" alt=""><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2>数据链路层主要是对物理层传输原始bit流功能的加强，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。数据链路层的传送单位称为帧。<br><img src="http://orxmumro7.bkt.clouddn.com/18-8-23/743647.jpg" alt=""><br>数据链路层主要是要解决三个问题：</li><li>封装成帧：就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限。首部和尾部的一个重要作用就是进行帧定界。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/48033311.jpg" alt=""></li><li>透明传输：是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/96367096.jpg" alt=""></li><li>差错控制：传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。在数据链路层传送的帧中，广泛使用了循环冗余检验CRC的检错技术。<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括路由选择、拥塞控制、网际互连等。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/21516818.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/78452877.jpg" alt=""></li><li>RIP协议：路由信息协议，简单的距离向量路由协议。每个RIP路由器都保存了一张路由表，每一项对应着一个目的地。其中每项包括了目的地的IP地址、到目的地的路径距离的度量1、到目的地的路径的下一个路由表的IP地址、路由改变标志以及和这条路由有关的一些计时器。其采用的距离度量是一种非常简单的到目的地距离的测量方式：站点计数度量，也就是该路由要经过的路由器个数。</li><li>OSPF协议：链路状态路由协议，每个路由器通过维护它自己的本地链路状态信息，即路由器到子网的链路状态和可以到达的邻居路由器，通过扩散的方法把更新了的本地链路状态信息广播给自治系统中的每个路由器。这样每个路由器都知道自治系统内部的拓扑结构和链路状态信息。路由器根据这个链路状态库计算出到每个目的地的最短路径。所有路由器都采用相同的算法来计算最短路由，而且这个计算是在路由器本地进行的。动态的路由算法，能够自动而快速地适应拓扑结构的变化。</li><li>IP协议：互连网协议，将多个网络连成一个互连网，把高层的数据以多个数据报的形式通过互连网分发出去。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/7500754.jpg" alt=""></li><li>ARP协议：地址转换协议。在TCP/IP网络环境下，每个主机都分配了一个32位的IP地址，这种互联网地址是在网际范围标识主机的一种逻辑地址。为了让报文在物理网上传送，必须知道彼此的物理地址。以以太网环境为例，为了正确地向目的站传送报文，必须把目的站32位IP地址转换成48位以太网目的地址，此时所需要的协议就是ARP协议。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-1/89098859.jpg" alt=""></li><li>RARP协议：反向地址转换协议，使用与一种特殊的情况，如果站点初始化以后，只有自己的物理网络地址而没有IP地址，则可以通过RARP协议发出广播请求，征求自己的IP地址。而RARP服务器负责回答。无IP地址的站点可以通过RARP协议取得自己的IP地址。</li><li>ICMP协议：互联网控制报文协议。</li><li>IGMP协议：因特网组管理协议。<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/95311087.jpg" alt=""></li><li>TCP协议：需要将传输的数据进行分段传输，建立会话，可靠传输，流量控制。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/71000992.jpg" alt=""><br>传输层协议和应用层协议之间的关系：端口号加使用的传输层协议，用以标识应用程序。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/50225753.jpg" alt=""><br>可靠传输原理：ARQ自动请求重传，采用确认和重传机制。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/61114084.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/9071104.jpg" alt=""><br>TCP报文格式：<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/57953401.jpg" alt=""><br>TCP建立连接三次握手的过程：<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/77880357.jpg" alt=""><br>TCP释放连接四次挥手的过程：<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/45858470.jpg" alt=""></li><li>UDP协议：一个数据包就能够完成数据通信，不分段，不需要建立会话，不需要流量控制，不可靠传输。<br><img src="http://orxmumro7.bkt.clouddn.com/18-9-7/97210689.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前沿&quot;&gt;&lt;a href=&quot;#前沿&quot; class=&quot;headerlink&quot; title=&quot;前沿&quot;&gt;&lt;/a&gt;前沿&lt;/h2&gt;&lt;p&gt;从去年9月开始，看教材《计算机网络原理》到4月考试通过，前前后后花了大半年时间。必须得承认，我不是神童，也不是学霸，不是那种一学就会的体质。
      
    
    </summary>
    
      <category term="计算机理论" scheme="http://dhsmp.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>年度总结</title>
    <link href="http://dhsmp.com/2018/06/13/annual-summary/"/>
    <id>http://dhsmp.com/2018/06/13/annual-summary/</id>
    <published>2018-06-13T02:37:53.000Z</published>
    <updated>2018-06-13T07:01:05.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>从2017年6月开始创建博客开始，到现在也有近一年了。回首时，还是很感慨。坚持了一年的博客输出，对知识体系的理解，强迫对知识的输入再输出。收获很多，更多的是心历上的收获。坚持做一件自己持续投入的事情，这份收获在于自己的内心感受。不在乎外界看法，不在乎流量，不在乎评价，坚持自己的初衷，知识的输出。</p><h2 id="2017年目标"><a href="#2017年目标" class="headerlink" title="2017年目标"></a>2017年目标</h2><h3 id="6月目标"><a href="#6月目标" class="headerlink" title="6月目标"></a>6月目标</h3><ul><li>个人博客上线</li><li>阅读《MySQL5.6从零开始学》系统的补充一下MySQL相关知识</li></ul><h3 id="6月进展"><a href="#6月进展" class="headerlink" title="6月进展"></a>6月进展</h3><ul><li><del>个人博客上线，从以前的纸质笔记本上摘抄出一些记录，并输出成博客文章</del> </li><li><del>阅读《MySQL5.6从零开始学》</del></li></ul><h3 id="7月目标"><a href="#7月目标" class="headerlink" title="7月目标"></a>7月目标</h3><ul><li>自考报名、报考</li><li>阅读《MySQL5.6从零开始学》系统的补充一下MySQL相关知识</li><li>阅读教材《Java语言程序设计一》</li></ul><h3 id="7月进展"><a href="#7月进展" class="headerlink" title="7月进展"></a>7月进展</h3><ul><li><del>完成自考报名、10月报考，中大《计算机网络》专业，计划不报班自学参加考试</del></li><li><del>阅读《MySQL5.6从零开始学》系统的补充一下MySQL相关知识</del></li><li><del>阅读教材《Java语言程序设计一》</del></li></ul><h3 id="8月目标"><a href="#8月目标" class="headerlink" title="8月目标"></a>8月目标</h3><ul><li>阅读《精进：如何成为一个很厉害的人》</li><li>阅读教材《中国近代史纲要》</li></ul><h3 id="8月进展"><a href="#8月进展" class="headerlink" title="8月进展"></a>8月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读《精进：如何成为一个很厉害的人》</del></li><li><del>阅读教材《中国近代史纲要》</del></li></ul><h3 id="9月目标"><a href="#9月目标" class="headerlink" title="9月目标"></a>9月目标</h3><ul><li>阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</li><li>刷题《Java语言程序设计一》，提炼重点知识</li><li>刷题《中国近代史纲要》，提炼并背诵简单题知识</li></ul><h3 id="9月进展"><a href="#9月进展" class="headerlink" title="9月进展"></a>9月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</del></li><li><del>刷题《Java语言程序设计一》</del></li><li><del>刷题《中国近代史纲要》</del></li></ul><h3 id="10月目标"><a href="#10月目标" class="headerlink" title="10月目标"></a>10月目标</h3><ul><li>阅读教材《计算机网络原理》</li><li>参加10月自学考试</li><li>阅读《刻意练习》</li></ul><h3 id="10月进展"><a href="#10月进展" class="headerlink" title="10月进展"></a>10月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读教材《计算机网络原理》</del></li><li><del>参加10月自学考试</del></li><li><del>《网络工程》没有按照原有计划进行阅读，主要是一时没有摸索出自己的合适的学习方法。其他科目需要记忆的知识量较大</del></li><li><del>阅读《刻意练习》</del></li></ul><h3 id="11月目标"><a href="#11月目标" class="headerlink" title="11月目标"></a>11月目标</h3><ul><li>预估10月考试中的《计算机网络原理》、《网络工程》是没有过的。再次阅读教材《计算机网络原理》</li><li>阅读《硅谷之谜》</li><li>开始学习《新概念英语一》，每天10个单词</li></ul><h3 id="11月进展"><a href="#11月进展" class="headerlink" title="11月进展"></a>11月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读教材《计算机网络原理》</del></li><li><del>阅读《硅谷之谜》<br><img src="http://orxmumro7.bkt.clouddn.com/18-6-13/49118566.jpg" alt=""></del></li></ul><h3 id="12月目标"><a href="#12月目标" class="headerlink" title="12月目标"></a>12月目标</h3><ul><li>刷题《计算机网络原理》，提炼重点知识</li><li>温习《C语言程序设计》，为《数据结构》的考试补下基础</li><li>阅读教材《网络工程》</li><li>阅读《文明之光》第一册</li></ul><h3 id="12月进展"><a href="#12月进展" class="headerlink" title="12月进展"></a>12月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络原理》，提炼重点知识</del></li><li><del>补了谭浩强的绿皮书《C语言程序设计》</del></li><li><del>阅读教材《网络工程》</del></li><li><del>阅读《文明之光》第一册</del></li></ul><h2 id="2018年目标"><a href="#2018年目标" class="headerlink" title="2018年目标"></a>2018年目标</h2><h3 id="1月目标"><a href="#1月目标" class="headerlink" title="1月目标"></a>1月目标</h3><ul><li>完成自考4月报考</li><li>阅读《大学之路》第一册</li><li>阅读《文明之光》第二册</li><li>阅读教材《数据结构》</li></ul><h3 id="1月进展"><a href="#1月进展" class="headerlink" title="1月进展"></a>1月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>完成自考4月报考</del></li><li><del>阅读《大学之路》第一册</del></li><li><del>阅读《文明之光》第二册</del></li><li><del>阅读教材《数据结构》</del></li></ul><h3 id="2月目标"><a href="#2月目标" class="headerlink" title="2月目标"></a>2月目标</h3><ul><li>刷题《数据结构》，提炼重点知识</li><li>阅读教材《网络工程》</li><li>阅读教材《计算机网络安全》</li><li>记忆理解《计算机网络原理》重点知识</li><li>阅读《大学之路》第二册</li><li>阅读《文明之光》第三册</li></ul><h3 id="2月进展"><a href="#2月进展" class="headerlink" title="2月进展"></a>2月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《数据结构》，提炼重点知识</del></li><li><del>阅读教材《网络工程》</del></li><li><del>阅读教材《计算机网络安全》</del></li><li><del>记忆理解《计算机网络原理》重点知识</del></li><li><del>阅读《大学之路》第二册</del></li><li><del>阅读《文明之光》第三册</del></li></ul><h3 id="3月目标"><a href="#3月目标" class="headerlink" title="3月目标"></a>3月目标</h3><ul><li>刷题《计算机网络安全》，提炼重点知识</li><li>刷题《网络工程》，提炼重点知识</li><li>记忆理解《计算机网络原理》重点知识</li><li>记忆理解《数据结构》重点知识</li><li>阅读《数学之美》</li><li>阅读《文明之光》第四册</li><li>阅读《见识》</li><li>阅读《智能时代》</li><li>泛读《大话数据结构》</li></ul><h3 id="3月进展"><a href="#3月进展" class="headerlink" title="3月进展"></a>3月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络安全》，提炼重点知识</del></li><li><del>刷题《网络工程》，提炼重点知识</del></li><li><del>记忆理解《计算机网络原理》重点知识</del></li><li><del>记忆理解《数据结构》重点知识</del></li><li><del>阅读《数学之美》</del></li><li><del>阅读《文明之光》第四册</del></li><li><del>阅读《见识》</del></li><li><del>阅读《智能时代》</del></li><li><del>泛读《大话数据结构》</del></li></ul><h3 id="4月目标"><a href="#4月目标" class="headerlink" title="4月目标"></a>4月目标</h3><ul><li>刷题《计算机网络安全》，提炼重点知识</li><li>记忆理解《计算机网络安全》重点知识</li><li>参加4月自学考试</li><li>再次阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</li></ul><h3 id="4月进展"><a href="#4月进展" class="headerlink" title="4月进展"></a>4月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>刷题《计算机网络安全》，提炼重点知识</del></li><li><del>记忆理解《计算机网络安全》重点知识</del></li><li><del>参加4月自学考试</del></li><li><del>再次阅读《深入理解Java虚拟机:JVM高级特性与最佳实践》</del></li></ul><h3 id="5月目标"><a href="#5月目标" class="headerlink" title="5月目标"></a>5月目标</h3><ul><li>阅读《计算机组成原理》</li><li>阅读《智识分子：做个复杂的现代人》</li><li>阅读《高手：精英的见识和我们的时代》</li><li>阅读《如何有效阅读一本书》</li><li>阅读《学会学习：从认知自我到高效学习》</li><li>阅读《抗压力：逆境重生法则》</li></ul><h3 id="5月进展"><a href="#5月进展" class="headerlink" title="5月进展"></a>5月进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>阅读《计算机组成原理》</del></li><li><del>阅读《智识分子：做个复杂的现代人》</del></li><li><del>阅读《高手：精英的见识和我们的时代》</del></li><li><del>阅读《如何有效阅读一本书》</del></li><li><del>阅读《学会学习：从认知自我到高效学习》</del></li><li><del>阅读《抗压力：逆境重生法则》<br><img src="http://orxmumro7.bkt.clouddn.com/18-6-13/80165275.jpg" alt=""></del></li></ul><h3 id="6月目标-1"><a href="#6月目标-1" class="headerlink" title="6月目标"></a>6月目标</h3><ul><li>阅读教材《数据库系统原理》</li><li>阅读教材《互联网及其应用》</li></ul><h3 id="6月13日进展"><a href="#6月13日进展" class="headerlink" title="6月13日进展"></a>6月13日进展</h3><ul><li><del>完成一篇博客文章的输出</del></li><li><del>《新概念英语一》进展的很缓慢，到目前为止推进到第55课。上下班通勤路上反复跟读课文。</del></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;感慨&quot;&gt;&lt;a href=&quot;#感慨&quot; class=&quot;headerlink&quot; title=&quot;感慨&quot;&gt;&lt;/a&gt;感慨&lt;/h2&gt;&lt;p&gt;从2017年6月开始创建博客开始，到现在也有近一年了。回首时，还是很感慨。坚持了一年的博客输出，对知识体系的理解，强迫对知识的输入再输出。收
      
    
    </summary>
    
      <category term="随想" scheme="http://dhsmp.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell脚本的回顾</title>
    <link href="http://dhsmp.com/2018/05/12/shell/"/>
    <id>http://dhsmp.com/2018/05/12/shell/</id>
    <published>2018-05-12T14:16:08.000Z</published>
    <updated>2018-05-24T09:11:04.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对新的编程语言学习的一些感想"><a href="#对新的编程语言学习的一些感想" class="headerlink" title="对新的编程语言学习的一些感想"></a>对新的编程语言学习的一些感想</h2><p>最近重新温习了一下Shell，系统的学习了一遍。发现其实以前对Shell的理解与认知仅仅只是停留在马上用的层面。仔细想了想，任何一种编程语言或者是其他新知识的学习，个人觉得应该离不开几个要素。这样才能在自己学习中，建立对新知识一个系统的认知。</p><ol><li>了解Shell的基本历史，可以很快速的浏览一遍，有个大概轮廓或印象。</li><li>Shell编程中的变量、流程、语法、函数（重点）</li><li>掌握知识，并运用自如-&gt;大量的练习</li></ol><p>重点其实是在第二点，掌握一门编程语言最基本的四个点，其实基本能上手了。至于熟练程度，那都是靠不停的使用堆砌起来的。掌握了系统的学习过程，遇到问题-&gt;解决问题，才能知其然。</p><h2 id="shell历史"><a href="#shell历史" class="headerlink" title="shell历史"></a>shell历史</h2><p>Shell目前是一种统称，UNIX系统上有多种Shell。目前各种Linux发行版标配的Shell都是bash。Shell脚本不需要编译，属于解释执行的，一行一行读取并执行这些命令。类似的解释执行的还有JS脚本、HTML等，都是一行一行顺序执行的。<br><img src="http://orxmumro7.bkt.clouddn.com/18-5-22/9591267.jpg" alt=""><br>已进入Linux的黑窗，敲一行命令，就刚好能执行。其实就是因为系统在启动的时候，就已经运行了一个shell解释器，等着用户的输入再来解释执行。</p><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line">#这是注释</div><div class="line">cd ..</div><div class="line">ls</div></pre></td></tr></table></figure><p>#表示注释，#!表示该脚本指定的某解释器进行解释执行<br>编写好以后，得运行一遍吧。在Linux操作系统中，启动shell脚本有4种方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source ./test.sh</div><div class="line">. ./test.sh</div><div class="line">sh test.sh</div><div class="line">./test.sh</div></pre></td></tr></table></figure></p><p>以上4种方式的区别在于，source跟.是属于shell的内建命令，也就是说用这两种方式启动，是不会产生新进程的。用sh命令，则会产生在当前进程上产生一个子进程来运行该脚本。提示：权限不够。表示该新建的文件没有执行权，需要执行chmod +x test.sh，为test.sh添加执行权。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>Shell中的变量主要有两种。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>环境变量：以从父进程传给子进程。env命令可以直接打印查看当前系统的环境变量。<br>本地变量：只存在于当前Shell进程，格式是：VARNAME=value（等号之间没有空格）。可使用export命令可以把本地变量导出为环境变量。export VARNAME=value</p><h3 id="命令代换"><a href="#命令代换" class="headerlink" title="命令代换"></a>命令代换</h3><p>用一个自定义的变量名承载系统命令。例如：DATE=`date`，echo $DATE则可以实现直接敲命令date的效果。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>有些特殊意义的字符，如果只想取它字面值，可以\进行转义，用于去除紧跟其后的单个字符的特殊意义。</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><p>字符串的界定符，单引号中的内容会原样输出。<br>echo ‘$SHELL’则会输出$SHELL</p><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><p>字符串的界定符，被双引号用括住的内容，将被视为单一字串。它防止通配符扩展，但允许变量扩展。<br>echo “$PATH”则会输出环境变量PATH的值。作为一种好的Shell编程习惯，应该总是把变量的取值放在双引号之中。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>命令test或 [] 可以测试一个条件是否成立，0表示成功，1表示失败。可以用特殊变量$?读出。</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="if-then-elif-else-fi"><a href="#if-then-elif-else-fi" class="headerlink" title="if/then/elif/else/fi"></a>if/then/elif/else/fi</h4><p>在Shell中用if、then、elif、else、fi这几条命令实现分支控制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if [ -f ~/.bashrc ]; then</div><div class="line">. ~/.bashrc</div><div class="line">fi</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line">echo &quot;Is it morning? Please answer yes or no.&quot;</div><div class="line">read YES_OR_NO</div><div class="line">if [ &quot;$YES_OR_NO&quot; = &quot;yes&quot; ]; then</div><div class="line">echo &quot;Good morning!&quot;</div><div class="line">elif [ &quot;$YES_OR_NO&quot; = &quot;no&quot; ]; then</div><div class="line">echo &quot;Good afternoon!&quot;</div><div class="line">else</div><div class="line">echo &quot;Sorry, $YES_OR_NO not recognized. Enter yes or no.&quot;</div><div class="line">fi</div></pre></td></tr></table></figure><p>read命令的作用是等待用户输入一行字符串，将该字符串存到一个Shell变量中。</p><h4 id="case-esac"><a href="#case-esac" class="headerlink" title="case/esac"></a>case/esac</h4><p>Shell脚本的case可以匹配字符串和Wildcard，每个匹配分支可以有若干条命令，末尾必须以;;结束，执行时找到第一个匹配的分支并执行相应的命令，然后直接跳到esac之后。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line">echo &quot;Is it morning? Please answer yes or no.&quot;</div><div class="line">read YES_OR_NO</div><div class="line">case &quot;$YES_OR_NO&quot; in</div><div class="line">yes|y|Yes|YES)</div><div class="line">echo &quot;Good Morning!&quot;;;</div><div class="line">[nN]*)</div><div class="line">echo &quot;Good Afternoon!&quot;;;</div><div class="line">*)</div><div class="line">echo &quot;Sorry, $YES_OR_NO not recognized. Enter yes or no.&quot;;;</div><div class="line">esac</div></pre></td></tr></table></figure></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for-do-done"><a href="#for-do-done" class="headerlink" title="for/do/done"></a>for/do/done</h4><p>Shell脚本的for循环结构，类似于某些编程语言的foreach循环。也就是遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line">for FRUIT in apple banana pear; do</div><div class="line">echo &quot;I like $FRUIT&quot;</div><div class="line">done</div></pre></td></tr></table></figure></p><h4 id="while-do-done"><a href="#while-do-done" class="headerlink" title="while/do/done"></a>while/do/done</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line">echo &quot;Enter password:&quot;</div><div class="line">read TRY</div><div class="line">while [ &quot;$TRY&quot; != &quot;secret&quot; ]; do</div><div class="line">echo &quot;Sorry, try again&quot;</div><div class="line">read TRY</div><div class="line">done</div></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Shell中的函数，在其定义中是没有返回值也没有参数列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line">foo()&#123; echo &quot;Function foo is called&quot;;&#125;</div><div class="line">echo &quot;-=start=-&quot;</div><div class="line">foo</div><div class="line">echo &quot;-=end=-&quot;</div></pre></td></tr></table></figure></p><h2 id="位置参数和特殊变量"><a href="#位置参数和特殊变量" class="headerlink" title="位置参数和特殊变量"></a>位置参数和特殊变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$0 相当于C语言main函数的argv[0]</div><div class="line">$1、$2...这些称为位置参数（Positional Parameter），相当于C语言main函数的argv[1]、argv[2]...</div><div class="line">$# 相当于C语言main函数的argc - 1，注意这里的#后面不表示注释</div><div class="line">$@ 表示参数列表&quot;$1&quot; &quot;$2&quot; ...，例如可以用在for循环中的in后面。</div><div class="line">$* 表示参数列表&quot;$1&quot; &quot;$2&quot; ...，同上</div><div class="line">$? 上一条命令的Exit Status</div><div class="line">$$ 当前进程号</div></pre></td></tr></table></figure><h2 id="Shell脚本调试方法"><a href="#Shell脚本调试方法" class="headerlink" title="Shell脚本调试方法"></a>Shell脚本调试方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-n读一遍脚本中的命令但不执行，用于检查脚本中的语法错误。</div><div class="line">-v一边执行脚本，一边将执行过的脚本命令打印到标准错误输出。</div><div class="line">-x提供跟踪执行信息，将执行的每一条命令和结果依次打印出来。</div></pre></td></tr></table></figure><p>$ sh -x ./test.sh</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式分为Basic正则和Extended正则，也就是基本正则和扩展正则。Linux操作系统中，grep命令，默认使用的是基本正则。egrep命令使用的是扩展正则。</p><h3 id="基本语法-字符类"><a href="#基本语法-字符类" class="headerlink" title="基本语法-字符类"></a>基本语法-字符类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.匹配任意一个字符abc.可以匹配abcd、abc9等</div><div class="line">[]匹配括号中的任意一个字符[abc]可以匹配ad、bd、cd</div><div class="line">-在[]括号内表示字符范围[0-9a-fA-F]可以匹配一位十六进制数字</div><div class="line">^位于[]括号的开头，匹配除括号内字符之外的任意一个字符[^xy]可以匹配a1、b1，不匹配x1、y1</div></pre></td></tr></table></figure><h3 id="基本语法-数量限定符"><a href="#基本语法-数量限定符" class="headerlink" title="基本语法-数量限定符"></a>基本语法-数量限定符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">?紧跟它前面的单元，匹配零次或一次[0-9]?\.[0-9]匹配0.0、2.3、.5等，.号是特殊字符，用\转义一下。</div><div class="line">+紧跟它前面的单元，匹配一次或多次[a-zA-z0-9_.-]+@[a-zA-z0-9_.-]+\.[a-zA-z0-9_.-]匹配email地址</div><div class="line">*紧跟它前面的单元，匹配零次或多次[0-9][0-9]*匹配至少一位数字</div><div class="line">&#123;N&#125;大括号，精确匹配N次[0-9][0-9]&#123;2&#125;匹配从100到999的整数</div><div class="line">&#123;N,&#125;匹配至少N次[0-9][0-9]&#123;2,&#125;匹配三位以上的整数</div><div class="line">&#123;,M&#125;匹配最多M次[0-9]&#123;,1&#125;相当于[0-9]?</div><div class="line">&#123;N,M&#125;至少N次，最多M次^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$匹配IP地址</div></pre></td></tr></table></figure><h3 id="基本语法-位置限定符"><a href="#基本语法-位置限定符" class="headerlink" title="基本语法-位置限定符"></a>基本语法-位置限定符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">^匹配行首的位置</div><div class="line">$匹配行末的位置</div></pre></td></tr></table></figure><h3 id="基本语法-其他特殊定符"><a href="#基本语法-其他特殊定符" class="headerlink" title="基本语法-其他特殊定符"></a>基本语法-其他特殊定符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">\转义字符，普通字符转义为特殊字符，特殊字符转义为普通字符</div><div class="line">()将正则表达式的一部分括起来组成一个单元，可以对整个单元使用数量限定符([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1-3&#125;匹配IP地址</div><div class="line">|连接两个子表达式，表示或的关系n(o|either)匹配no或neither</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对新的编程语言学习的一些感想&quot;&gt;&lt;a href=&quot;#对新的编程语言学习的一些感想&quot; class=&quot;headerlink&quot; title=&quot;对新的编程语言学习的一些感想&quot;&gt;&lt;/a&gt;对新的编程语言学习的一些感想&lt;/h2&gt;&lt;p&gt;最近重新温习了一下Shell，系统的学习了一
      
    
    </summary>
    
      <category term="Shell" scheme="http://dhsmp.com/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构中一些示例代码的实现</title>
    <link href="http://dhsmp.com/2018/03/29/implement/"/>
    <id>http://dhsmp.com/2018/03/29/implement/</id>
    <published>2018-03-29T07:10:37.334Z</published>
    <updated>2018-05-04T15:02:58.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="科学的研究方法（摘录至文明之光一书）"><a href="#科学的研究方法（摘录至文明之光一书）" class="headerlink" title="科学的研究方法（摘录至文明之光一书）"></a>科学的研究方法（摘录至文明之光一书）</h2><ol><li><strong>不盲从，不接受任何自己不清楚的真理。不管有什么权威的结论，只要没有经过自己的研究，都可以怀疑。</strong></li><li><strong>对于复杂的问题，尽量分解为多个简单的小问题来研究，一个一个地分开解决。</strong></li><li><strong>解决这些小问题时，应该按照先易后难的次序，逐步解决。</strong></li><li><strong>解决每个小问题之后，再综合起来。看看是否彻底解决了原来的问题。</strong></li></ol><h2 id="内存溢出和内存泄露"><a href="#内存溢出和内存泄露" class="headerlink" title="内存溢出和内存泄露"></a>内存溢出和内存泄露</h2><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><p>内存溢出主要是指，要装的数据要超过容器本身了，这是则会导致溢出。类似与生活中的水桶、杯子等，容量是有限的，所以不能进行无限的填装。像Java中的OOM，就属于内存溢出。因为Java中GC的存在，所以并不会发生内存泄露。</p><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>上一章用到C语言制造链表，对于链表中结点的删除操作，会有一个free()函数的调用。free()函数的作用是释放内存空间。<strong>所谓的释放内存空间，是指把对内存地址的操作权限移交给操作系统。</strong>如果没有做free()这个操作，删除该结点时，会导致该结点在已经无法找到了，但却还拥有控制权限。操作系统在分配内存时，会认为当前内存地址有人还在使用，就不会分配给其他的应用程序，从而会导致内存空间，越用越少。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/47041275.jpg" alt=""></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="排序的稳定性"><a href="#排序的稳定性" class="headerlink" title="排序的稳定性"></a>排序的稳定性</h3><p>所谓稳定性是指，如果序列中两个数据元素相等，即r[i]==r[j]，排序前r[i]在r[j]前，排序后r[i]仍然在r[j]前，则这个排序算法是稳定的，反之是不稳定的。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-24/48751992.jpg" alt=""></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>其基本思想是从待排序的无序区中找出最小的元素，将该元素与该区中的第一个元素交换位置。该排序算法是不稳定的。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-24/50811202.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月27日 上午9:27:32</div><div class="line"> * <span class="doctag">@remark</span> </div><div class="line"> * 选择排序：每一次在无序的序列中选出关键字最小的记录，依次存放在已排好序的记录序列最后。</div><div class="line"> * 原始 数据：5 4 9 87 1 2 14 26</div><div class="line"> * 第一趟      1 5 4 9 87 2 14 26</div><div class="line"> *  第二趟      1 2 5 4 9 87 14 26</div><div class="line"> *  第三趟      1 2 4 5 9 87 14 26</div><div class="line"> *  第四趟      1 2 4 5 9 87 14 26</div><div class="line"> *  第五趟      1 2 4 5 9 87 14 26</div><div class="line"> *  第六趟      1 2 4 5 9 14 87 26</div><div class="line"> *  第七趟      1 2 4 5 9 14 26 87</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChooseSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//统计运行次数</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line">chooseSort(array, count);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 选择排序</div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> count</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chooseSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</div><div class="line"><span class="keyword">if</span>(array[j] &lt; array[i])&#123;</div><div class="line"><span class="keyword">int</span> temp = array[i];</div><div class="line">array[i] = array[j];</div><div class="line">array[j] = temp;</div><div class="line">&#125;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">System.out.println(Arrays.toString(array) + <span class="string">"---&gt;ChooseSort："</span> + count);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>其核心思想是把待排序区中的第一个元素拿出来，把位置给空出来。然后用该元素，跟有序区中的元素进行比较。假设是从小到大排序，则比该元素大的，往后移动一次。依次进行即可。把该元素插入到不能移动的元素后边的空间中。该排序算法是稳定的。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-24/63642868.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月27日 上午9:57:20</div><div class="line"> * <span class="doctag">@remark</span> 插入排序：1、元素拿出来。2、符合条件的元素后移</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">// 统计运行次数</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line">insertSort(array, count);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 插入排序</div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> count</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; array.length; i++) &#123;</div><div class="line"><span class="comment">// 待插入的位置</span></div><div class="line">pos = i;</div><div class="line"><span class="comment">// 元素拿出来</span></div><div class="line"><span class="keyword">int</span> temp = array[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp; j--) &#123;</div><div class="line"><span class="comment">// 符合条件的元素后移</span></div><div class="line">array[j + <span class="number">1</span>] = array[j];</div><div class="line"><span class="comment">// 需要插入的位置</span></div><div class="line">pos = j;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line">array[pos] = temp;</div><div class="line">&#125;</div><div class="line">System.out.println(Arrays.toString(array) + <span class="string">"---&gt;InsertSort："</span> + count);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>其基本思想是通过相邻元素之间的比较和交换，来完成排序。有向上冒泡和向下下沉。该排序算法是稳定的。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-24/62153665.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月27日 上午10:41:21</div><div class="line"> * <span class="doctag">@remark</span> 冒泡排序：相邻元素之间的比较交换。一种是向上冒泡，一种是向下下沉</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">// 统计运行次数</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span>[] array1 = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] array2 = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] array3 = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] array4 = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line"></div><div class="line">count = bubbleSort1(array1, <span class="number">0</span>);</div><div class="line">System.out.println(Arrays.toString(array1) + <span class="string">"---&gt;bubbleSort1："</span> + count);</div><div class="line"></div><div class="line">count = bubbleSort2(array2, <span class="number">0</span>);</div><div class="line">System.out.println(Arrays.toString(array2) + <span class="string">"---&gt;bubbleSort2："</span> + count);</div><div class="line"></div><div class="line">count = bubbleSort3(array3, <span class="number">0</span>);</div><div class="line">System.out.println(Arrays.toString(array3) + <span class="string">"---&gt;bubbleSort3："</span> + count);</div><div class="line"></div><div class="line">count = bubbleSort4(array4, <span class="number">0</span>);</div><div class="line">System.out.println(Arrays.toString(array4) + <span class="string">"---&gt;bubbleSort4："</span> + count);</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] array5 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</div><div class="line">count = bubbleSort4(array5, <span class="number">0</span>);</div><div class="line">System.out</div><div class="line">.println(Arrays.toString(array5) + <span class="string">"---&gt;bubbleSort4："</span> + count);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 向上冒泡</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> count</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bubbleSort1</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; array.length - i; j++) &#123;</div><div class="line"><span class="keyword">if</span> (array[j] &lt; array[j - <span class="number">1</span>]) &#123;</div><div class="line"><span class="keyword">int</span> temp = array[j];</div><div class="line">array[j] = array[j - <span class="number">1</span>];</div><div class="line">array[j - <span class="number">1</span>] = temp;</div><div class="line">&#125;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 向下下沉</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> count</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bubbleSort2</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = array.length - <span class="number">1</span>; j &gt; i; j--) &#123;</div><div class="line"><span class="keyword">if</span> (array[j] &lt; array[j - <span class="number">1</span>]) &#123;</div><div class="line"><span class="keyword">int</span> temp = array[j];</div><div class="line">array[j] = array[j - <span class="number">1</span>];</div><div class="line">array[j - <span class="number">1</span>] = temp;</div><div class="line">&#125;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 向上冒泡，优化</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> count</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bubbleSort3</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"><span class="comment">// 标记，true表示：元素还没有排好序</span></div><div class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span> &amp;&amp; flag; i++) &#123;</div><div class="line"><span class="comment">// 认为已经排好序</span></div><div class="line">flag = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; array.length - i; j++) &#123;</div><div class="line"><span class="keyword">if</span> (array[j] &lt; array[j - <span class="number">1</span>]) &#123;</div><div class="line"><span class="keyword">int</span> temp = array[j];</div><div class="line">array[j] = array[j - <span class="number">1</span>];</div><div class="line">array[j - <span class="number">1</span>] = temp;</div><div class="line"><span class="comment">// 元素执行了交换，则说明数据还没有排好序</span></div><div class="line">flag = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 向下下沉：优化</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> count</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bubbleSort4</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"><span class="comment">// 标记，true表示：元素还没有排好序</span></div><div class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span> &amp;&amp; flag; i++) &#123;</div><div class="line"><span class="comment">// 认为已经排好序</span></div><div class="line">flag = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = array.length - <span class="number">1</span>; j &gt; i; j--) &#123;</div><div class="line"><span class="keyword">if</span> (array[j] &lt; array[j - <span class="number">1</span>]) &#123;</div><div class="line"><span class="keyword">int</span> temp = array[j];</div><div class="line">array[j] = array[j - <span class="number">1</span>];</div><div class="line">array[j - <span class="number">1</span>] = temp;</div><div class="line"><span class="comment">// 元素执行了交换，则说明数据还没有排好序</span></div><div class="line">flag = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p><strong>其核心思想是对数据进行分组，然后再对分组后的数据进行插入排序算法。该排序算法是不稳定的。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-24/5676873.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月27日 下午3:23:48</div><div class="line"> * <span class="doctag">@remark</span> 希尔排序：对数据进行分组，然后再进行插入排序算法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">// 统计运行次数</span></div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line">shellSort(array, count);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 希尔排序</div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> count</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> gap = array.length;</div><div class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line"><span class="comment">//业界统一实验 平均最好间隔情况</span></div><div class="line">gap = gap / <span class="number">3</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; array.length; i += gap) &#123;</div><div class="line"><span class="comment">// 待插入的位置</span></div><div class="line">pos = i;</div><div class="line"><span class="comment">// 元素拿出来</span></div><div class="line"><span class="keyword">int</span> temp = array[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp; j -= gap) &#123;</div><div class="line"><span class="comment">// 符合条件的元素后移</span></div><div class="line">array[j + gap] = array[j];</div><div class="line"><span class="comment">// 需要插入的位置</span></div><div class="line">pos = j;</div><div class="line">count++;</div><div class="line">&#125;</div><div class="line">array[pos] = temp;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">while</span> (gap &gt; <span class="number">1</span>);</div><div class="line">System.out.println(Arrays.toString(array) + <span class="string">"---&gt;ShellSort："</span> + count);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>其基本思想是从待排序序列中找一个基准数，以基准数进行左右分区，其中一部分的所有数据都比另外一部分所以数据小，基准数排在两个分区序列中间。然后再按此方法对这两部分数据分别进行快速排序，递归进行，达到变成有序序列。该排序算法是不稳定的。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/59375099.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月27日 下午4:30:56</div><div class="line"> * <span class="doctag">@remark</span> 快速排序：用一个PV值，跟PV值进行比较来分区，小的放左边，大的放右边。对分过区的，再找PV值进行分区，直到分区只有一个元素</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line">quickSort(array);</div><div class="line">System.out.println(Arrays.toString(array) + <span class="string">"---&gt;QuickSort"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</div><div class="line">qSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> low</div><div class="line"> * <span class="doctag">@param</span> hight</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> hight)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (low &lt; hight) &#123;</div><div class="line"><span class="keyword">int</span> pivot = partition(array, low, hight);</div><div class="line"><span class="comment">// 对左区间序列排序</span></div><div class="line">qSort(array, low, pivot - <span class="number">1</span>);</div><div class="line"><span class="comment">// 对右区间序列排序</span></div><div class="line">qSort(array, pivot + <span class="number">1</span>, hight);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 分区</div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> low</div><div class="line"> * <span class="doctag">@param</span> hight</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> hight)</span> </span>&#123;</div><div class="line"><span class="comment">// 用分区后的第一个元素作为PV值</span></div><div class="line"><span class="keyword">int</span> pv = array[low];</div><div class="line"><span class="keyword">while</span> (low &lt; hight) &#123;</div><div class="line"><span class="keyword">while</span> (low &lt; hight &amp;&amp; array[hight] &gt;= pv) &#123;</div><div class="line"><span class="comment">// 比基准数大，本来就在右边，所以hight向前移动</span></div><div class="line">hight--;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (low &lt; hight) &#123;</div><div class="line">array[low] = array[hight];</div><div class="line">low++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (low &lt; hight &amp;&amp; array[low] &lt;= pv) &#123;</div><div class="line"><span class="comment">// 比基准数小，本来就在左边，所以low向前移动</span></div><div class="line">low++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (low &lt; hight) &#123;</div><div class="line">array[hight] = array[low];</div><div class="line">hight--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//把拿出来的PV数，放回到low的位置</span></div><div class="line">array[low] = pv;</div><div class="line"><span class="keyword">return</span> low;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>其基本思想是使用辅助空间，首先是对待排序序列进行拆分，以递归的方式，拆成只剩下一个的时候，再两两进行归并操作，按指定的条件进行排序。再执行最后一次归并时，如果最后一次比较后，某个序列中有多余的元素，会直接插入到辅助空间后面。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/92988182.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.sort;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月27日 下午7:24:42</div><div class="line"> * <span class="doctag">@remark</span> 归并排序：两两归并</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">26</span> &#125;;</div><div class="line">mergeSort(array);</div><div class="line">System.out.println(Arrays.toString(array) + <span class="string">"---&gt;MergeSort"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</div><div class="line">mSort(array, array, <span class="number">0</span>, array.length - <span class="number">1</span>, array.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 归并排序</div><div class="line"> * <span class="doctag">@param</span> src：源数组</div><div class="line"> * <span class="doctag">@param</span> des：目标数组</div><div class="line"> * <span class="doctag">@param</span> low：最低位</div><div class="line"> * <span class="doctag">@param</span> hight：最高位</div><div class="line"> * <span class="doctag">@param</span> max：最大值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mSort</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span>[] des, <span class="keyword">int</span> low, <span class="keyword">int</span> hight, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (low == hight) &#123;</div><div class="line"><span class="comment">// 只有一个元素，不需要归并</span></div><div class="line">des[low] = src[low];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// 如果多个元素，进行两路划分</span></div><div class="line"><span class="keyword">int</span>[] space = <span class="keyword">new</span> <span class="keyword">int</span>[max];</div><div class="line"><span class="keyword">int</span> mid = (low + hight) / <span class="number">2</span>;</div><div class="line">mSort(src, space, low, mid, max);</div><div class="line">mSort(src, space, mid + <span class="number">1</span>, hight, max);</div><div class="line"><span class="comment">// 当剩下一个元素时，递归划分结束。开始进行merge归并操作</span></div><div class="line">merge(space, des, low, mid, hight);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 两两合并</div><div class="line"> * <span class="doctag">@param</span> src</div><div class="line"> * <span class="doctag">@param</span> des</div><div class="line"> * <span class="doctag">@param</span> low</div><div class="line"> * <span class="doctag">@param</span> mid</div><div class="line"> * <span class="doctag">@param</span> hight</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span>[] des, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> hight)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i = low;</div><div class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> k = low;</div><div class="line"><span class="comment">// 将小的放到目的地中</span></div><div class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= hight) &#123;</div><div class="line"><span class="keyword">if</span> (src[i] &lt; src[j]) &#123;</div><div class="line">des[k++] = src[i++];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">des[k++] = src[j++];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 若还剩几个尾部元素</span></div><div class="line"><span class="keyword">while</span> (i &lt;= mid) &#123;</div><div class="line">des[k++] = src[i++];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 若还剩几个尾部元素</span></div><div class="line"><span class="keyword">while</span> (j &lt;= hight) &#123;</div><div class="line">des[k++] = src[j++];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><p><strong>二分查找又称折半查找，效率较高，但有限制条件。只能对线性表的顺序存储结构并且元素有序进行查找。可采用递归、非递归方式。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/46051005.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.sort;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月28日 下午3:18:58</div><div class="line"> * <span class="doctag">@remark</span> 二分查找法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</div><div class="line"><span class="keyword">int</span> index = binarySearch(array, <span class="number">1</span>, <span class="number">0</span>, array.length - <span class="number">1</span>);</div><div class="line">System.out.println(<span class="string">"index："</span> + index);</div><div class="line">index = binarySearch(array, <span class="number">1</span>);</div><div class="line">System.out.println(<span class="string">"index："</span> + index);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 非递归方式</div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> keyword</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> keyword)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> hight = array.length - <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> mid;</div><div class="line"><span class="keyword">while</span> (low &lt;= hight) &#123;</div><div class="line">mid = (low + hight) / <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (keyword == array[mid]) &#123;</div><div class="line"><span class="keyword">return</span> mid;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyword &lt; array[mid]) &#123;</div><div class="line">hight = mid - <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">low = mid + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 递归方式</div><div class="line"> * <span class="doctag">@param</span> array</div><div class="line"> * <span class="doctag">@param</span> keyword</div><div class="line"> * <span class="doctag">@param</span> low</div><div class="line"> * <span class="doctag">@param</span> hight</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> keyword, <span class="keyword">int</span> low, <span class="keyword">int</span> hight)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (low &lt;= hight) &#123;</div><div class="line"><span class="keyword">int</span> mid = (low + hight) / <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (keyword == array[mid]) &#123;</div><div class="line"><span class="keyword">return</span> mid;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyword &gt; array[mid]) &#123;</div><div class="line"><span class="keyword">return</span> binarySearch(array, keyword, mid + <span class="number">1</span>, hight);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> binarySearch(array, keyword, low, mid - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p><strong>又称二叉查找树，其特点是如果右子树非空，右子树上所有结点的值均大于根节点的值。如果左子树非空，左子树上所有结点的值均小于根结点的值。左右子树又各是一棵二叉排序树。中序遍历即可获得一个有序序列。</strong>Java中的TreeSet，其实就是一个二叉排序树，根据左小右大来放置元素。</p><h2 id="其他代码实现"><a href="#其他代码实现" class="headerlink" title="其他代码实现"></a>其他代码实现</h2><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月8日 上午9:37:53</div><div class="line"> * <span class="doctag">@remark</span> 数组结构的顺序栈</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 栈空间的大小</span></div><div class="line"><span class="keyword">private</span> T[] stackArray;<span class="comment">// 顺序栈，采用泛型确定栈空间的存放的数据类型</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> top; <span class="comment">// 栈顶指针</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">maxSize = size;</div><div class="line">stackArray = (T[]) <span class="keyword">new</span> Object[maxSize];</div><div class="line">top = -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 入栈</div><div class="line"> * <span class="doctag">@param</span> element</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">stackArray[++top] = element;</div><div class="line"><span class="keyword">if</span> (top &gt; (maxSize - <span class="number">1</span>))&#123;</div><div class="line">top = maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pretendedPush</span><span class="params">()</span> </span>&#123;</div><div class="line">++top;</div><div class="line"><span class="keyword">if</span> (top &gt; (maxSize - <span class="number">1</span>)) &#123;</div><div class="line">top = maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 出栈</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (top == -<span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> stackArray[top--];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 查看栈顶元素，但是不出栈</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> stackArray[top];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断栈是否空</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断栈是否满</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p><strong>借助栈空间，根据基数对原数取余数，把取到余数入栈，再对原数取整，循环该过程，直到取整的数为0时停止。最后再栈内元素全部出栈。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/65164370.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年4月7日 上午9:17:33</div><div class="line"> * <span class="doctag">@remark</span> 进制转换</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryConversion</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">conversion(<span class="number">6</span>, <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 进制转换的思想是，对一个原数不停的取余数</div><div class="line"> * <span class="doctag">@param</span> number：原始数值</div><div class="line"> * <span class="doctag">@param</span> decimalBinary：转换的进制，基数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">conversion</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> decimalBinary)</span> </span>&#123;</div><div class="line"><span class="comment">// 初始化栈空间，栈的大小。取数值整除基数再加1</span></div><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;(number / decimalBinary + <span class="number">1</span>);</div><div class="line"><span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</div><div class="line"><span class="comment">// 把余数放入栈中</span></div><div class="line">stack.push(number % decimalBinary);</div><div class="line"><span class="comment">// 取整</span></div><div class="line">number = number / decimalBinary;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">System.out.print(stack.pop());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="判断回文数"><a href="#判断回文数" class="headerlink" title="判断回文数"></a>判断回文数</h3><p>回文的特点是：倒着写跟原来是一样的。代码的实现，用了三种方式。<br>第一种是判断非负整数是否是个回文数。采用的方式，是把原来的数值给回转过来，再跟原数值进行一次比较，相等则是回文数。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/58749426.jpg" alt=""><br>第二种是采用栈，对数值的长度进行劈叉，把前一半的数值一次入栈。然后再进行出栈，并与后一半数值进行比较，都相等则是回文数。该方式有一个BUG，当长度是奇数时，前一半数据的长度跟后一半数据的长度并不相等，会导致12321这种类型的数据，判断出来不是回文数。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/21151254.jpg" alt=""><br>第三种是获取数据的字节数组，采用头指针跟尾指针，每循环一次，拿头指针上的数据与尾指针上的数据进行比较，相等则头指针往前挪一位，尾指针往后挪一位。直到头指针小于等与尾指针，循环结束。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/1351937.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年3月5日 下午4:52:12</div><div class="line"> * <span class="doctag">@remark</span> 判断回文数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Symmetry</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(symmetry(<span class="number">1221</span>));</div><div class="line">System.out.println(symmetry(<span class="string">"哈哈哈哈"</span>));</div><div class="line">System.out.println(symmetry(<span class="string">"456654"</span>));</div><div class="line">System.out.println(symmetryStr(<span class="string">"45654"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断一个数值是否是回文数。回文的特点是：倒着写跟原来是一样的。</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> number</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">symmetry</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> record = number;<span class="comment">// 保存原记录数</span></div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">i = number % <span class="number">10</span>;</div><div class="line">sum = sum * <span class="number">10</span> + i;</div><div class="line">number /= <span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (number == <span class="number">0</span>)</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 判断倒过来写的数，是否跟原来的数是一样的。</span></div><div class="line"><span class="keyword">if</span> (sum == record) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断一个串是否是回文串。回文的特点是：倒着写跟原来是一样的。</div><div class="line"> * 使用栈的方式，进行比较。如果串的长度是一个奇数，会存在一个中间数没有对应的数进行比较。</div><div class="line"> * 则会返回false</div><div class="line"> * <span class="doctag">@param</span> string</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">symmetry</span><span class="params">(String string)</span> </span>&#123;</div><div class="line"><span class="comment">// 获取串字符的长度</span></div><div class="line"><span class="keyword">char</span>[] charArray = string.toCharArray();</div><div class="line"><span class="comment">// 初始化栈</span></div><div class="line">Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;(charArray.length / <span class="number">2</span> + <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length / <span class="number">2</span>; i++) &#123;</div><div class="line"><span class="comment">// 前一半的字符放入栈中</span></div><div class="line">stack.push(charArray[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = charArray.length / <span class="number">2</span>; j &lt; charArray.length; j++) &#123;</div><div class="line">Character character = stack.pop();</div><div class="line"><span class="comment">// 栈内已经没有元素了或者有字符不相同</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == character || character != charArray[j]) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断一个串是否是回文串。回文的特点是：倒着写跟原来是一样的。</div><div class="line"> * <span class="doctag">@param</span> string</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">symmetryStr</span><span class="params">(String string)</span> </span>&#123;</div><div class="line"><span class="keyword">char</span>[] charArray = string.toCharArray();</div><div class="line"><span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> end = charArray.length - <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (start &lt;= end) &#123;</div><div class="line"><span class="keyword">if</span> (charArray[start] != charArray[end]) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">start++;</div><div class="line">end--;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h3><p><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/18613059.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span> </div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月7日 上午9:37:53</div><div class="line"> * <span class="doctag">@remark</span> 汉诺塔问题</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HanNuoTa</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"输入一个数字："</span>);</div><div class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"><span class="comment">//操作数</span></div><div class="line"><span class="keyword">int</span> number = scanner.nextInt();</div><div class="line"><span class="comment">//三根柱子</span></div><div class="line">String poleA = <span class="string">"柱子A"</span>;</div><div class="line">String poleB = <span class="string">"柱子B"</span>;</div><div class="line">String poleC = <span class="string">"柱子C"</span>;</div><div class="line"><span class="comment">//A柱子上的盘子，借助B柱子，移动到C柱子</span></div><div class="line">hanNuoTa(number, poleA, poleB, poleC);</div><div class="line">scanner.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> number 盘子数</div><div class="line"> * <span class="doctag">@param</span> poleA盘子所在的柱子</div><div class="line"> * <span class="doctag">@param</span> poleB 需要借力的柱子</div><div class="line"> * <span class="doctag">@param</span> poleC最终移动到的柱子</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanNuoTa</span><span class="params">(<span class="keyword">int</span> number, String poleA, String poleB, String poleC)</span> </span>&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line">如果是1个盘子</div><div class="line">直接将A柱子上的盘子从A移动到C</div><div class="line">否则</div><div class="line">先将A柱子上的n-1个盘子，借助C移动B</div><div class="line">直接将A柱子上的盘子从A移动到C</div><div class="line">最后将B柱子上的n-1个盘子，借助A移动C*/</div><div class="line"><span class="keyword">if</span>(<span class="number">1</span> == number)&#123;</div><div class="line">System.out.println(<span class="string">"将编号为-"</span> + number + <span class="string">"的盘子，直接从柱子-"</span> + poleA + <span class="string">"移动到柱子-"</span> + poleC);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">hanNuoTa(number-<span class="number">1</span>, poleA, poleC, poleB);</div><div class="line">System.out.println(<span class="string">"将编号为-"</span> + number + <span class="string">"的盘子，直接从柱子-"</span> + poleA + <span class="string">"移动到柱子-"</span> + poleC);</div><div class="line">hanNuoTa(number-<span class="number">1</span>, poleB, poleA, poleC);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;科学的研究方法（摘录至文明之光一书）&quot;&gt;&lt;a href=&quot;#科学的研究方法（摘录至文明之光一书）&quot; class=&quot;headerlink&quot; title=&quot;科学的研究方法（摘录至文明之光一书）&quot;&gt;&lt;/a&gt;科学的研究方法（摘录至文明之光一书）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://dhsmp.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://dhsmp.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>回顾数据结构的基础知识</title>
    <link href="http://dhsmp.com/2018/02/26/data_struct/"/>
    <id>http://dhsmp.com/2018/02/26/data_struct/</id>
    <published>2018-02-26T01:20:19.078Z</published>
    <updated>2018-05-04T14:15:44.453Z</updated>
    
    <content type="html"><![CDATA[<p>之前在写Java中的容器时，有写到一些关于数据结构的部分，可以参考<a href="http://dhsmp.com/2017/06/29/list-set-map/">《Java的List、Set、Map容器》</a>一文。这里再详细回顾一下对数据结构的学习。</p><h2 id="C语言及指针回顾"><a href="#C语言及指针回顾" class="headerlink" title="C语言及指针回顾"></a>C语言及指针回顾</h2><p>字节：存储数据的单元，是硬件所能访问的最小单位。<br>1字节=8位，1k=1024字节，1M=1024k，1G=1024M。对于4G内存的电脑来说，所能存放数据最多是（4*1024*1024*1024*8）位的二进制数据。<br>物理内存地址：内存单元的编号，从零开始的非负整数<br>指针：指针就是地址，地址就是指针。<br>指针变量：存放内存单元编号的变量，就是存放地址的变量。<br>结构体：把一些基本类型数据组合在一起，形成一个新的复合数据类型。<br><strong>一个指针变量，无论它指向的变量占几个字节，该指针变量本身只占4个字节。用第一个字节的地址表示整个变量的地址。一个变量的地址是用该变量首字节的地址来表示。CPU通过地址总线、控制总线、数据总线，俗称三根总线，来操作物理内存。</strong></p><h3 id="看懂一个程序的三个步骤"><a href="#看懂一个程序的三个步骤" class="headerlink" title="看懂一个程序的三个步骤"></a>看懂一个程序的三个步骤</h3><ol><li>程序的流程</li><li>每个语句的功能</li><li>试数</li></ol><h2 id="问题规模的增加，算法对运算处理的性能消耗"><a href="#问题规模的增加，算法对运算处理的性能消耗" class="headerlink" title="问题规模的增加，算法对运算处理的性能消耗"></a>问题规模的增加，算法对运算处理的性能消耗</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2017年11月23日 下午2:43:18</div><div class="line"> * <span class="doctag">@remark</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOn</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> n = <span class="number">10000</span>;</div><div class="line"></div><div class="line">method1(n);</div><div class="line"></div><div class="line">method2(n);</div><div class="line"></div><div class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = method3(n);</div><div class="line">System.out.println(<span class="string">"method3："</span> + (System.currentTimeMillis() - start) + <span class="string">"毫秒，sum="</span> + sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用for循环进行1+2+3+...+100的计算。 该方法的时间复杂度是O（n）</div><div class="line"> * <span class="doctag">@param</span> n</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">sum += i;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"method1： "</span> + (System.currentTimeMillis() - start) + <span class="string">"毫秒，sum="</span> + sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用高斯公式进行1+2+3+...+100的计算。 该方法的时间复杂度是O（1）</div><div class="line"> * <span class="doctag">@param</span> n</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"><span class="keyword">long</span> sum = (n + <span class="number">1</span>) * n / <span class="number">2</span>;</div><div class="line">System.out.println(<span class="string">"method2： "</span> + (System.currentTimeMillis() - start) + <span class="string">"毫秒，sum="</span> + sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用递归的方式计算1+2+3+...+100的和。数值过大，会导致内存溢出，递归本质是函数的不停的压栈、出栈的操作</div><div class="line"> * <span class="doctag">@param</span> n</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">method3</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> n + method3(n-<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/73556896.jpg" alt=""><br><strong>从上图的运行结果可以明显的看到，当问题计算的规模n=10000时，好像method1、method2、method3彼此的计算耗时都是0毫秒。但是当n再扩大10倍时，method1花了2毫秒，method3直接抛异常了，而method2而然是0毫秒。</strong><br>method1是用for循环的方式，method2则是高斯公式，method3是用递归的方式。<br>在数据结构领域，关于算法的时间复杂度，有一个计算公式，大O表示法。这里不做过多说明，教科书上有该公式的计算方法跟定论。</p><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><p>数据结构中关于数据的逻辑结构，只分为线性结构、非线程结构。<strong>所谓的线性结构，我们可以用一个生活化的场景来理解它，用穿好线的针能够一次把元素都串起来</strong>。线性结构是指元素只能有一个顶点、一个端点，中间的元素只有一个前驱跟一个后继。</p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>可以把串在一起的元素，紧紧的挤压在一个方向。让元素紧挨着元素。这就可以理解成是一个顺序表。顺序表其实就是数组，一次给一片连续的空间，然后把空间按一个一个的小格子划分好。其特点是：<strong>当CPU在内存中找不到连续一片的符合要求的空间，会导致分配失败。可以通过存放元素格子的宽度，也就是偏移量乘以第几个元素，获取指定地址空间上的元素。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/79473786.jpg" alt=""></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//连续存储数组的算法</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> * pBase;<span class="comment">//存储容器中第一个元素的地址</span></div><div class="line"><span class="keyword">int</span> capacity;<span class="comment">//所能容纳元素的最大容量</span></div><div class="line"><span class="keyword">int</span> length;<span class="comment">//当前有效元素的个数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> capacity)</span></span>;<span class="comment">//初始化容器</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">append_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> value)</span></span>;<span class="comment">//追加元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span>;<span class="comment">//在指定的角标处插入元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_arr</span><span class="params">(struct Arr *, <span class="keyword">int</span> index, <span class="keyword">int</span> * delete_value)</span></span>;<span class="comment">//删除指定角标处的元素，并返回被删除的元素的值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(struct Arr *, <span class="keyword">int</span> index)</span></span>;<span class="comment">//获取指定角标的元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//容器是否空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//容器是否已满</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_arr</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//按元素的值自然排序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//输出元素的值</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invert_arr</span><span class="params">(struct Arr *)</span></span>;<span class="comment">//元素值前后倒置</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> delete_value;</div><div class="line"><span class="keyword">int</span> get_value;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span> <span class="title">array</span>;</span></div><div class="line">init_arr(&amp;<span class="built_in">array</span>, <span class="number">10</span>);</div><div class="line">print_arr(&amp;<span class="built_in">array</span>);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n-------分隔符-追加-----\n"</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">10</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">6</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">2</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">-1</span>);</div><div class="line">append_arr(&amp;<span class="built_in">array</span>, <span class="number">9</span>);</div><div class="line">print_arr(&amp;<span class="built_in">array</span>);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n-------分隔符-插入-----\n"</span>);</div><div class="line">insert_arr(&amp;<span class="built_in">array</span>, <span class="number">0</span>, <span class="number">7</span>);</div><div class="line"><span class="comment">//insert_arr(&amp;array, 6, -18);</span></div><div class="line"><span class="comment">//insert_arr(&amp;array, 1, 72);</span></div><div class="line">print_arr(&amp;<span class="built_in">array</span>);</div><div class="line"></div><div class="line"><span class="comment">/**printf("\n-------分隔符-删除-----\n");</span></div><div class="line">bool flag = delete_arr(&amp;array, 5, &amp;delete_value);</div><div class="line">print_arr(&amp;array);</div><div class="line">if(flag)&#123;</div><div class="line">printf("被删除的元素的值：%d\n", delete_value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">printf("\n-------分隔符-获取-----\n");</div><div class="line">get_value = get(&amp;array, 5);</div><div class="line">printf("角标 %d 的元素值：%d\n", 5 ,get_value);</div><div class="line">get_value = get(&amp;array, 0);</div><div class="line">printf("角标 %d 的元素值：%d\n", 0 ,get_value);</div><div class="line"></div><div class="line">printf("\n-------分隔符-倒置-----\n");</div><div class="line">invert_arr(&amp;array);</div><div class="line">print_arr(&amp;array);</div><div class="line"></div><div class="line">printf("\n-------分隔符-排序-----\n");</div><div class="line">sort_arr(&amp;array);</div><div class="line">print_arr(&amp;array);*/</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化容器</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> capacity)</span></span></div><div class="line">&#123;</div><div class="line">pArr-&gt;pBase = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * capacity);<span class="comment">//动态分配内存</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pArr-&gt;pBase)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"动态分配内存失败！\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);<span class="comment">//程序退出。跟Java中的System.exit(-1);一样</span></div><div class="line">&#125;</div><div class="line">pArr-&gt;capacity = capacity;</div><div class="line">pArr-&gt;length = <span class="number">0</span>;<span class="comment">//未存储元素，有效元素为0个</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出元素的值</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_arr</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"容器大小为：%d，有效元素个数为：%d\n"</span>, pArr-&gt;capacity, pArr-&gt;length);</div><div class="line"><span class="keyword">if</span>(is_empty(pArr))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"空容器！\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pArr-&gt;length; i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, pArr-&gt;pBase[i]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//容器是否空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="comment">//有效元素的个数为0</span></div><div class="line"><span class="keyword">return</span> pArr-&gt;length == <span class="number">0</span> ? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//容器是否已满</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="comment">//有效元素的个数=容器的长度</span></div><div class="line"><span class="keyword">return</span> pArr-&gt;length == pArr-&gt;capacity ? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//追加</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">append_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="comment">//如果容器满了</span></div><div class="line"><span class="keyword">if</span>(is_full(pArr))&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//在当前容器的最后一个位置处追加元素</span></div><div class="line">pArr-&gt;pBase[pArr-&gt;length] = value;</div><div class="line">pArr-&gt;length++;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在指定的角标处插入元素</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="comment">//如果容器满了</span></div><div class="line"><span class="keyword">if</span>(is_full(pArr))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"容器已满！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//index的值不能是负数，不是超过容器存储的有效元素个数</span></div><div class="line"><span class="comment">//index=有效元素个数时，表示在最后一个元素处追加一个元素值</span></div><div class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; pArr-&gt;length)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//先移位，把指定角标位及该角标之后存放的元素，往后挪一个位子存放</span></div><div class="line"><span class="keyword">for</span>(i = pArr-&gt;length - <span class="number">1</span>; i &gt;= index; i--)&#123;</div><div class="line">pArr-&gt;pBase[i+<span class="number">1</span>] = pArr-&gt;pBase[i];</div><div class="line">&#125;</div><div class="line"><span class="comment">//把值存入指定角标处</span></div><div class="line">pArr-&gt;pBase[index] = value;</div><div class="line">pArr-&gt;length++;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除指定角标处的元素，并返回被删除的元素的值</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_arr</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> index, <span class="keyword">int</span> * delete_value)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="comment">//如果容器满了</span></div><div class="line"><span class="keyword">if</span>(is_empty(pArr))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"容器已空！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//index的值不能是负数，不是超过容器存储的有效元素个数</span></div><div class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; pArr-&gt;length<span class="number">-1</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//把要删除的指定角标处的值取出来</span></div><div class="line">*delete_value = pArr-&gt;pBase[index];</div><div class="line"><span class="comment">//需要移位，要删除的指定角标之后的值需要往前移动一位</span></div><div class="line"><span class="keyword">for</span>(i = index + <span class="number">1</span>; i &lt; pArr-&gt;length; i++)&#123;</div><div class="line">pArr-&gt;pBase[i<span class="number">-1</span>] = pArr-&gt;pBase[i];</div><div class="line">&#125;</div><div class="line">pArr-&gt;length--;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取指定角标位置的元素值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(struct Arr * pArr, <span class="keyword">int</span> index)</span></span>&#123;</div><div class="line"><span class="comment">//index的值不能是负数，不是超过容器存储的有效元素个数</span></div><div class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; pArr-&gt;length<span class="number">-1</span>)&#123;</div><div class="line"><span class="comment">//应该是Java中的数组角标越界异常，不能确定此处返回的值是否是一个有效的值</span></div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pArr-&gt;pBase[index];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//元素值前后倒置</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invert_arr</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> end = pArr-&gt;length<span class="number">-1</span>;</div><div class="line"><span class="keyword">int</span> temp;</div><div class="line"><span class="keyword">while</span>(start &lt; end)&#123;</div><div class="line">temp = pArr-&gt;pBase[start];</div><div class="line">pArr-&gt;pBase[start] = pArr-&gt;pBase[end];</div><div class="line">pArr-&gt;pBase[end] = temp;</div><div class="line">start++;</div><div class="line">end--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//按元素的值自然排序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_arr</span><span class="params">(struct Arr * pArr)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, temp;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;pArr-&gt;length; i++)&#123;</div><div class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;pArr-&gt;length; j++)&#123;</div><div class="line"><span class="keyword">if</span>(pArr-&gt;pBase[i] &gt; pArr-&gt;pBase[j])&#123;</div><div class="line">temp = pArr-&gt;pBase[j];</div><div class="line">pArr-&gt;pBase[j] = pArr-&gt;pBase[i];</div><div class="line">pArr-&gt;pBase[i] = temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a>链式结构</h3><p>可以把串在一起的元素，中间的线还流出一点点来。只要顺着线能找到元素。这就可以理解成是一个链式结构。<strong>每一个数据元素的地址可以是分散开来的，动态分配，彼此通过指针相连。每个结点只有一个后续结点，首结点没有前驱，尾结点没有后续。</strong>链式结构，也就是俗称的链表。对于链表的操作，额外增加一个头结点，以方便对整个链表的操作。头结点跟头指针是两个不同的概念。头结点的数据域部分是空的。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/63551606.jpg" alt=""></p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>在单链表的结构中，数据元素要有两部分，一部分存放数据元素的数据部分，一部分存放下一个数据元素的地址。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/66911155.jpg" alt=""></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> data;<span class="comment">//数据域</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指针域</span></div><div class="line">&#125;NODE, *PNODE;</div><div class="line"></div><div class="line"><span class="comment">//创建链表</span></div><div class="line"><span class="function">PNODE <span class="title">creat_list</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">//输出链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//是否为空链表</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//获取链表的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//对链表进行排序：按自然顺序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE)</span></span>;</div><div class="line"><span class="comment">//插入结点</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_node</span><span class="params">(PNODE,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="comment">//删除结点</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_node</span><span class="params">(PNODE,<span class="keyword">int</span>,<span class="keyword">int</span>*)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> deleteVal;</div><div class="line">PNODE pHead = <span class="literal">NULL</span>;</div><div class="line">pHead = creat_list();</div><div class="line"><span class="comment">//输出值</span></div><div class="line">print_list(pHead);</div><div class="line"><span class="keyword">if</span>(is_empty(pHead))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"空链表\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"链表不为空\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取链表长度</span></div><div class="line">len = get_len(pHead);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"链表的长度为：%d\n"</span>, len);</div><div class="line"><span class="comment">//排序</span></div><div class="line">sort_list(pHead);</div><div class="line">print_list(pHead);</div><div class="line"></div><div class="line"><span class="comment">//插入</span></div><div class="line"><span class="keyword">if</span>(insert_node(pHead, <span class="number">1</span>, <span class="number">33</span>))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"插入成功！\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"插入失败！\n"</span>);</div><div class="line">&#125;</div><div class="line">print_list(pHead);</div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">if</span>(delete_node(pHead, <span class="number">0</span>, &amp;deleteVal))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"删除成功！\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"删除失败！\n"</span>);</div><div class="line">&#125;</div><div class="line">print_list(pHead);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建链表</span></div><div class="line"><span class="function">PNODE <span class="title">creat_list</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> value;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="comment">//创建头结点</span></div><div class="line">PNODE pHead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pHead)&#123;</div><div class="line"><span class="comment">//创建失败</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"分配内存失败，程序终止!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输出链表的结点个数："</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</div><div class="line"></div><div class="line">PNODE pTail = pHead;</div><div class="line">pTail-&gt;pNext = <span class="literal">NULL</span>;</div><div class="line"><span class="comment">//循环生成链表的每个节点</span></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"请输出第%d个结点的值："</span>, i+<span class="number">1</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;value);</div><div class="line"></div><div class="line"><span class="comment">//创建一个新的结点</span></div><div class="line">PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line">pNew-&gt;data = value;</div><div class="line">pTail-&gt;pNext = pNew;</div><div class="line">pNew-&gt;pNext = <span class="literal">NULL</span>;</div><div class="line">pTail = pNew;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pHead;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line">PNODE p = pHead-&gt;pNext;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;data);</div><div class="line">p = p-&gt;pNext;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//是否为空链表</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span> == pHead-&gt;pNext ? <span class="literal">true</span>:<span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取链表的长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">PNODE p = pHead-&gt;pNext;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p)&#123;</div><div class="line">p = p-&gt;pNext;</div><div class="line">len++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//对链表进行排序：按自然顺序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE pHead)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, temp;</div><div class="line"><span class="comment">//总长度</span></div><div class="line"><span class="keyword">int</span> len = get_len(pHead);</div><div class="line"><span class="comment">//一个当前节点，一个当前节点的下一个节点</span></div><div class="line">PNODE pNow, pNext;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, pNow=pHead-&gt;pNext;i&lt;len<span class="number">-1</span>;i++, pNow = pNow-&gt;pNext)&#123;</div><div class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>, pNext = pNow-&gt;pNext;j&lt;len;j++, pNext = pNext-&gt;pNext)&#123;</div><div class="line"><span class="keyword">if</span>(pNow-&gt;data &gt; pNext-&gt;data)&#123;<span class="comment">//a[i] &gt; a[j]</span></div><div class="line">temp =pNow-&gt;data;<span class="comment">//temp = a[i]</span></div><div class="line">pNow-&gt;data = pNext-&gt;data;<span class="comment">//a[i] = a[j]</span></div><div class="line">pNext-&gt;data= temp;<span class="comment">//a[j] = temp;</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在指定位置插入结点，position从0开始</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_node</span><span class="params">(PNODE pHead, <span class="keyword">int</span> position, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="comment">//获取链表的总长度</span></div><div class="line"><span class="comment">//int len = get_len(pHead);</span></div><div class="line"><span class="comment">//判断position是否是一个有效数。长度是5，position为6，表示是在末尾处添加。index为7，超过有效值</span></div><div class="line"><span class="comment">//if(position &gt; len + 1)&#123;</span></div><div class="line"><span class="comment">//return false;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"><span class="comment">//直接定位到需要插入结点的前一结点</span></div><div class="line">PNODE p = pHead;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p &amp;&amp; len &lt; position)&#123;</div><div class="line">p = p-&gt;pNext;</div><div class="line">len++;</div><div class="line">&#125;</div><div class="line"><span class="comment">//结点不存在</span></div><div class="line"><span class="keyword">if</span>(len &gt; position || <span class="literal">NULL</span> == p)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建一个新结点</span></div><div class="line">PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pNew)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"动态内存分配失败！程序退出\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">pNew-&gt;data = value;</div><div class="line">pNew-&gt;pNext = p-&gt;pNext;</div><div class="line">p-&gt;pNext = pNew;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除指定位置的结点，position从0开始</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_node</span><span class="params">(PNODE pHead, <span class="keyword">int</span> position ,<span class="keyword">int</span>* deleteVal)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"><span class="comment">//直接定位到需要插入结点的前一结点</span></div><div class="line">PNODE p = pHead;</div><div class="line"><span class="keyword">while</span>(<span class="literal">NULL</span> != p-&gt;pNext &amp;&amp; len &lt; position)&#123;</div><div class="line">p = p-&gt;pNext;</div><div class="line">len++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(len &gt; position || <span class="literal">NULL</span> == p-&gt;pNext)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//要删除的结点</span></div><div class="line">PNODE q = p-&gt;pNext;</div><div class="line">*deleteVal = q-&gt;data;</div><div class="line"></div><div class="line"><span class="comment">//把p的指针域指向要删除结点的下一个节点</span></div><div class="line">p-&gt;pNext = p-&gt;pNext-&gt;pNext;</div><div class="line"><span class="comment">//释放删除结点的内存空间</span></div><div class="line"><span class="built_in">free</span>(q);</div><div class="line">q = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>在双链表的结构中，数据元素要有三部分，一部分存放数据元素的数据部分，一部分存放下一个数据元素的地址，一部分存放上一个数据元素的地址。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/12872314.jpg" alt=""></p><h2 id="线性结构的应用-队列、栈"><a href="#线性结构的应用-队列、栈" class="headerlink" title="线性结构的应用-队列、栈"></a>线性结构的应用-队列、栈</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>操作受限的线性表，也称先进先出表。队尾插入，队头取出元素。<strong>在非空队列中，队头指针始终指向队头元素，队尾指针始终指向队尾元素的下一个位置</strong>。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-18/99260764.jpg" alt=""></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/94670713.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//循环队列，先进先出</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></div><div class="line"><span class="keyword">int</span> * pBase;<span class="comment">//动态数组</span></div><div class="line"><span class="keyword">int</span> front;<span class="comment">//队列中有效元素的头元素</span></div><div class="line"><span class="keyword">int</span> rear;<span class="comment">//队列中有效元素的尾元素</span></div><div class="line">&#125;QUEUE;</div><div class="line"></div><div class="line"><span class="comment">//初始化循环队列</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"><span class="comment">//入队，在队列有效元素的尾部添加</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(QUEUE *, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="comment">//出队，从队头开始获取</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(QUEUE *, <span class="keyword">int</span> *)</span></span>;</div><div class="line"><span class="comment">//是否已经满</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"><span class="comment">//是否已经空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"><span class="comment">//打印元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(QUEUE *)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">QUEUE q;</div><div class="line"><span class="keyword">int</span> delValue;</div><div class="line"></div><div class="line">init(&amp;q);</div><div class="line"></div><div class="line">add(&amp;q, <span class="number">1</span>);</div><div class="line">add(&amp;q, <span class="number">2</span>);</div><div class="line">add(&amp;q, <span class="number">3</span>);</div><div class="line">add(&amp;q, <span class="number">4</span>);</div><div class="line">add(&amp;q, <span class="number">5</span>);</div><div class="line">add(&amp;q, <span class="number">6</span>);</div><div class="line">add(&amp;q, <span class="number">7</span>);</div><div class="line">add(&amp;q, <span class="number">8</span>);</div><div class="line"></div><div class="line">print(&amp;q);</div><div class="line"></div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"1出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"2出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"3出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"4出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"5出队的值为：%d\n"</span>, delValue);</div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"6出队的值为：%d\n"</span>, delValue);</div><div class="line"></div><div class="line">add(&amp;q, <span class="number">8</span>);</div><div class="line">add(&amp;q, <span class="number">9</span>);</div><div class="line"></div><div class="line">get(&amp;q, &amp;delValue);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"7出队的值为：%d\n"</span>, delValue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化循环队列</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line">pQueue-&gt;pBase = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">6</span>);</div><div class="line">pQueue-&gt;front = <span class="number">0</span>;</div><div class="line">pQueue-&gt;rear = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//入队，在队列有效元素的尾部添加</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(QUEUE * pQueue, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(isFull(pQueue))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"队列已经放满了！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">pQueue-&gt;pBase[pQueue-&gt;rear] = value;</div><div class="line">pQueue-&gt;rear = (pQueue-&gt;rear + <span class="number">1</span>) % <span class="number">6</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//出队，从队头开始获取</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(QUEUE * pQueue, <span class="keyword">int</span> * delValue)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(isEmpty(pQueue))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"队列已经空了！\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">*delValue = pQueue-&gt;pBase[pQueue-&gt;front];</div><div class="line">pQueue-&gt;front = (pQueue-&gt;front + <span class="number">1</span>) % <span class="number">6</span>;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//是否已经满</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>((pQueue-&gt;rear+<span class="number">1</span>) % <span class="number">6</span> == pQueue-&gt;front)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//是否已经空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(pQueue-&gt;rear == pQueue-&gt;front)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(QUEUE * pQueue)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> front = pQueue-&gt;front;</div><div class="line"><span class="comment">//队头数不等于队尾数，则表示一直都有元素</span></div><div class="line"><span class="keyword">while</span>(front != pQueue-&gt;rear)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, pQueue-&gt;pBase[front]);</div><div class="line">front = (front+<span class="number">1</span>) % <span class="number">6</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><p>栈是限定在表的一端进行插入和删除运算的线性表，通常将插入、删除的一端称为栈顶。链式栈，将对链表的操作进行一定的限制，在一端进行插入、删除即可。链式栈，适合开口向上或向下的操作。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/13995764.jpg" alt=""><br>栈的四种不同操作方式。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/55282453.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//链表的节点数据对象</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> data;<span class="comment">//数据域</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指针域</span></div><div class="line">&#125;NODE, * PNODE;</div><div class="line"></div><div class="line"><span class="comment">//栈--&gt;类似箱子，先进后出</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></div><div class="line">PNODE pTop;</div><div class="line">PNODE pBottom;</div><div class="line">&#125;STACK, * PSTACK;</div><div class="line"></div><div class="line"><span class="comment">//初始化栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</div><div class="line"><span class="comment">//压栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(PSTACK, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="comment">//输出栈中的数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(PSTACK)</span></span>;</div><div class="line"><span class="comment">//出栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(PSTACK, <span class="keyword">int</span>*)</span></span>;</div><div class="line"><span class="comment">//清空</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK)</span></span>;</div><div class="line"><span class="comment">//是否是空栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">STACK <span class="built_in">stack</span>;</div><div class="line"><span class="keyword">int</span> value;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">init(&amp;<span class="built_in">stack</span>);</div><div class="line"></div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">1</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">2</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">3</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">4</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">5</span>);</div><div class="line">push(&amp;<span class="built_in">stack</span>, <span class="number">6</span>);</div><div class="line">print(&amp;<span class="built_in">stack</span>);</div><div class="line">clear(&amp;<span class="built_in">stack</span>);</div><div class="line"><span class="keyword">if</span>(pop(&amp;<span class="built_in">stack</span>, &amp;value))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"出栈成功！元素值为：%d\n"</span>, value);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"出栈失败！"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(&amp;<span class="built_in">stack</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//初始化栈</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line">pStack-&gt;pTop = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pStack-&gt;pTop)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">pStack-&gt;pBottom = pStack-&gt;pTop;</div><div class="line">pStack-&gt;pTop-&gt;data = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//压栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(PSTACK pStack, <span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="comment">//先造一个节点出来</span></div><div class="line">PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == pNew)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"分配内存失败!\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">pNew-&gt;data = value;</div><div class="line">pNew-&gt;pNext = pStack-&gt;pTop;</div><div class="line">pStack-&gt;pTop = pNew;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出栈中的数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line">PNODE node = pStack-&gt;pTop;</div><div class="line"><span class="keyword">while</span>(node != pStack-&gt;pBottom)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, node-&gt;data);</div><div class="line">node = node-&gt;pNext;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//出栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(PSTACK pStack, <span class="keyword">int</span> * value)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(isEmpty(pStack))&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"已经是空栈了\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//要出栈的节点</span></div><div class="line">PNODE node = pStack-&gt;pTop;</div><div class="line"><span class="comment">//出栈节点的值</span></div><div class="line">*value = node-&gt;data;</div><div class="line"><span class="comment">//pTop往下移一个</span></div><div class="line">pStack-&gt;pTop = node-&gt;pNext;</div><div class="line"><span class="comment">//释放出栈节点的内存</span></div><div class="line"><span class="built_in">free</span>(node);</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//是否是空栈</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> pStack-&gt;pTop == pStack-&gt;pBottom ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//清空</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK pStack)</span></span>&#123;</div><div class="line">PNODE p = pStack-&gt;pTop;</div><div class="line">PNODE q = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">while</span>(p != pStack-&gt;pBottom)&#123;</div><div class="line">q = p-&gt;pNext;</div><div class="line"><span class="comment">//释放内存</span></div><div class="line"><span class="built_in">free</span>(p);</div><div class="line">p = q;</div><div class="line">&#125;</div><div class="line">pStack-&gt;pTop = pStack-&gt;pBottom;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="顺序表栈"><a href="#顺序表栈" class="headerlink" title="顺序表栈"></a>顺序表栈</h3><p>顺序表栈，适合开口向左或向右的操作。顺序存储结构，采用数组实现。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/51749974.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年2月8日 上午9:37:53</div><div class="line"> * <span class="doctag">@remark</span> 数组结构的顺序栈</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 栈空间的大小</span></div><div class="line"><span class="keyword">private</span> T[] stackArray;<span class="comment">// 顺序栈，采用泛型确定栈空间的存放的数据类型</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> top; <span class="comment">// 栈顶指针</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">maxSize = size;</div><div class="line">stackArray = (T[]) <span class="keyword">new</span> Object[maxSize];</div><div class="line">top = -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 入栈</div><div class="line"> * <span class="doctag">@param</span> element</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">stackArray[++top] = element;</div><div class="line"><span class="keyword">if</span> (top &gt; (maxSize - <span class="number">1</span>))&#123;</div><div class="line">top = maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pretendedPush</span><span class="params">()</span> </span>&#123;</div><div class="line">++top;</div><div class="line"><span class="keyword">if</span> (top &gt; (maxSize - <span class="number">1</span>)) &#123;</div><div class="line">top = maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 出栈</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (top == -<span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> stackArray[top--];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 查看栈顶元素，但是不出栈</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> stackArray[top];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断栈是否空</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断栈是否满</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> datastructure.part.one;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年4月5日 下午12:06:32</div><div class="line"> * <span class="doctag">@remark</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStack</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Stack&lt;Student&gt; stack = <span class="keyword">new</span> Stack&lt;Student&gt;(<span class="number">10</span>);</div><div class="line"></div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"张三"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"李四"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"王五"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"麻六"</span>));</div><div class="line">stack.push(<span class="keyword">new</span> Student(<span class="string">"黑七"</span>));</div><div class="line"></div><div class="line">System.out.println(stack.pop().getName());</div><div class="line">System.out.println(stack.pop().getName());</div><div class="line">System.out.println(stack.pop().getName());</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="非线性结构-树"><a href="#非线性结构-树" class="headerlink" title="非线性结构-树"></a>非线性结构-树</h2><p>树形结构属于非线性结构，树中结点之间具有明确的层次关系，并且结点之间有分支。例如权限、行政组织、家谱等。树形结构最大的特点是：<strong>它是一个递归结构。</strong>度、深度、层数、左孩子、右孩子、森林之类的名词，这里不就再解释了。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/77582195.jpg" alt=""></p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树不仅仅只是在树形结构中非常重要，在实际问题解决过程中，往往也是转换为二叉树的形式解决的。<strong>例如像Java中的HashMap，抽象出来的数据结构是红黑树。TreeMap，抽象出来的数据结构是二叉排序树。</strong>关于定义，这里就不多说了。<strong>其最大的特点就是每个结点最多只有两棵子树。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/25345859.jpg" alt=""><br>二叉树的存储方式，分为顺序存储结构跟链式存储结构。顺序存储结构比较浪费空间，基本都是采用链式存储。<br>顺序存储结构是把二叉树补充成一个完全二叉树，添加一些实际上不存在的虚节点，从根节点开始，一层一层从左往右依次存放到顺序表中。<br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/24588966.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/71655698.jpg" alt=""><br>二叉树的遍历主要有三种。先序遍历、中序遍历、后序遍历。<strong>所谓的先、中、后，都是相对于对应树或子树的根节点而言的。</strong><br><strong>先序遍历：其规律是根、左、右。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/4043005.jpg" alt=""><br><strong>中序遍历：其规律是左、根、右。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/54019026.jpg" alt=""><br><strong>后序遍历：其规律是左、右、根。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-25/99557798.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></div><div class="line"><span class="comment">//数据域</span></div><div class="line"><span class="keyword">char</span> data;</div><div class="line"><span class="comment">//左孩子</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> * <span class="title">pLeftChild</span>;</span></div><div class="line"><span class="comment">//右孩子</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> * <span class="title">pRightChild</span>;</span></div><div class="line">&#125;TREENODE, *PTREENODE;</div><div class="line"></div><div class="line"><span class="comment">//创建一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">//先序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printXianXu</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//中序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printZhongXu</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//后序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHouXu</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//计算深度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeDepth</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//得到所有的节点数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumNodes</span><span class="params">(PTREENODE rootNode)</span></span>;</div><div class="line"><span class="comment">//得到所有的叶子节点数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumLeafNodes</span><span class="params">(PTREENODE rootNode)</span></span>;</div><div class="line"><span class="comment">//copy一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">copyTree</span><span class="params">(PTREENODE)</span></span>;</div><div class="line"><span class="comment">//使用#号创建法，创建一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree1</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> depth, sum, sumLeaf;</div><div class="line">PTREENODE tree;</div><div class="line"></div><div class="line">PTREENODE rootNode = createTree();</div><div class="line">printXianXu(rootNode);</div><div class="line"><span class="comment">//printZhongXu(rootNode);</span></div><div class="line"><span class="comment">//printHouXu(rootNode);</span></div><div class="line"></div><div class="line">depth = binTreeDepth(rootNode);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"树的深度为：%d\n"</span>, depth);</div><div class="line"></div><div class="line">sum = sumNodes(rootNode);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"树的节点总数为：%d\n"</span>, sum);</div><div class="line"></div><div class="line">sumLeaf = sumLeafNodes(rootNode);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"树的叶子节点总数为：%d\n"</span>, sumLeaf);</div><div class="line"></div><div class="line">tree = copyTree(rootNode);</div><div class="line">printXianXu(tree);</div><div class="line"></div><div class="line">tree = createTree1();</div><div class="line">printXianXu(tree);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree</span><span class="params">()</span></span>&#123;</div><div class="line">PTREENODE pNodeA = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeB = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeC = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeD = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">PTREENODE pNodeE = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line"></div><div class="line">pNodeA-&gt;data = <span class="string">'A'</span>;</div><div class="line">pNodeB-&gt;data = <span class="string">'B'</span>;</div><div class="line">pNodeC-&gt;data = <span class="string">'C'</span>;</div><div class="line">pNodeD-&gt;data = <span class="string">'D'</span>;</div><div class="line">pNodeE-&gt;data = <span class="string">'E'</span>;</div><div class="line"></div><div class="line">pNodeA-&gt;pLeftChild = pNodeB;</div><div class="line">pNodeA-&gt;pRightChild = pNodeC;</div><div class="line"></div><div class="line">pNodeB-&gt;pLeftChild = pNodeB-&gt;pRightChild = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">pNodeC-&gt;pLeftChild = pNodeD;</div><div class="line">pNodeC-&gt;pRightChild = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">pNodeD-&gt;pLeftChild = <span class="literal">NULL</span>;</div><div class="line">pNodeD-&gt;pRightChild = pNodeE;</div><div class="line"></div><div class="line">pNodeE-&gt;pLeftChild = pNodeE-&gt;pRightChild = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> pNodeA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//先序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printXianXu</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode)&#123;</div><div class="line"><span class="comment">//先序访问根节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, rootNode-&gt;data);</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pLeftChild)&#123;</div><div class="line"><span class="comment">//再先序访问左子树</span></div><div class="line">printXianXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pRightChild)&#123;</div><div class="line"><span class="comment">//再先序访问右子树</span></div><div class="line">printXianXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//中序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printZhongXu</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode)&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pLeftChild)&#123;</div><div class="line"><span class="comment">//中序访问左子树</span></div><div class="line">printZhongXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line"><span class="comment">//再中序访问根节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, rootNode-&gt;data);</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pRightChild)&#123;</div><div class="line"><span class="comment">//再中序访问右子树</span></div><div class="line">printZhongXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//后序输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHouXu</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode)&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pLeftChild)&#123;</div><div class="line"><span class="comment">//后序访问左子树</span></div><div class="line">printHouXu(rootNode-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != rootNode-&gt;pRightChild)&#123;</div><div class="line"><span class="comment">//再后序访问右子树</span></div><div class="line">printHouXu(rootNode-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line"><span class="comment">//再后序访问根节点</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, rootNode-&gt;data);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//深度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTreeDepth</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> depL, depR;</div><div class="line"><span class="keyword">if</span>(rootNode ==<span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//计算左子树的深度</span></div><div class="line">depL = binTreeDepth(rootNode-&gt;pLeftChild);</div><div class="line"><span class="comment">//计算右子树的深度</span></div><div class="line">depR = binTreeDepth(rootNode-&gt;pRightChild);</div><div class="line"><span class="keyword">if</span>(depL &gt; depR)&#123;</div><div class="line"><span class="keyword">return</span> depL + <span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> depR + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//所有的节点</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumNodes</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> sumNodesL, sumNodesR;</div><div class="line"><span class="keyword">if</span>(rootNode ==<span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sumNodesL = sumNodes(rootNode-&gt;pLeftChild);</div><div class="line">sumNodesR = sumNodes(rootNode-&gt;pRightChild);</div><div class="line"><span class="keyword">return</span> sumNodesL + sumNodesR + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//得到所有的叶子节点数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumLeafNodes</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> sumNodesL, sumNodesR;</div><div class="line"><span class="keyword">if</span>(rootNode ==<span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(rootNode-&gt;pLeftChild == <span class="literal">NULL</span> &amp;&amp; rootNode-&gt;pRightChild == <span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">sumNodesL = sumLeafNodes(rootNode-&gt;pLeftChild);</div><div class="line">sumNodesR = sumLeafNodes(rootNode-&gt;pRightChild);</div><div class="line"><span class="keyword">return</span> sumNodesL + sumNodesR;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//copy一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">copyTree</span><span class="params">(PTREENODE rootNode)</span></span>&#123;</div><div class="line">PTREENODE newNode;</div><div class="line">PTREENODE leftNode;</div><div class="line">PTREENODE rightNode;</div><div class="line"><span class="keyword">if</span>(rootNode == <span class="literal">NULL</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//copy左子树</span></div><div class="line"><span class="keyword">if</span>(rootNode-&gt;pLeftChild != <span class="literal">NULL</span>)&#123;</div><div class="line">leftNode = copyTree(rootNode-&gt;pLeftChild);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">leftNode = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//copy右子树</span></div><div class="line"><span class="keyword">if</span>(rootNode-&gt;pRightChild != <span class="literal">NULL</span>)&#123;</div><div class="line">rightNode = copyTree(rootNode-&gt;pRightChild);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">rightNode = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个新节点</span></div><div class="line">newNode = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">newNode-&gt;pLeftChild = leftNode;</div><div class="line">newNode-&gt;pRightChild = rightNode;</div><div class="line">newNode-&gt;data = rootNode-&gt;data;</div><div class="line"><span class="keyword">return</span> newNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">//二叉树的非递归遍历算法</div><div class="line">void inorder(PTREENODE rootNode)&#123;</div><div class="line">//辅助指针变量</div><div class="line">PTREENODE node;</div><div class="line">//初始化一个栈</div><div class="line">STACK stack;</div><div class="line">init(&amp;stack);</div><div class="line">//把根节点压栈</div><div class="line">push(&amp;stack, rootNode);</div><div class="line">//栈不为空，就一直循环。知道栈为空</div><div class="line">while(!isEmpty(&amp;stack))&#123;</div><div class="line">//栈顶的元素不给空，则一直循环</div><div class="line">while(getTop(&amp;stack)&#123;</div><div class="line">//把左子树一直压入栈中</div><div class="line">push(&amp;stack, getTop(&amp;stack)-&gt;pLeftChild);</div><div class="line">&#125;</div><div class="line">//执行到这里，说明栈顶是一个NULL元素。左子树为空的节点</div><div class="line">//把栈顶的空元素，出栈</div><div class="line">node = pop(&amp;stack);</div><div class="line">//栈不为空时，说明还没有结束</div><div class="line">if(!isEmpty(&amp;stack))&#123;</div><div class="line">//左子树没有，访问根节点。栈顶的那个元素则是根节点</div><div class="line">printf("%c\n", getTop(&amp;stack)-&gt;data);</div><div class="line">//访问完根节点，根节点则出栈</div><div class="line">node = pop(&amp;stack);</div><div class="line">//把右子树压入栈中。执行完这一句，则进行下一个循环了。</div><div class="line">push(&amp;stack, node-&gt;pRightChild);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="comment">//使用#号创建法，创建一个树</span></div><div class="line"><span class="function">PTREENODE <span class="title">createTree1</span><span class="params">()</span></span>&#123;</div><div class="line">PTREENODE node = <span class="literal">NULL</span>;</div><div class="line">PTREENODE leftNode = <span class="literal">NULL</span>;</div><div class="line">PTREENODE rightNode = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">char</span> ch;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</div><div class="line"><span class="comment">//#号，则不创建树节点</span></div><div class="line"><span class="keyword">if</span>(ch == <span class="string">'#'</span>)&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//创建一个节点</span></div><div class="line">node = (PTREENODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREENODE));</div><div class="line">node-&gt;data = ch;</div><div class="line">node-&gt;pLeftChild = createTree1();</div><div class="line">node-&gt;pRightChild = createTree1();</div><div class="line"><span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="B树、B-树"><a href="#B树、B-树" class="headerlink" title="B树、B+树"></a>B树、B+树</h3><p>平衡多路查找树，不是很懂，只知道常用于文件系统。可以参阅<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">《MySQL索引背后的数据结构及算法原理》</a>一文。</p><h3 id="树、森林与二叉树的转换"><a href="#树、森林与二叉树的转换" class="headerlink" title="树、森林与二叉树的转换"></a>树、森林与二叉树的转换</h3><p>把树或森林转换成成对应的二叉树。<strong>其转换成二叉树的核心思想是二叉树的结点，左边挂孩子，右边挂兄弟。把二叉树还原成对应的树或森林，也是用同样的原理去还原即可。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/18-4-19/55143497.jpg" alt=""></p><h2 id="非线性结构-图"><a href="#非线性结构-图" class="headerlink" title="非线性结构-图"></a>非线性结构-图</h2><p>图的算法比较复杂，了解了一些概念以及图常用算法的原理。并没有写出代码。<br>有向图、无向图、强连通图、存储结构的邻接矩阵和邻接表、遍历算法的深度优先和广度优先、最小生成树的普利姆算法及克鲁斯卡尔算法、最短路径的迪杰斯特拉算法、拓扑排序等。了解一下这些概念，并能在纸上能够大致画出过程图。还真总结不出什么。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在写Java中的容器时，有写到一些关于数据结构的部分，可以参考&lt;a href=&quot;http://dhsmp.com/2017/06/29/list-set-map/&quot;&gt;《Java的List、Set、Map容器》&lt;/a&gt;一文。这里再详细回顾一下对数据结构的学习。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://dhsmp.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
</feed>
