<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamMaker-HS</title>
  
  <subtitle>勤思善问，可敌良师益友。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dhsmp.com/"/>
  <updated>2017-12-18T12:29:24.687Z</updated>
  <id>http://dhsmp.com/</id>
  
  <author>
    <name>HuaShan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis的总结与回顾</title>
    <link href="http://dhsmp.com/2017/12/16/redis-summary/"/>
    <id>http://dhsmp.com/2017/12/16/redis-summary/</id>
    <published>2017-12-16T03:32:28.220Z</published>
    <updated>2017-12-18T12:29:24.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关系型数据库（Mysql、Oracle）"><a href="#关系型数据库（Mysql、Oracle）" class="headerlink" title="关系型数据库（Mysql、Oracle）"></a>关系型数据库（Mysql、Oracle）</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>数据之间有关系，进行数据的操作时非常方便。</li><li>有事务操作，保证了数据的完整性。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>因为数据和数据之间有关系的，而这种关系是由底层大量算法所保证。</li><li>数据的存储与使用，访问量大时IO的资源消耗较大。</li><li>大量算法会拉低系统的运行速度，并且会消耗系统资源。</li><li>在海量数据的增删改查时会显得无能为力，很可能会宕机。</li><li>在海量数据环境下对数据表进行维护、扩展，也会变得无能为力<br>例如：<br>update product set cname = ‘手机数码’;//修改所有数据<br>把商品表的cname字段，由varchar(64),char(100);//更改表字段属性<h2 id="非关系型数据库（NoSQL）"><a href="#非关系型数据库（NoSQL）" class="headerlink" title="非关系型数据库（NoSQL）"></a>非关系型数据库（NoSQL）</h2>No不是单词no，是not only的缩写。设计之初是为了替代关系型数据库。足见其野心。<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3></li><li>海量数据的增删改查，非常轻松</li><li>海量数据的维护非常轻松<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3></li><li>数据与数据之间没有关系，所以不能一目了然</li><li>没有强大的事务，保证数据的完整和安全<h2 id="redis概述"><a href="#redis概述" class="headerlink" title="redis概述"></a>redis概述</h2>key-value结构的数据，类似Java中的Map，默认占用6379端口。共有5钟数据类型。string、hash、list、set、有序的set集合。<h2 id="redis在Linux中的安装"><a href="#redis在Linux中的安装" class="headerlink" title="redis在Linux中的安装"></a>redis在Linux中的安装</h2><h3 id="redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc"><a href="#redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc" class="headerlink" title="redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc"></a>redis是C语言开发，编译依赖gcc环境，需检查Linux环境是否有安装gcc</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/40941534.jpg" alt=""><br>如果提示”bash: gcc: command not found”，则需要安装gcc环境。<br>命令：yum install gcc-c++<br>如果提示是否下载，输入y。<br>如果提示是否安装，输入y。<h3 id="把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译"><a href="#把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译" class="headerlink" title="把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译"></a>把redis的压缩文件上传至Linux服务器，解压的文件目录并进行编译</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/50559517.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/68840915.jpg" alt=""><h3 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/58240855.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/30177891.jpg" alt=""><h3 id="拷贝配置文件至安装目录中"><a href="#拷贝配置文件至安装目录中" class="headerlink" title="拷贝配置文件至安装目录中"></a>拷贝配置文件至安装目录中</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/3039823.jpg" alt=""><br><strong>redis启动需要一个配置文件，可以修改端口号等配置。如果没有配置文件redis也可以启动，启用的是默认配置，不方修改端口号等配置。</strong><h3 id="bin文件夹下的文件"><a href="#bin文件夹下的文件" class="headerlink" title="bin文件夹下的文件"></a>bin文件夹下的文件</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/24933226.jpg" alt=""><br><strong>redis-benchmark        —-性能测试工具<br>redis-check-aof        —-AOF文件修复工具<br>redis-check-dump    —-RDB文件检查工具（快照持久化文件）<br>redis-cli            —-命令行客户端<br>redis-server        —-redis服务器启动命令</strong><h3 id="前端启动服务"><a href="#前端启动服务" class="headerlink" title="前端启动服务"></a>前端启动服务</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/91327662.jpg" alt=""><br><strong>该启动方式有硬伤：无法进行集群部署</strong><h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/25163537.jpg" alt=""><br><strong>可以在上图的命令中加入参数 -h ip地址 -p 端口进行指定连接</strong><h3 id="后端启动服务"><a href="#后端启动服务" class="headerlink" title="后端启动服务"></a>后端启动服务</h3><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/45080117.jpg" alt=""><br>修改redis.conf配置文件的daemonize为yes即可<br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/42130847.jpg" alt=""><br>如果无法启动修改配置supervised yes为supervised no。按上图进行后端启动。<h2 id="redis的5种数据类型"><a href="#redis的5种数据类型" class="headerlink" title="redis的5种数据类型"></a>redis的5种数据类型</h2><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/45206447.jpg" alt=""><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3>字符串类型是redis中最为基础、常用的数据存储类型，<strong>它在redis中是二进制安全的</strong>，value最多可以容纳的数据长度是512M。<br>二进制安全和数据安全是没有关系的。<br>关系型数据库，二进制是不安全的。会出现乱码丢失数据。编解码频繁。<br>以MySQL为例，它能指定数据的存储的字符集。服务器在拿到表中的数据时，很可能因为解码的码表不一致，导致出现数据的乱码。<br>redis直接存储的二进制数据，不会对数据再进行编解码操作。<h4 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h4>set key value：赋值、修改操作，key相同则覆盖，新值覆盖旧值。<br>del key：删除成功返回1（integer），key不存在返回0（integer）<br>getset key value：先取后赋值<br>incr key：递增1，非数字则报错<br>decr key：递减1，非数字则报错<br>append key value：类似StringBuffer的append<br>incrby key number：递增指定的数值<br>decrby key number：递减指定的数值</li></ul><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/99156695.jpg" alt=""></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash类型可以看成是具有String key和String value的map容器。非常适合于存储值对象的信息。占用的磁盘空间极少。其表现形式是{uname:”zhangsna”,age:”19”,sex:”man”}</p><h4 id="常用的命令-1"><a href="#常用的命令-1" class="headerlink" title="常用的命令"></a>常用的命令</h4><p>hset key field value：赋值操作，为key的某个字段赋值。<br>hset key field value [field2 value2 …]：为key的多个字段进行赋值。<br>hmget key field1 field2 …：获取key中多个field的值<br>hgetall key：获取key中所有的filed-value<br>del key：删除整个hash<br>hkeys key：获取key所有的filed<br>hvals key：获取key所有的value</p><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/41605092.jpg" alt=""></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>链表结构，redis的操作中，最多的操作就是进行元素的增删，它的使用环境是做大数据集合的增删、任务队列。关于链表结构，可查看<a href="http://dhsmp.com/2017/06/29/list-set-map/">《Java的List、Set、Map容器》</a>一文</p><h4 id="常用的命令-2"><a href="#常用的命令-2" class="headerlink" title="常用的命令"></a>常用的命令</h4><p>lpush key value [value2 …]：赋值，从左侧开始添加（每次添加都是从左侧开始）<br>rpush key value [value2 …]：赋值，从右侧开始添加（每次添加都是从右侧开始）<br>lrange key start end：获取key链表中从start到end的元素值（含头又含尾）。start为0，end为-1时，表示取整个链表的元素值。<br>lpop key：从左侧开始删除<br>rpop key：从右侧开始删除<br>llen key：返回指定的key关联的链表中元素数量<br>rpoplpush source destination：将链表中的尾部元素弹出并添加到头部（循环）</p><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/35379556.jpg" alt=""></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>在redis中，可以将set类型看作为没有排序的字符集合。set可包含的最大元素数量是4294967295。set集合中不允许出现重复的元素，可在服务端完成多个set之间的聚合计算操作。效率极高。</p><h4 id="常用的命令-3"><a href="#常用的命令-3" class="headerlink" title="常用的命令"></a>常用的命令</h4><p>sadd key value [value2 …]：赋值<br>smembers key：获取set集合key中所有的成员<br>sismember key member：判断参数中指定的成员是否在该set中，返回1表示存在、0表示不存在<br>srem key member [member2 …]：删除set中指定的成员<br>sdiff key1 key2 …：返回key1与key2中相差的成员，而且与key的顺序有关。返回差集<br>sinter key1 key2 …：返回交集<br>sunion key1 key2 …：返回并集<br>scard key：获取set集合key中成员的数量<br>srandmember key：随机返回set中的一个成员<br>sdiffstore destination key1 key2 …：将返回的差集成员存储在destination上<br>sunionstore destination key1 key2 …：将返回的差集成员存储在destination上</p><h3 id="有序set"><a href="#有序set" class="headerlink" title="有序set"></a>有序set</h3><p>有序，不重复。在集合元素上分配分数，每个元素都需要手动赋予一个分数。</p><h4 id="常用的命令-4"><a href="#常用的命令-4" class="headerlink" title="常用的命令"></a>常用的命令</h4><p>zadd key score member score2 member …：赋值<br>zscore key member：返回指定成员的分数<br>zrange key start end [withscores]：获取集合中角标为start-end的成员，分数由小到大<br>zrevrange key start end [withscores]：获取集合中角标为start-end的成员，分数由大到小<br>zrem key member [member2 …]：移除集合中指定的成员<br>zremrangebyrank key start stop：按照排名范围删除元素<br>zremrangebyscore key min max：按照分数范围删除元素<br>zcount key min max：获取分数在min-max之间的成员<br>zrank key member：返回成员在集合中排名，索引从小到大<br>zrevrank key member：返回成员在集合中的排序，索引从大到小</p><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>keys *：*号表示0个或多个任意字符<br>keys ?：?号表示1个字符（任意）<br>del key1 key2 …：删除对应的key<br>exists key：判断key是否存在，1表示存在，0表示不存在<br>rename key newkey：为key重命名<br>type key：获取指定key的值类型<br>expire key：设置key的生存时间<br>ttl key：查看key所剩的超时时间。如果没有设置超时，返回-1。如果返回-2，表示超时不存在。<br>quit：退出客户端<br>dbsize：返回当前数据库中key的数目<br>info：查看redis的信息</p><h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><p>subscribe channel：订阅频道<br>psubscribe channel*：批量订阅频道，*是通配符，订阅以channel部分的值为开头的频道<br>publish channel content：在指定的频道中发布消息</p><h2 id="多数据库"><a href="#多数据库" class="headerlink" title="多数据库"></a>多数据库</h2><p>redis默认有16个数据库，名称从0、1、2…15。在redis上所做的所有数据操作，默认在0号数据库上操作的。命令config get databases可查看数据的个数。<strong>数据库和数据库之间，是不能共享键值对。</strong>命令select 数据库名，切换数据库。move key dbname：将当前库的key移植到指定的数据库中。flushdb，清空当前数据库。flushall，清空redis服务器的数据。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>关系型数据库的事务，是为了保证数据的完整性、保证数据安全。可查看<a href="http://dhsmp.com/2017/07/13/database-transaction/">《关系型数据库的事务》</a>一文。<br>redis的事务，是为了进行redis语句的批量执行。<br>multi：开启事务，用于标记事务的开始，其后执行的命令都将被存入命令队列。<br>exec：提交事务，执行批量化操作<br>discard：事务回滚，不执行批量化操作</p><h2 id="redis的两种持久化策略"><a href="#redis的两种持久化策略" class="headerlink" title="redis的两种持久化策略"></a>redis的两种持久化策略</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>redis默认的持久化机制。安装目录下的dump.rdb文件。相当于照快照，保存的是一种状态。<br>优点：快照保存速度极快，还原数据速度极快。适用灾难备份。<br>缺点：小内存机器不适合使用。<br>RDB机制，符合要求就会照快照（随时随地启动），会占用一部分系统资源（突然的），很可能内存不足直接宕机。适用于内存<br>服务器正常关闭时，照快照。./bin/redis-cli shutdown<br>key满足一定条件，照快照。</p><p>redis.conf的配置，第二列是时间（秒），第三列是发生变化的key的个数。达到，则会在时间到达后照快照。<br><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/72603207.jpg" alt=""></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>使用日志功能保存数据操作。默认AOF机制是关闭的。<strong>AOF操作，只会保存导致对应key发生变化的语句（增、删。改），保存的是语句不是数据。</strong>一个key在操作中可能出现10次的变化，如key保存的value变了，日志就会有对应的每次发生变化的语句。<br>优点：持续占用极少量的内存资源。<br>缺点：日志文件会特别大，不适用于灾难恢复。数据恢复效率远远低于RDB，适用于内存较小的计算机。</p><p><img src="http://orxmumro7.bkt.clouddn.com/17-12-17/7326511.jpg" alt=""></p><p>redis.conf文件中把appendonly no修改为appendonly yes，开启AOF机制<br>appendfsync always        –每修改同步，只要有key变化语句，就进行AOF保存数据。比较安全，浪费效率<br>appendfsync everysec    –每秒进行一次AOF保存数据。安全性低，节省系统资源（默认机制）<br>appendfsync no            –不同步，不进行任何持久化操作。不安全</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关系型数据库（Mysql、Oracle）&quot;&gt;&lt;a href=&quot;#关系型数据库（Mysql、Oracle）&quot; class=&quot;headerlink&quot; title=&quot;关系型数据库（Mysql、Oracle）&quot;&gt;&lt;/a&gt;关系型数据库（Mysql、Oracle）&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云栖大会广东分会感想</title>
    <link href="http://dhsmp.com/2017/11/22/thoughts/"/>
    <id>http://dhsmp.com/2017/11/22/thoughts/</id>
    <published>2017-11-22T11:52:38.477Z</published>
    <updated>2017-11-22T12:40:34.955Z</updated>
    
    <content type="html"><![CDATA[<p>有幸参加了2017年云栖大会广东分会，其实刚开始都没怎么有太多的期望。但还是抱着反正也报名成功了，不如来聆听一次。收获很大，而这种收获不仅仅只是技术知识的收获，而是思想上的收获。</p><h2 id="一位科学家"><a href="#一位科学家" class="headerlink" title="一位科学家"></a>一位科学家</h2><p>闵万里，阿里云人工智能首席科学家。<br>科学家！以前觉得好遥远，也不知道科学家到达是啥模样。是不是像小时候老师说的，科学家都很古板、很安静，只会一脑子的做实验。今天听这个科学家讲完，感觉被老师给误导了。<br>分享了他关于ET城市大脑的理解与实践。从他的演讲谈吐中，瞬间有一种如沐春风感。有条不紊，思路逻辑处处缜密，而又不缺引人入深的思考。从两千年前阿基米德的名言，引入消失的城市（亚特兰蒂斯、楼兰古城），塞纳河上的第一艘蒸汽船。足可见闵博士的阅读之多、思考之深。瞬间颠覆了我心中对于科学家的定义。甚至让我有点浮想联翩，人生就需要与高段位的选手做队友。在闵博士分享关于城市这个命题的研究与实践时，又不得不佩服此科学家对于真理的追求，与心中的那份笃定。博士在分享时，是快乐的、开心的。<br>不禁思考起，初中时老师常说的一句话：“吃得苦中苦方为人上人。”直到今天，心中才终于有了答案。老师在说那句话的场景，本意是想要我能吃下<strong>读书的苦</strong>。但是当我听完那句话之后，一直把疑惑埋在心底。如果读书真的那么苦，那我还要苦这么多年，读书的意义又是何在？回想踏入社会后的学习，感慨自身知识的匮乏，才真正明白。博士的快乐，正式这份求知。用笃定、探索去解心中之惑。而我，从小就认为自己并不比别人差。而青春年少时，未种下梦想的种子。以及读书是一件苦差事的灌输，成长到了目前的人生轨迹。所幸，今天聆听闵博士一席话解了前半生的惑。幸哉幸哉。</p><h2 id="一次颁奖典礼"><a href="#一次颁奖典礼" class="headerlink" title="一次颁奖典礼"></a>一次颁奖典礼</h2><p>天池大数据竞赛的颁奖典礼。这个心目中关注已久的顶级大赛，我总算是瞧见了一次颁奖典礼。能够参加的肯定都是高手，能够获胜的肯定都是顶级高手。这种顶级大赛的竞争，不正燃烧了我心中的向往吗？所以，为了内心的向往，每天每夜的学习都是一件快乐的事情。这样我才能离它更近。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有幸参加了2017年云栖大会广东分会，其实刚开始都没怎么有太多的期望。但还是抱着反正也报名成功了，不如来聆听一次。收获很大，而这种收获不仅仅只是技术知识的收获，而是思想上的收获。&lt;/p&gt;
&lt;h2 id=&quot;一位科学家&quot;&gt;&lt;a href=&quot;#一位科学家&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>应用的变迁</title>
    <link href="http://dhsmp.com/2017/10/30/evolution/"/>
    <id>http://dhsmp.com/2017/10/30/evolution/</id>
    <published>2017-10-30T12:49:09.319Z</published>
    <updated>2017-10-30T14:36:57.122Z</updated>
    
    <content type="html"><![CDATA[<p>时代在变迁，技术在变革，我们所处的环境也一直在发生着变化。浅谈一下对应用变迁的一种自我认知，尝试去理解这种变迁背后深层次的原因。</p><h2 id="传统垂直架构"><a href="#传统垂直架构" class="headerlink" title="传统垂直架构"></a>传统垂直架构</h2><p>还清晰的记得第一次搭建tomcat，第一次做web服务。从jsp、servlet、JDBC实现编写的第一个完整的web应用。MVC三层架构的理解与实践。至Strust2、Spring、SptringMVC、Hibernate、mybatis的学习、理解、应用。更多的出发点，也仅仅只是想要掌握这些技术。<br><img src="http://orxmumro7.bkt.clouddn.com/17-10-30/49816219.jpg" alt=""><br>这就是一个典型的垂直架构应用。本地应用间的API调用。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>技术比较单一（如SSH、SSM技术的集成）</li><li>学习成本低（会用才是重点、无需了解其原理）</li><li>开发上手较快（一个基本的DEMO，就能对着业务进行开发）</li><li>测试、部署、运维比较简单（LAMP）</li><li>整个应用模块都部署在同一个进程内，一旦发生故障，整个节点宕机。<h2 id="面向服务的架构"><a href="#面向服务的架构" class="headerlink" title="面向服务的架构"></a>面向服务的架构</h2>随着越来越多的垂直架构，异构系统之间的通信与数据交换成为需求。以RPC框架为基础，各种面向服务的框架开始流行。如Dubbo+Zookeeper等技术。RPC本身只是一种进程间的通信方式，允许像调用本地服务一样调用远程服务。个人觉得比较原始一点的面向服务的架构，应该是基于WebService搭建的ESB（企业服务总线）。<strong>其三要素完整的表述了一个服务，UDDI目录、WSDL说明书、SOAP协议。实现跨平台，跨语言的服务。</strong>当然还有RESTful。<br><img src="http://orxmumro7.bkt.clouddn.com/17-10-30/34274329.jpg" alt=""><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2>目前能够理解的，也就是其原子服务，专注于做一件事，“高内聚、松耦合”。功能越单一，也就意味着对其他的功能依赖越少。其他的高密度部署、敏捷交付、微自治，暂时没体验过。<br><img src="http://orxmumro7.bkt.clouddn.com/17-10-30/56214898.jpg" alt=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>了解历史的演进过程，才能清楚自己所处哪个潮流中。该如何在这个技术迭代的浪潮中该如何去选择学习的重点技术。而不是人云亦云的去追逐。个人感觉，跟计算机网络的发展有点类似。从单台计算机到局域网，局域网到广域网。从局域网的CSMA/CD协议，到广域网的点对点协议（PPP协议）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时代在变迁，技术在变革，我们所处的环境也一直在发生着变化。浅谈一下对应用变迁的一种自我认知，尝试去理解这种变迁背后深层次的原因。&lt;/p&gt;
&lt;h2 id=&quot;传统垂直架构&quot;&gt;&lt;a href=&quot;#传统垂直架构&quot; class=&quot;headerlink&quot; title=&quot;传统垂直架构&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>表单修改的操作记录 OperateLog</title>
    <link href="http://dhsmp.com/2017/09/14/operate-log/"/>
    <id>http://dhsmp.com/2017/09/14/operate-log/</id>
    <published>2017-09-14T09:19:37.525Z</published>
    <updated>2017-09-14T10:40:49.969Z</updated>
    
    <content type="html"><![CDATA[<p>在表单回显数据时，点击修改。记录住被修改的字段，旧值与新值。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>采用反射+注解。写了一个工具类。当前端把表单数据从前台带入到后台后。把request对象跟原始记录对象传入进行比较。</li><li>工具类中的方法采用反射，获取原始对象上的字段的值。再跟request中的请求参数值进行比较。<br>在原始对象类中，使用注解，对需要进行比较的字段，加入注解，并设置字段中文名。</li><li>工具类中的比较只能对基本数据类型、基本数据类型的包装类型、Date类型进行比较。数组、集合、关联对象是不会进行比较的。这是欠缺的地方，欢迎补充。<h2 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h2><strong>点击查询：（模拟项目中查询数据）</strong></li></ul><p><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/74946581.jpg" alt=""></p><p><strong>回显数据：（模拟项目中表单回显数据）</strong></p><p><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/22204390.jpg" alt=""></p><p><strong>修改数据：（模拟项目中表单修改数据）修改了4项，点击修改，提交到后台</strong></p><p><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/93442222.jpg" alt=""></p><p><strong>修改数据的操作记录</strong></p><p><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/70444357.jpg" alt=""></p><p><strong>再来一次</strong></p><p><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/97567651.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/55753844.jpg" alt=""></p><p><strong>显示操作记录</strong></p><p><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/3972531.jpg" alt=""></p><h2 id="代码示例图"><a href="#代码示例图" class="headerlink" title="代码示例图"></a>代码示例图</h2><p><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/51257277.jpg" alt=""><br>在属性上加入注解，指定属性的中文名。<br><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/95736222.jpg" alt=""><br>工具类中的代码，可以参照这套思路去扩展。<br><img src="http://orxmumro7.bkt.clouddn.com/17-9-14/45014357.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>代码已放到仓库中。<a href="https://github.com/denghuashan/OperateLog" target="_blank" rel="external">https://github.com/denghuashan/OperateLog</a></li><li>欢迎指正或进行扩展。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在表单回显数据时，点击修改。记录住被修改的字段，旧值与新值。&lt;/p&gt;
&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;采用反射+注解。写了一个工具类。当前
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于Java中泛型的认知与理解</title>
    <link href="http://dhsmp.com/2017/08/07/about-generics/"/>
    <id>http://dhsmp.com/2017/08/07/about-generics/</id>
    <published>2017-08-07T01:59:56.997Z</published>
    <updated>2017-08-09T15:35:50.522Z</updated>
    
    <content type="html"><![CDATA[<p>近期看了《深入理解Java虚拟机》中对语法糖、泛型（称伪泛型）的一些介绍，顺便总结梳理一下以前对JDK1.5引入的泛型的理解与使用。</p><h2 id="为何会引入泛型"><a href="#为何会引入泛型" class="headerlink" title="为何会引入泛型"></a>为何会引入泛型</h2><pre><code>public class Tools{    private Object obj;    public Object getObj() {        return obj;    }    public void setObj(Object obj) {        this.obj = obj;    }    public static void main(String[] args) {        Tools tools = new Tools();        tools.setObj(&quot;这是Object&quot;);        Object obj2 = tools.getObj();        Integer i = (Integer) obj2;        System.out.println(i);    }}</code></pre><p><strong>上面这段代码，稍微有点经验，都知道会抛异常java.lang.ClassCastException。但是抛异常的时机却是在运行期。JVM在编译这段代码时，是可以通过的。tools.getObj()获取到对象时，需要程序员手动进行类型转换。这是早期关于Object做法。所以，泛型有了它的用武之地。</strong></p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><pre><code>public class Utils&lt;T&gt; {    private T t;    public void setObject(T t) {        this.t = t;    }    public T getObject() {        return t;    }    public static void main(String[] args) {        Utils&lt;Singer&gt; utils1 = new Utils&lt;Singer&gt;();        utils1.setObject(new Singer());        Singer s = utils1.getObject();    }}class Singer {}class Worker {}</code></pre><p><strong>utils1.getObject()时不用进行类型强转。因为它的类型是在new Utils<singer>()时就已经确定了。</singer></strong><br><img src="http://orxmumro7.bkt.clouddn.com/17-8-9/66448767.jpg" alt=""><br><img src="http://orxmumro7.bkt.clouddn.com/17-8-9/63360097.jpg" alt=""><br><strong>直接在编译期就进行了安全提示。</strong></p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><pre><code>public class Demo {    // 泛型方法    public &lt;T&gt; void show(T t) {        System.out.println(&quot;show:::&quot; + t);    }    public static void main(String[] args) {        Demo demo = new Demo();        demo.show(&quot;haha&quot;);        demo.show(new Tools());    }}</code></pre><p><img src="http://orxmumro7.bkt.clouddn.com/17-8-9/99826172.jpg" alt=""></p><p><strong>泛型方法，它的类型是调用方法时，由实参决定的。</strong></p><h2 id="泛型类，泛型方法"><a href="#泛型类，泛型方法" class="headerlink" title="泛型类，泛型方法"></a>泛型类，泛型方法</h2><pre><code>public class Demo&lt;T&gt; {    // 该方法跟着定义的泛型类走，固定类型    public void show(T t) {        System.out.println(&quot;show---&gt;&quot; + t);    }    // 泛型方法    public &lt;W&gt; void print(W w) {        System.out.println(&quot;print---&gt;&quot; + w);    }    // 静态泛型方法    public static &lt;Q&gt; void say(Q q) {        System.out.println(&quot;say---&gt;&quot; + q);    }    public static void main(String[] args) {        Demo&lt;String&gt; demo = new Demo&lt;String&gt;();        demo.show(&quot;haha1&quot;);        demo.print(2008);        demo.print(&quot;haha2&quot;);        Demo.say(3.1415926);        Demo.say(&quot;haha3&quot;);    }}</code></pre><p>实际运行结果如下：<br><img src="http://orxmumro7.bkt.clouddn.com/17-8-9/42285503.jpg" alt=""><br><strong>show()方法的类型是跟着Demo上面定义的T走的，所以可以隐藏该方法的泛型。</strong><br><img src="http://orxmumro7.bkt.clouddn.com/17-8-9/25281453.jpg" alt=""><br><strong>print()方法的类型是由实参决定的。</strong><br><strong>say()方法的类型也是由实参决定的。</strong></p><h2 id="关于泛型的总结"><a href="#关于泛型的总结" class="headerlink" title="关于泛型的总结"></a>关于泛型的总结</h2><ul><li>用于解决安全问题，是一个安全机制。类型安全机制。</li><li>将运行时期出现的问题java.lang.ClassCastException转移到了编译期。</li><li>避免强制类型转换的麻烦。</li><li>泛型的类型必须为引用类型，不能是基本类型。<h2 id="什么时候定义泛型"><a href="#什么时候定义泛型" class="headerlink" title="什么时候定义泛型"></a>什么时候定义泛型</h2></li><li>当类中要操作的引用数据类型不确定的时候，早期定义Object来完成扩展，现在定义泛型来完成扩展。</li><li>泛型类定义的泛型，在整个类中有效。如果该泛型被方法使用，那么泛型类的对象在明确要操作的具体类型后，该方法要操作的数据类型就已经固定了。</li><li>为了让不同的方法可以操作不同类型，而且类型不确定。那么可以将泛型定义在方法上。</li><li>静态方法是不可以访问类上定义的泛型。如果静态方法操作的数据类型不确定，可以将泛型定义在该方法上。</li><li><p>泛型类每次都是在建立对象时才会被明确，由对象带着类型去运行。</p><h2 id="实际使用场景一"><a href="#实际使用场景一" class="headerlink" title="实际使用场景一"></a>实际使用场景一</h2><pre><code>public class WebUtils {    //把request中的数据封装到bean中    public static &lt;T&gt; T request2Bean(HttpServletRequest request,Class&lt;T&gt; clazz){        try{            T t = clazz.newInstance();            Enumeration e = request.getParameterNames();            while(e.hasMoreElements()){                String name= (String) e.nextElement();                String value = request.getParameter(name);                BeanUtils.setProperty(t, name, value);            }            return t;        }catch (Exception e) {            throw new RuntimeException(e);        }    4}}</code></pre><p><strong>使用静态泛型方法把request中的请求参数，通过反射+BeanUtils，直接封装成对象并返回。</strong></p><h2 id="实际使用场景二"><a href="#实际使用场景二" class="headerlink" title="实际使用场景二"></a>实际使用场景二</h2><pre><code>public class DaoFactory {    private DaoFactory(){}    private static final DaoFactory instance = new DaoFactory();    public static DaoFactory getInstance(){        return instance;    }    public &lt;T&gt; T createDao(String className,Class&lt;T&gt; clazz){        try {            return (T) Class.forName(className).newInstance();        } catch (Exception e) {            throw new RuntimeException(e);        }    }}</code></pre><p><strong>使用工厂设计模式+泛型方法。</strong></p><h2 id="实际使用场景三"><a href="#实际使用场景三" class="headerlink" title="实际使用场景三"></a>实际使用场景三</h2><pre><code>class BaseDao&lt;T&gt; {    // 把最共性的方法，抽取到该基类中来    public List&lt;T&gt; findAll() {        System.out.println(&quot;findAll---&gt;&quot;);        return new ArrayList&lt;T&gt;();    }}public class DemoDao extends BaseDao&lt;Demo&gt; {    public static void main(String[] args) {        DemoDao demoDao = new DemoDao();        System.out.println(demoDao.findAll());    }}</code></pre><p><strong>在new DemoDao的时候，DemoDao继承基类中的findAll()方法就明确是操作Demo这种类型的数据了。</strong></p><h2 id="泛型中的通配符与限定（用于泛型扩展）"><a href="#泛型中的通配符与限定（用于泛型扩展）" class="headerlink" title="泛型中的通配符与限定（用于泛型扩展）"></a>泛型中的通配符与限定（用于泛型扩展）</h2></li><li>?通配符，可以理解为占位符。?表示不确定类型。T表示为具体类型，传什么就是什么类型。</li><li>? extends E：表示可以接收E类型或者E类型的子类型。称为泛型的上限。</li><li>? super E：表示可以接收E类型或者E类型的父类型。称为泛型的下限。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期看了《深入理解Java虚拟机》中对语法糖、泛型（称伪泛型）的一些介绍，顺便总结梳理一下以前对JDK1.5引入的泛型的理解与使用。&lt;/p&gt;
&lt;h2 id=&quot;为何会引入泛型&quot;&gt;&lt;a href=&quot;#为何会引入泛型&quot; class=&quot;headerlink&quot; title=&quot;为何会引
      
    
    </summary>
    
    
  </entry>
  
</feed>
